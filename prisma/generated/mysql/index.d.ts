
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserPaymentMethod
 * 
 */
export type UserPaymentMethod = $Result.DefaultSelection<Prisma.$UserPaymentMethodPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model MediaOnCategory
 * 
 */
export type MediaOnCategory = $Result.DefaultSelection<Prisma.$MediaOnCategoryPayload>
/**
 * Model SessionUpload
 * 
 */
export type SessionUpload = $Result.DefaultSelection<Prisma.$SessionUploadPayload>
/**
 * Model Media
 * 
 */
export type Media = $Result.DefaultSelection<Prisma.$MediaPayload>
/**
 * Model MediaReaction
 * 
 */
export type MediaReaction = $Result.DefaultSelection<Prisma.$MediaReactionPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Playlist
 * 
 */
export type Playlist = $Result.DefaultSelection<Prisma.$PlaylistPayload>
/**
 * Model MediaOnPlaylist
 * 
 */
export type MediaOnPlaylist = $Result.DefaultSelection<Prisma.$MediaOnPlaylistPayload>
/**
 * Model History
 * 
 */
export type History = $Result.DefaultSelection<Prisma.$HistoryPayload>
/**
 * Model Subscriber
 * 
 */
export type Subscriber = $Result.DefaultSelection<Prisma.$SubscriberPayload>
/**
 * Model NotificationSubscriptions
 * 
 */
export type NotificationSubscriptions = $Result.DefaultSelection<Prisma.$NotificationSubscriptionsPayload>
/**
 * Model VideoResource
 * 
 */
export type VideoResource = $Result.DefaultSelection<Prisma.$VideoResourcePayload>
/**
 * Model AudioResource
 * 
 */
export type AudioResource = $Result.DefaultSelection<Prisma.$AudioResourcePayload>
/**
 * Model MediaDetail
 * 
 */
export type MediaDetail = $Result.DefaultSelection<Prisma.$MediaDetailPayload>
/**
 * Model Thumbnail
 * 
 */
export type Thumbnail = $Result.DefaultSelection<Prisma.$ThumbnailPayload>
/**
 * Model PaymentTransaction
 * 
 */
export type PaymentTransaction = $Result.DefaultSelection<Prisma.$PaymentTransactionPayload>
/**
 * Model PaymentTransactionDetail
 * 
 */
export type PaymentTransactionDetail = $Result.DefaultSelection<Prisma.$PaymentTransactionDetailPayload>
/**
 * Model MediaOnAlbum
 * 
 */
export type MediaOnAlbum = $Result.DefaultSelection<Prisma.$MediaOnAlbumPayload>
/**
 * Model Album
 * 
 */
export type Album = $Result.DefaultSelection<Prisma.$AlbumPayload>
/**
 * Model SocialAccount
 * 
 */
export type SocialAccount = $Result.DefaultSelection<Prisma.$SocialAccountPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PaymentMethod: {
  VISA: 'VISA',
  BANKING: 'BANKING'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const StatusResource: {
  UPLOADING: 'UPLOADING',
  PROCESSING: 'PROCESSING',
  DONE: 'DONE',
  STREAMING: 'STREAMING',
  BLOCK: 'BLOCK'
};

export type StatusResource = (typeof StatusResource)[keyof typeof StatusResource]


export const Status: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

export type Status = (typeof Status)[keyof typeof Status]


export const AudioQuality: {
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  LOSSLESS: 'LOSSLESS'
};

export type AudioQuality = (typeof AudioQuality)[keyof typeof AudioQuality]


export const AccountType: {
  YOUTUBE: 'YOUTUBE'
};

export type AccountType = (typeof AccountType)[keyof typeof AccountType]

}

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type StatusResource = $Enums.StatusResource

export const StatusResource: typeof $Enums.StatusResource

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

export type AudioQuality = $Enums.AudioQuality

export const AudioQuality: typeof $Enums.AudioQuality

export type AccountType = $Enums.AccountType

export const AccountType: typeof $Enums.AccountType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userPaymentMethod`: Exposes CRUD operations for the **UserPaymentMethod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPaymentMethods
    * const userPaymentMethods = await prisma.userPaymentMethod.findMany()
    * ```
    */
  get userPaymentMethod(): Prisma.UserPaymentMethodDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.mediaOnCategory`: Exposes CRUD operations for the **MediaOnCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaOnCategories
    * const mediaOnCategories = await prisma.mediaOnCategory.findMany()
    * ```
    */
  get mediaOnCategory(): Prisma.MediaOnCategoryDelegate<ExtArgs>;

  /**
   * `prisma.sessionUpload`: Exposes CRUD operations for the **SessionUpload** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionUploads
    * const sessionUploads = await prisma.sessionUpload.findMany()
    * ```
    */
  get sessionUpload(): Prisma.SessionUploadDelegate<ExtArgs>;

  /**
   * `prisma.media`: Exposes CRUD operations for the **Media** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Media
    * const media = await prisma.media.findMany()
    * ```
    */
  get media(): Prisma.MediaDelegate<ExtArgs>;

  /**
   * `prisma.mediaReaction`: Exposes CRUD operations for the **MediaReaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaReactions
    * const mediaReactions = await prisma.mediaReaction.findMany()
    * ```
    */
  get mediaReaction(): Prisma.MediaReactionDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.playlist`: Exposes CRUD operations for the **Playlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlists
    * const playlists = await prisma.playlist.findMany()
    * ```
    */
  get playlist(): Prisma.PlaylistDelegate<ExtArgs>;

  /**
   * `prisma.mediaOnPlaylist`: Exposes CRUD operations for the **MediaOnPlaylist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaOnPlaylists
    * const mediaOnPlaylists = await prisma.mediaOnPlaylist.findMany()
    * ```
    */
  get mediaOnPlaylist(): Prisma.MediaOnPlaylistDelegate<ExtArgs>;

  /**
   * `prisma.history`: Exposes CRUD operations for the **History** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Histories
    * const histories = await prisma.history.findMany()
    * ```
    */
  get history(): Prisma.HistoryDelegate<ExtArgs>;

  /**
   * `prisma.subscriber`: Exposes CRUD operations for the **Subscriber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscribers
    * const subscribers = await prisma.subscriber.findMany()
    * ```
    */
  get subscriber(): Prisma.SubscriberDelegate<ExtArgs>;

  /**
   * `prisma.notificationSubscriptions`: Exposes CRUD operations for the **NotificationSubscriptions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationSubscriptions
    * const notificationSubscriptions = await prisma.notificationSubscriptions.findMany()
    * ```
    */
  get notificationSubscriptions(): Prisma.NotificationSubscriptionsDelegate<ExtArgs>;

  /**
   * `prisma.videoResource`: Exposes CRUD operations for the **VideoResource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VideoResources
    * const videoResources = await prisma.videoResource.findMany()
    * ```
    */
  get videoResource(): Prisma.VideoResourceDelegate<ExtArgs>;

  /**
   * `prisma.audioResource`: Exposes CRUD operations for the **AudioResource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AudioResources
    * const audioResources = await prisma.audioResource.findMany()
    * ```
    */
  get audioResource(): Prisma.AudioResourceDelegate<ExtArgs>;

  /**
   * `prisma.mediaDetail`: Exposes CRUD operations for the **MediaDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaDetails
    * const mediaDetails = await prisma.mediaDetail.findMany()
    * ```
    */
  get mediaDetail(): Prisma.MediaDetailDelegate<ExtArgs>;

  /**
   * `prisma.thumbnail`: Exposes CRUD operations for the **Thumbnail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Thumbnails
    * const thumbnails = await prisma.thumbnail.findMany()
    * ```
    */
  get thumbnail(): Prisma.ThumbnailDelegate<ExtArgs>;

  /**
   * `prisma.paymentTransaction`: Exposes CRUD operations for the **PaymentTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentTransactions
    * const paymentTransactions = await prisma.paymentTransaction.findMany()
    * ```
    */
  get paymentTransaction(): Prisma.PaymentTransactionDelegate<ExtArgs>;

  /**
   * `prisma.paymentTransactionDetail`: Exposes CRUD operations for the **PaymentTransactionDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentTransactionDetails
    * const paymentTransactionDetails = await prisma.paymentTransactionDetail.findMany()
    * ```
    */
  get paymentTransactionDetail(): Prisma.PaymentTransactionDetailDelegate<ExtArgs>;

  /**
   * `prisma.mediaOnAlbum`: Exposes CRUD operations for the **MediaOnAlbum** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MediaOnAlbums
    * const mediaOnAlbums = await prisma.mediaOnAlbum.findMany()
    * ```
    */
  get mediaOnAlbum(): Prisma.MediaOnAlbumDelegate<ExtArgs>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<ExtArgs>;

  /**
   * `prisma.socialAccount`: Exposes CRUD operations for the **SocialAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialAccounts
    * const socialAccounts = await prisma.socialAccount.findMany()
    * ```
    */
  get socialAccount(): Prisma.SocialAccountDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserPaymentMethod: 'UserPaymentMethod',
    Category: 'Category',
    MediaOnCategory: 'MediaOnCategory',
    SessionUpload: 'SessionUpload',
    Media: 'Media',
    MediaReaction: 'MediaReaction',
    Comment: 'Comment',
    Playlist: 'Playlist',
    MediaOnPlaylist: 'MediaOnPlaylist',
    History: 'History',
    Subscriber: 'Subscriber',
    NotificationSubscriptions: 'NotificationSubscriptions',
    VideoResource: 'VideoResource',
    AudioResource: 'AudioResource',
    MediaDetail: 'MediaDetail',
    Thumbnail: 'Thumbnail',
    PaymentTransaction: 'PaymentTransaction',
    PaymentTransactionDetail: 'PaymentTransactionDetail',
    MediaOnAlbum: 'MediaOnAlbum',
    Album: 'Album',
    SocialAccount: 'SocialAccount'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'userPaymentMethod' | 'category' | 'mediaOnCategory' | 'sessionUpload' | 'media' | 'mediaReaction' | 'comment' | 'playlist' | 'mediaOnPlaylist' | 'history' | 'subscriber' | 'notificationSubscriptions' | 'videoResource' | 'audioResource' | 'mediaDetail' | 'thumbnail' | 'paymentTransaction' | 'paymentTransactionDetail' | 'mediaOnAlbum' | 'album' | 'socialAccount'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserPaymentMethod: {
        payload: Prisma.$UserPaymentMethodPayload<ExtArgs>
        fields: Prisma.UserPaymentMethodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPaymentMethodFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPaymentMethodFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload>
          }
          findFirst: {
            args: Prisma.UserPaymentMethodFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPaymentMethodFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload>
          }
          findMany: {
            args: Prisma.UserPaymentMethodFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload>[]
          }
          create: {
            args: Prisma.UserPaymentMethodCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload>
          }
          createMany: {
            args: Prisma.UserPaymentMethodCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserPaymentMethodDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload>
          }
          update: {
            args: Prisma.UserPaymentMethodUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload>
          }
          deleteMany: {
            args: Prisma.UserPaymentMethodDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserPaymentMethodUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserPaymentMethodUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPaymentMethodPayload>
          }
          aggregate: {
            args: Prisma.UserPaymentMethodAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserPaymentMethod>
          }
          groupBy: {
            args: Prisma.UserPaymentMethodGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserPaymentMethodGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPaymentMethodCountArgs<ExtArgs>,
            result: $Utils.Optional<UserPaymentMethodCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      MediaOnCategory: {
        payload: Prisma.$MediaOnCategoryPayload<ExtArgs>
        fields: Prisma.MediaOnCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaOnCategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaOnCategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload>
          }
          findFirst: {
            args: Prisma.MediaOnCategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaOnCategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload>
          }
          findMany: {
            args: Prisma.MediaOnCategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload>[]
          }
          create: {
            args: Prisma.MediaOnCategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload>
          }
          createMany: {
            args: Prisma.MediaOnCategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MediaOnCategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload>
          }
          update: {
            args: Prisma.MediaOnCategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload>
          }
          deleteMany: {
            args: Prisma.MediaOnCategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MediaOnCategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MediaOnCategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnCategoryPayload>
          }
          aggregate: {
            args: Prisma.MediaOnCategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMediaOnCategory>
          }
          groupBy: {
            args: Prisma.MediaOnCategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaOnCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaOnCategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaOnCategoryCountAggregateOutputType> | number
          }
        }
      }
      SessionUpload: {
        payload: Prisma.$SessionUploadPayload<ExtArgs>
        fields: Prisma.SessionUploadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionUploadFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionUploadFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload>
          }
          findFirst: {
            args: Prisma.SessionUploadFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionUploadFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload>
          }
          findMany: {
            args: Prisma.SessionUploadFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload>[]
          }
          create: {
            args: Prisma.SessionUploadCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload>
          }
          createMany: {
            args: Prisma.SessionUploadCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionUploadDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload>
          }
          update: {
            args: Prisma.SessionUploadUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload>
          }
          deleteMany: {
            args: Prisma.SessionUploadDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUploadUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUploadUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionUploadPayload>
          }
          aggregate: {
            args: Prisma.SessionUploadAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSessionUpload>
          }
          groupBy: {
            args: Prisma.SessionUploadGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionUploadGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionUploadCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionUploadCountAggregateOutputType> | number
          }
        }
      }
      Media: {
        payload: Prisma.$MediaPayload<ExtArgs>
        fields: Prisma.MediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findFirst: {
            args: Prisma.MediaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          findMany: {
            args: Prisma.MediaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>[]
          }
          create: {
            args: Prisma.MediaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          createMany: {
            args: Prisma.MediaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MediaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          update: {
            args: Prisma.MediaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          deleteMany: {
            args: Prisma.MediaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MediaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MediaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaPayload>
          }
          aggregate: {
            args: Prisma.MediaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedia>
          }
          groupBy: {
            args: Prisma.MediaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaCountAggregateOutputType> | number
          }
        }
      }
      MediaReaction: {
        payload: Prisma.$MediaReactionPayload<ExtArgs>
        fields: Prisma.MediaReactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaReactionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaReactionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload>
          }
          findFirst: {
            args: Prisma.MediaReactionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaReactionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload>
          }
          findMany: {
            args: Prisma.MediaReactionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload>[]
          }
          create: {
            args: Prisma.MediaReactionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload>
          }
          createMany: {
            args: Prisma.MediaReactionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MediaReactionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload>
          }
          update: {
            args: Prisma.MediaReactionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload>
          }
          deleteMany: {
            args: Prisma.MediaReactionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MediaReactionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MediaReactionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaReactionPayload>
          }
          aggregate: {
            args: Prisma.MediaReactionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMediaReaction>
          }
          groupBy: {
            args: Prisma.MediaReactionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaReactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaReactionCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaReactionCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Playlist: {
        payload: Prisma.$PlaylistPayload<ExtArgs>
        fields: Prisma.PlaylistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlaylistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlaylistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findFirst: {
            args: Prisma.PlaylistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlaylistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          findMany: {
            args: Prisma.PlaylistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>[]
          }
          create: {
            args: Prisma.PlaylistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          createMany: {
            args: Prisma.PlaylistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlaylistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          update: {
            args: Prisma.PlaylistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          deleteMany: {
            args: Prisma.PlaylistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlaylistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlaylistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlaylistPayload>
          }
          aggregate: {
            args: Prisma.PlaylistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlaylist>
          }
          groupBy: {
            args: Prisma.PlaylistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlaylistCountArgs<ExtArgs>,
            result: $Utils.Optional<PlaylistCountAggregateOutputType> | number
          }
        }
      }
      MediaOnPlaylist: {
        payload: Prisma.$MediaOnPlaylistPayload<ExtArgs>
        fields: Prisma.MediaOnPlaylistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaOnPlaylistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaOnPlaylistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload>
          }
          findFirst: {
            args: Prisma.MediaOnPlaylistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaOnPlaylistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload>
          }
          findMany: {
            args: Prisma.MediaOnPlaylistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload>[]
          }
          create: {
            args: Prisma.MediaOnPlaylistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload>
          }
          createMany: {
            args: Prisma.MediaOnPlaylistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MediaOnPlaylistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload>
          }
          update: {
            args: Prisma.MediaOnPlaylistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload>
          }
          deleteMany: {
            args: Prisma.MediaOnPlaylistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MediaOnPlaylistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MediaOnPlaylistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnPlaylistPayload>
          }
          aggregate: {
            args: Prisma.MediaOnPlaylistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMediaOnPlaylist>
          }
          groupBy: {
            args: Prisma.MediaOnPlaylistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaOnPlaylistGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaOnPlaylistCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaOnPlaylistCountAggregateOutputType> | number
          }
        }
      }
      History: {
        payload: Prisma.$HistoryPayload<ExtArgs>
        fields: Prisma.HistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findFirst: {
            args: Prisma.HistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          findMany: {
            args: Prisma.HistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>[]
          }
          create: {
            args: Prisma.HistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          createMany: {
            args: Prisma.HistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          update: {
            args: Prisma.HistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          deleteMany: {
            args: Prisma.HistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoryPayload>
          }
          aggregate: {
            args: Prisma.HistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistory>
          }
          groupBy: {
            args: Prisma.HistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<HistoryCountAggregateOutputType> | number
          }
        }
      }
      Subscriber: {
        payload: Prisma.$SubscriberPayload<ExtArgs>
        fields: Prisma.SubscriberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriberFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriberFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload>
          }
          findFirst: {
            args: Prisma.SubscriberFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriberFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload>
          }
          findMany: {
            args: Prisma.SubscriberFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload>[]
          }
          create: {
            args: Prisma.SubscriberCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload>
          }
          createMany: {
            args: Prisma.SubscriberCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubscriberDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload>
          }
          update: {
            args: Prisma.SubscriberUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload>
          }
          deleteMany: {
            args: Prisma.SubscriberDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriberUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubscriberUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubscriberPayload>
          }
          aggregate: {
            args: Prisma.SubscriberAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubscriber>
          }
          groupBy: {
            args: Prisma.SubscriberGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubscriberGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriberCountArgs<ExtArgs>,
            result: $Utils.Optional<SubscriberCountAggregateOutputType> | number
          }
        }
      }
      NotificationSubscriptions: {
        payload: Prisma.$NotificationSubscriptionsPayload<ExtArgs>
        fields: Prisma.NotificationSubscriptionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationSubscriptionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationSubscriptionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload>
          }
          findFirst: {
            args: Prisma.NotificationSubscriptionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationSubscriptionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload>
          }
          findMany: {
            args: Prisma.NotificationSubscriptionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload>[]
          }
          create: {
            args: Prisma.NotificationSubscriptionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload>
          }
          createMany: {
            args: Prisma.NotificationSubscriptionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationSubscriptionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload>
          }
          update: {
            args: Prisma.NotificationSubscriptionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationSubscriptionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationSubscriptionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationSubscriptionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationSubscriptionsPayload>
          }
          aggregate: {
            args: Prisma.NotificationSubscriptionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotificationSubscriptions>
          }
          groupBy: {
            args: Prisma.NotificationSubscriptionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationSubscriptionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationSubscriptionsCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationSubscriptionsCountAggregateOutputType> | number
          }
        }
      }
      VideoResource: {
        payload: Prisma.$VideoResourcePayload<ExtArgs>
        fields: Prisma.VideoResourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoResourceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoResourceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload>
          }
          findFirst: {
            args: Prisma.VideoResourceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoResourceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload>
          }
          findMany: {
            args: Prisma.VideoResourceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload>[]
          }
          create: {
            args: Prisma.VideoResourceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload>
          }
          createMany: {
            args: Prisma.VideoResourceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VideoResourceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload>
          }
          update: {
            args: Prisma.VideoResourceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload>
          }
          deleteMany: {
            args: Prisma.VideoResourceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VideoResourceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VideoResourceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VideoResourcePayload>
          }
          aggregate: {
            args: Prisma.VideoResourceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVideoResource>
          }
          groupBy: {
            args: Prisma.VideoResourceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VideoResourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoResourceCountArgs<ExtArgs>,
            result: $Utils.Optional<VideoResourceCountAggregateOutputType> | number
          }
        }
      }
      AudioResource: {
        payload: Prisma.$AudioResourcePayload<ExtArgs>
        fields: Prisma.AudioResourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AudioResourceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AudioResourceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload>
          }
          findFirst: {
            args: Prisma.AudioResourceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AudioResourceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload>
          }
          findMany: {
            args: Prisma.AudioResourceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload>[]
          }
          create: {
            args: Prisma.AudioResourceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload>
          }
          createMany: {
            args: Prisma.AudioResourceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AudioResourceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload>
          }
          update: {
            args: Prisma.AudioResourceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload>
          }
          deleteMany: {
            args: Prisma.AudioResourceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AudioResourceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AudioResourceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AudioResourcePayload>
          }
          aggregate: {
            args: Prisma.AudioResourceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAudioResource>
          }
          groupBy: {
            args: Prisma.AudioResourceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AudioResourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AudioResourceCountArgs<ExtArgs>,
            result: $Utils.Optional<AudioResourceCountAggregateOutputType> | number
          }
        }
      }
      MediaDetail: {
        payload: Prisma.$MediaDetailPayload<ExtArgs>
        fields: Prisma.MediaDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload>
          }
          findFirst: {
            args: Prisma.MediaDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload>
          }
          findMany: {
            args: Prisma.MediaDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload>[]
          }
          create: {
            args: Prisma.MediaDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload>
          }
          createMany: {
            args: Prisma.MediaDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MediaDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload>
          }
          update: {
            args: Prisma.MediaDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload>
          }
          deleteMany: {
            args: Prisma.MediaDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MediaDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MediaDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaDetailPayload>
          }
          aggregate: {
            args: Prisma.MediaDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMediaDetail>
          }
          groupBy: {
            args: Prisma.MediaDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaDetailCountAggregateOutputType> | number
          }
        }
      }
      Thumbnail: {
        payload: Prisma.$ThumbnailPayload<ExtArgs>
        fields: Prisma.ThumbnailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThumbnailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThumbnailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload>
          }
          findFirst: {
            args: Prisma.ThumbnailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThumbnailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload>
          }
          findMany: {
            args: Prisma.ThumbnailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload>[]
          }
          create: {
            args: Prisma.ThumbnailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload>
          }
          createMany: {
            args: Prisma.ThumbnailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ThumbnailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload>
          }
          update: {
            args: Prisma.ThumbnailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload>
          }
          deleteMany: {
            args: Prisma.ThumbnailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThumbnailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThumbnailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThumbnailPayload>
          }
          aggregate: {
            args: Prisma.ThumbnailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThumbnail>
          }
          groupBy: {
            args: Prisma.ThumbnailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThumbnailGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThumbnailCountArgs<ExtArgs>,
            result: $Utils.Optional<ThumbnailCountAggregateOutputType> | number
          }
        }
      }
      PaymentTransaction: {
        payload: Prisma.$PaymentTransactionPayload<ExtArgs>
        fields: Prisma.PaymentTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentTransactionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findFirst: {
            args: Prisma.PaymentTransactionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentTransactionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findMany: {
            args: Prisma.PaymentTransactionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
          }
          create: {
            args: Prisma.PaymentTransactionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          createMany: {
            args: Prisma.PaymentTransactionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentTransactionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          update: {
            args: Prisma.PaymentTransactionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          deleteMany: {
            args: Prisma.PaymentTransactionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentTransactionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentTransactionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          aggregate: {
            args: Prisma.PaymentTransactionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaymentTransaction>
          }
          groupBy: {
            args: Prisma.PaymentTransactionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentTransactionCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentTransactionCountAggregateOutputType> | number
          }
        }
      }
      PaymentTransactionDetail: {
        payload: Prisma.$PaymentTransactionDetailPayload<ExtArgs>
        fields: Prisma.PaymentTransactionDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentTransactionDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentTransactionDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload>
          }
          findFirst: {
            args: Prisma.PaymentTransactionDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentTransactionDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload>
          }
          findMany: {
            args: Prisma.PaymentTransactionDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload>[]
          }
          create: {
            args: Prisma.PaymentTransactionDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload>
          }
          createMany: {
            args: Prisma.PaymentTransactionDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PaymentTransactionDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload>
          }
          update: {
            args: Prisma.PaymentTransactionDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload>
          }
          deleteMany: {
            args: Prisma.PaymentTransactionDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentTransactionDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PaymentTransactionDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionDetailPayload>
          }
          aggregate: {
            args: Prisma.PaymentTransactionDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePaymentTransactionDetail>
          }
          groupBy: {
            args: Prisma.PaymentTransactionDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PaymentTransactionDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentTransactionDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<PaymentTransactionDetailCountAggregateOutputType> | number
          }
        }
      }
      MediaOnAlbum: {
        payload: Prisma.$MediaOnAlbumPayload<ExtArgs>
        fields: Prisma.MediaOnAlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MediaOnAlbumFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MediaOnAlbumFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload>
          }
          findFirst: {
            args: Prisma.MediaOnAlbumFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MediaOnAlbumFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload>
          }
          findMany: {
            args: Prisma.MediaOnAlbumFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload>[]
          }
          create: {
            args: Prisma.MediaOnAlbumCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload>
          }
          createMany: {
            args: Prisma.MediaOnAlbumCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MediaOnAlbumDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload>
          }
          update: {
            args: Prisma.MediaOnAlbumUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload>
          }
          deleteMany: {
            args: Prisma.MediaOnAlbumDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MediaOnAlbumUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MediaOnAlbumUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MediaOnAlbumPayload>
          }
          aggregate: {
            args: Prisma.MediaOnAlbumAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMediaOnAlbum>
          }
          groupBy: {
            args: Prisma.MediaOnAlbumGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MediaOnAlbumGroupByOutputType>[]
          }
          count: {
            args: Prisma.MediaOnAlbumCountArgs<ExtArgs>,
            result: $Utils.Optional<MediaOnAlbumCountAggregateOutputType> | number
          }
        }
      }
      Album: {
        payload: Prisma.$AlbumPayload<ExtArgs>
        fields: Prisma.AlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findFirst: {
            args: Prisma.AlbumFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findMany: {
            args: Prisma.AlbumFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          create: {
            args: Prisma.AlbumCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          createMany: {
            args: Prisma.AlbumCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AlbumDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          update: {
            args: Prisma.AlbumUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          deleteMany: {
            args: Prisma.AlbumDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AlbumUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          aggregate: {
            args: Prisma.AlbumAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAlbum>
          }
          groupBy: {
            args: Prisma.AlbumGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AlbumGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumCountArgs<ExtArgs>,
            result: $Utils.Optional<AlbumCountAggregateOutputType> | number
          }
        }
      }
      SocialAccount: {
        payload: Prisma.$SocialAccountPayload<ExtArgs>
        fields: Prisma.SocialAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialAccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialAccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          findFirst: {
            args: Prisma.SocialAccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialAccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          findMany: {
            args: Prisma.SocialAccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>[]
          }
          create: {
            args: Prisma.SocialAccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          createMany: {
            args: Prisma.SocialAccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SocialAccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          update: {
            args: Prisma.SocialAccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          deleteMany: {
            args: Prisma.SocialAccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SocialAccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SocialAccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SocialAccountPayload>
          }
          aggregate: {
            args: Prisma.SocialAccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSocialAccount>
          }
          groupBy: {
            args: Prisma.SocialAccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SocialAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.SocialAccountCountArgs<ExtArgs>,
            result: $Utils.Optional<SocialAccountCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    media: number
    mediaReactions: number
    histories: number
    subscribers: number
    channel: number
    NotificationSubscriptions: number
    Comment: number
    Playlist: number
    UserPaymentMethod: number
    Album: number
    SocialAccount: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | UserCountOutputTypeCountMediaArgs
    mediaReactions?: boolean | UserCountOutputTypeCountMediaReactionsArgs
    histories?: boolean | UserCountOutputTypeCountHistoriesArgs
    subscribers?: boolean | UserCountOutputTypeCountSubscribersArgs
    channel?: boolean | UserCountOutputTypeCountChannelArgs
    NotificationSubscriptions?: boolean | UserCountOutputTypeCountNotificationSubscriptionsArgs
    Comment?: boolean | UserCountOutputTypeCountCommentArgs
    Playlist?: boolean | UserCountOutputTypeCountPlaylistArgs
    UserPaymentMethod?: boolean | UserCountOutputTypeCountUserPaymentMethodArgs
    Album?: boolean | UserCountOutputTypeCountAlbumArgs
    SocialAccount?: boolean | UserCountOutputTypeCountSocialAccountArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMediaReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaReactionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubscribersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriberWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChannelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriberWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationSubscriptionsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserPaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPaymentMethodWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSocialAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialAccountWhereInput
  }



  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    categoryOnMedia: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoryOnMedia?: boolean | CategoryCountOutputTypeCountCategoryOnMediaArgs
  }

  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountCategoryOnMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnCategoryWhereInput
  }



  /**
   * Count Type MediaCountOutputType
   */

  export type MediaCountOutputType = {
    thumbnails: number
    videoResources: number
    audioResources: number
    mediaReaction: number
    history: number
    mediaOnCategory: number
    comment: number
    mediaOnPlaylist: number
    sessionUpload: number
    mediaOnAlbum: number
  }

  export type MediaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thumbnails?: boolean | MediaCountOutputTypeCountThumbnailsArgs
    videoResources?: boolean | MediaCountOutputTypeCountVideoResourcesArgs
    audioResources?: boolean | MediaCountOutputTypeCountAudioResourcesArgs
    mediaReaction?: boolean | MediaCountOutputTypeCountMediaReactionArgs
    history?: boolean | MediaCountOutputTypeCountHistoryArgs
    mediaOnCategory?: boolean | MediaCountOutputTypeCountMediaOnCategoryArgs
    comment?: boolean | MediaCountOutputTypeCountCommentArgs
    mediaOnPlaylist?: boolean | MediaCountOutputTypeCountMediaOnPlaylistArgs
    sessionUpload?: boolean | MediaCountOutputTypeCountSessionUploadArgs
    mediaOnAlbum?: boolean | MediaCountOutputTypeCountMediaOnAlbumArgs
  }

  // Custom InputTypes

  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaCountOutputType
     */
    select?: MediaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountThumbnailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThumbnailWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountVideoResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoResourceWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountAudioResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AudioResourceWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountMediaReactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaReactionWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountMediaOnCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnCategoryWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountMediaOnPlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnPlaylistWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountSessionUploadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionUploadWhereInput
  }


  /**
   * MediaCountOutputType without action
   */
  export type MediaCountOutputTypeCountMediaOnAlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnAlbumWhereInput
  }



  /**
   * Count Type PlaylistCountOutputType
   */

  export type PlaylistCountOutputType = {
    MediaOnPlaylist: number
  }

  export type PlaylistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MediaOnPlaylist?: boolean | PlaylistCountOutputTypeCountMediaOnPlaylistArgs
  }

  // Custom InputTypes

  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlaylistCountOutputType
     */
    select?: PlaylistCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlaylistCountOutputType without action
   */
  export type PlaylistCountOutputTypeCountMediaOnPlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnPlaylistWhereInput
  }



  /**
   * Count Type PaymentTransactionCountOutputType
   */

  export type PaymentTransactionCountOutputType = {
    PaymentTransactionDetail: number
  }

  export type PaymentTransactionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PaymentTransactionDetail?: boolean | PaymentTransactionCountOutputTypeCountPaymentTransactionDetailArgs
  }

  // Custom InputTypes

  /**
   * PaymentTransactionCountOutputType without action
   */
  export type PaymentTransactionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionCountOutputType
     */
    select?: PaymentTransactionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PaymentTransactionCountOutputType without action
   */
  export type PaymentTransactionCountOutputTypeCountPaymentTransactionDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionDetailWhereInput
  }



  /**
   * Count Type AlbumCountOutputType
   */

  export type AlbumCountOutputType = {
    mediaOnAlbum: number
  }

  export type AlbumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mediaOnAlbum?: boolean | AlbumCountOutputTypeCountMediaOnAlbumArgs
  }

  // Custom InputTypes

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountMediaOnAlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnAlbumWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    username: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lockedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    username: string | null
    password: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lockedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    username: number
    password: number
    avatar: number
    createdAt: number
    updatedAt: number
    lockedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    lockedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    lockedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    username?: true
    password?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    lockedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    lockedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lockedAt?: boolean
    media?: boolean | User$mediaArgs<ExtArgs>
    mediaReactions?: boolean | User$mediaReactionsArgs<ExtArgs>
    histories?: boolean | User$historiesArgs<ExtArgs>
    subscribers?: boolean | User$subscribersArgs<ExtArgs>
    channel?: boolean | User$channelArgs<ExtArgs>
    NotificationSubscriptions?: boolean | User$NotificationSubscriptionsArgs<ExtArgs>
    Comment?: boolean | User$CommentArgs<ExtArgs>
    Playlist?: boolean | User$PlaylistArgs<ExtArgs>
    UserPaymentMethod?: boolean | User$UserPaymentMethodArgs<ExtArgs>
    Album?: boolean | User$AlbumArgs<ExtArgs>
    SocialAccount?: boolean | User$SocialAccountArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lockedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | User$mediaArgs<ExtArgs>
    mediaReactions?: boolean | User$mediaReactionsArgs<ExtArgs>
    histories?: boolean | User$historiesArgs<ExtArgs>
    subscribers?: boolean | User$subscribersArgs<ExtArgs>
    channel?: boolean | User$channelArgs<ExtArgs>
    NotificationSubscriptions?: boolean | User$NotificationSubscriptionsArgs<ExtArgs>
    Comment?: boolean | User$CommentArgs<ExtArgs>
    Playlist?: boolean | User$PlaylistArgs<ExtArgs>
    UserPaymentMethod?: boolean | User$UserPaymentMethodArgs<ExtArgs>
    Album?: boolean | User$AlbumArgs<ExtArgs>
    SocialAccount?: boolean | User$SocialAccountArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>[]
      mediaReactions: Prisma.$MediaReactionPayload<ExtArgs>[]
      histories: Prisma.$HistoryPayload<ExtArgs>[]
      subscribers: Prisma.$SubscriberPayload<ExtArgs>[]
      channel: Prisma.$SubscriberPayload<ExtArgs>[]
      NotificationSubscriptions: Prisma.$NotificationSubscriptionsPayload<ExtArgs>[]
      Comment: Prisma.$CommentPayload<ExtArgs>[]
      Playlist: Prisma.$PlaylistPayload<ExtArgs>[]
      UserPaymentMethod: Prisma.$UserPaymentMethodPayload<ExtArgs>[]
      Album: Prisma.$AlbumPayload<ExtArgs>[]
      SocialAccount: Prisma.$SocialAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      username: string
      password: string
      avatar: string | null
      createdAt: Date
      updatedAt: Date
      lockedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends User$mediaArgs<ExtArgs> = {}>(args?: Subset<T, User$mediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findMany'> | Null>;

    mediaReactions<T extends User$mediaReactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$mediaReactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'findMany'> | Null>;

    histories<T extends User$historiesArgs<ExtArgs> = {}>(args?: Subset<T, User$historiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    subscribers<T extends User$subscribersArgs<ExtArgs> = {}>(args?: Subset<T, User$subscribersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'findMany'> | Null>;

    channel<T extends User$channelArgs<ExtArgs> = {}>(args?: Subset<T, User$channelArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'findMany'> | Null>;

    NotificationSubscriptions<T extends User$NotificationSubscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$NotificationSubscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    Comment<T extends User$CommentArgs<ExtArgs> = {}>(args?: Subset<T, User$CommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    Playlist<T extends User$PlaylistArgs<ExtArgs> = {}>(args?: Subset<T, User$PlaylistArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findMany'> | Null>;

    UserPaymentMethod<T extends User$UserPaymentMethodArgs<ExtArgs> = {}>(args?: Subset<T, User$UserPaymentMethodArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'findMany'> | Null>;

    Album<T extends User$AlbumArgs<ExtArgs> = {}>(args?: Subset<T, User$AlbumArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findMany'> | Null>;

    SocialAccount<T extends User$SocialAccountArgs<ExtArgs> = {}>(args?: Subset<T, User$SocialAccountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lockedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.media
   */
  export type User$mediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    where?: MediaWhereInput
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    cursor?: MediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }


  /**
   * User.mediaReactions
   */
  export type User$mediaReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    where?: MediaReactionWhereInput
    orderBy?: MediaReactionOrderByWithRelationInput | MediaReactionOrderByWithRelationInput[]
    cursor?: MediaReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaReactionScalarFieldEnum | MediaReactionScalarFieldEnum[]
  }


  /**
   * User.histories
   */
  export type User$historiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * User.subscribers
   */
  export type User$subscribersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    where?: SubscriberWhereInput
    orderBy?: SubscriberOrderByWithRelationInput | SubscriberOrderByWithRelationInput[]
    cursor?: SubscriberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriberScalarFieldEnum | SubscriberScalarFieldEnum[]
  }


  /**
   * User.channel
   */
  export type User$channelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    where?: SubscriberWhereInput
    orderBy?: SubscriberOrderByWithRelationInput | SubscriberOrderByWithRelationInput[]
    cursor?: SubscriberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriberScalarFieldEnum | SubscriberScalarFieldEnum[]
  }


  /**
   * User.NotificationSubscriptions
   */
  export type User$NotificationSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    where?: NotificationSubscriptionsWhereInput
    orderBy?: NotificationSubscriptionsOrderByWithRelationInput | NotificationSubscriptionsOrderByWithRelationInput[]
    cursor?: NotificationSubscriptionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationSubscriptionsScalarFieldEnum | NotificationSubscriptionsScalarFieldEnum[]
  }


  /**
   * User.Comment
   */
  export type User$CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * User.Playlist
   */
  export type User$PlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    cursor?: PlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * User.UserPaymentMethod
   */
  export type User$UserPaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    where?: UserPaymentMethodWhereInput
    orderBy?: UserPaymentMethodOrderByWithRelationInput | UserPaymentMethodOrderByWithRelationInput[]
    cursor?: UserPaymentMethodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPaymentMethodScalarFieldEnum | UserPaymentMethodScalarFieldEnum[]
  }


  /**
   * User.Album
   */
  export type User$AlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }


  /**
   * User.SocialAccount
   */
  export type User$SocialAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    where?: SocialAccountWhereInput
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    cursor?: SocialAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model UserPaymentMethod
   */

  export type AggregateUserPaymentMethod = {
    _count: UserPaymentMethodCountAggregateOutputType | null
    _avg: UserPaymentMethodAvgAggregateOutputType | null
    _sum: UserPaymentMethodSumAggregateOutputType | null
    _min: UserPaymentMethodMinAggregateOutputType | null
    _max: UserPaymentMethodMaxAggregateOutputType | null
  }

  export type UserPaymentMethodAvgAggregateOutputType = {
    id: number | null
  }

  export type UserPaymentMethodSumAggregateOutputType = {
    id: number | null
  }

  export type UserPaymentMethodMinAggregateOutputType = {
    id: number | null
    userId: string | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPaymentMethodMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserPaymentMethodCountAggregateOutputType = {
    id: number
    userId: number
    paymentMethod: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserPaymentMethodAvgAggregateInputType = {
    id?: true
  }

  export type UserPaymentMethodSumAggregateInputType = {
    id?: true
  }

  export type UserPaymentMethodMinAggregateInputType = {
    id?: true
    userId?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPaymentMethodMaxAggregateInputType = {
    id?: true
    userId?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserPaymentMethodCountAggregateInputType = {
    id?: true
    userId?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserPaymentMethodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPaymentMethod to aggregate.
     */
    where?: UserPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPaymentMethods to fetch.
     */
    orderBy?: UserPaymentMethodOrderByWithRelationInput | UserPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPaymentMethods
    **/
    _count?: true | UserPaymentMethodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPaymentMethodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPaymentMethodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPaymentMethodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPaymentMethodMaxAggregateInputType
  }

  export type GetUserPaymentMethodAggregateType<T extends UserPaymentMethodAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPaymentMethod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPaymentMethod[P]>
      : GetScalarType<T[P], AggregateUserPaymentMethod[P]>
  }




  export type UserPaymentMethodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPaymentMethodWhereInput
    orderBy?: UserPaymentMethodOrderByWithAggregationInput | UserPaymentMethodOrderByWithAggregationInput[]
    by: UserPaymentMethodScalarFieldEnum[] | UserPaymentMethodScalarFieldEnum
    having?: UserPaymentMethodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPaymentMethodCountAggregateInputType | true
    _avg?: UserPaymentMethodAvgAggregateInputType
    _sum?: UserPaymentMethodSumAggregateInputType
    _min?: UserPaymentMethodMinAggregateInputType
    _max?: UserPaymentMethodMaxAggregateInputType
  }

  export type UserPaymentMethodGroupByOutputType = {
    id: number
    userId: string
    paymentMethod: $Enums.PaymentMethod
    createdAt: Date
    updatedAt: Date
    _count: UserPaymentMethodCountAggregateOutputType | null
    _avg: UserPaymentMethodAvgAggregateOutputType | null
    _sum: UserPaymentMethodSumAggregateOutputType | null
    _min: UserPaymentMethodMinAggregateOutputType | null
    _max: UserPaymentMethodMaxAggregateOutputType | null
  }

  type GetUserPaymentMethodGroupByPayload<T extends UserPaymentMethodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPaymentMethodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPaymentMethodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPaymentMethodGroupByOutputType[P]>
            : GetScalarType<T[P], UserPaymentMethodGroupByOutputType[P]>
        }
      >
    >


  export type UserPaymentMethodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPaymentMethod"]>

  export type UserPaymentMethodSelectScalar = {
    id?: boolean
    userId?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserPaymentMethodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $UserPaymentMethodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPaymentMethod"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      paymentMethod: $Enums.PaymentMethod
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userPaymentMethod"]>
    composites: {}
  }


  type UserPaymentMethodGetPayload<S extends boolean | null | undefined | UserPaymentMethodDefaultArgs> = $Result.GetResult<Prisma.$UserPaymentMethodPayload, S>

  type UserPaymentMethodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPaymentMethodFindManyArgs, 'select' | 'include'> & {
      select?: UserPaymentMethodCountAggregateInputType | true
    }

  export interface UserPaymentMethodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPaymentMethod'], meta: { name: 'UserPaymentMethod' } }
    /**
     * Find zero or one UserPaymentMethod that matches the filter.
     * @param {UserPaymentMethodFindUniqueArgs} args - Arguments to find a UserPaymentMethod
     * @example
     * // Get one UserPaymentMethod
     * const userPaymentMethod = await prisma.userPaymentMethod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserPaymentMethodFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserPaymentMethodFindUniqueArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserPaymentMethod that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserPaymentMethodFindUniqueOrThrowArgs} args - Arguments to find a UserPaymentMethod
     * @example
     * // Get one UserPaymentMethod
     * const userPaymentMethod = await prisma.userPaymentMethod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserPaymentMethodFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPaymentMethodFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserPaymentMethod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentMethodFindFirstArgs} args - Arguments to find a UserPaymentMethod
     * @example
     * // Get one UserPaymentMethod
     * const userPaymentMethod = await prisma.userPaymentMethod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserPaymentMethodFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPaymentMethodFindFirstArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserPaymentMethod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentMethodFindFirstOrThrowArgs} args - Arguments to find a UserPaymentMethod
     * @example
     * // Get one UserPaymentMethod
     * const userPaymentMethod = await prisma.userPaymentMethod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserPaymentMethodFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPaymentMethodFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserPaymentMethods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentMethodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPaymentMethods
     * const userPaymentMethods = await prisma.userPaymentMethod.findMany()
     * 
     * // Get first 10 UserPaymentMethods
     * const userPaymentMethods = await prisma.userPaymentMethod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPaymentMethodWithIdOnly = await prisma.userPaymentMethod.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserPaymentMethodFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPaymentMethodFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserPaymentMethod.
     * @param {UserPaymentMethodCreateArgs} args - Arguments to create a UserPaymentMethod.
     * @example
     * // Create one UserPaymentMethod
     * const UserPaymentMethod = await prisma.userPaymentMethod.create({
     *   data: {
     *     // ... data to create a UserPaymentMethod
     *   }
     * })
     * 
    **/
    create<T extends UserPaymentMethodCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPaymentMethodCreateArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserPaymentMethods.
     *     @param {UserPaymentMethodCreateManyArgs} args - Arguments to create many UserPaymentMethods.
     *     @example
     *     // Create many UserPaymentMethods
     *     const userPaymentMethod = await prisma.userPaymentMethod.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserPaymentMethodCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPaymentMethodCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserPaymentMethod.
     * @param {UserPaymentMethodDeleteArgs} args - Arguments to delete one UserPaymentMethod.
     * @example
     * // Delete one UserPaymentMethod
     * const UserPaymentMethod = await prisma.userPaymentMethod.delete({
     *   where: {
     *     // ... filter to delete one UserPaymentMethod
     *   }
     * })
     * 
    **/
    delete<T extends UserPaymentMethodDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserPaymentMethodDeleteArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserPaymentMethod.
     * @param {UserPaymentMethodUpdateArgs} args - Arguments to update one UserPaymentMethod.
     * @example
     * // Update one UserPaymentMethod
     * const userPaymentMethod = await prisma.userPaymentMethod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserPaymentMethodUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPaymentMethodUpdateArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserPaymentMethods.
     * @param {UserPaymentMethodDeleteManyArgs} args - Arguments to filter UserPaymentMethods to delete.
     * @example
     * // Delete a few UserPaymentMethods
     * const { count } = await prisma.userPaymentMethod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserPaymentMethodDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPaymentMethodDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentMethodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPaymentMethods
     * const userPaymentMethod = await prisma.userPaymentMethod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserPaymentMethodUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserPaymentMethodUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPaymentMethod.
     * @param {UserPaymentMethodUpsertArgs} args - Arguments to update or create a UserPaymentMethod.
     * @example
     * // Update or create a UserPaymentMethod
     * const userPaymentMethod = await prisma.userPaymentMethod.upsert({
     *   create: {
     *     // ... data to create a UserPaymentMethod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPaymentMethod we want to update
     *   }
     * })
    **/
    upsert<T extends UserPaymentMethodUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserPaymentMethodUpsertArgs<ExtArgs>>
    ): Prisma__UserPaymentMethodClient<$Result.GetResult<Prisma.$UserPaymentMethodPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserPaymentMethods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentMethodCountArgs} args - Arguments to filter UserPaymentMethods to count.
     * @example
     * // Count the number of UserPaymentMethods
     * const count = await prisma.userPaymentMethod.count({
     *   where: {
     *     // ... the filter for the UserPaymentMethods we want to count
     *   }
     * })
    **/
    count<T extends UserPaymentMethodCountArgs>(
      args?: Subset<T, UserPaymentMethodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPaymentMethodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentMethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPaymentMethodAggregateArgs>(args: Subset<T, UserPaymentMethodAggregateArgs>): Prisma.PrismaPromise<GetUserPaymentMethodAggregateType<T>>

    /**
     * Group by UserPaymentMethod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPaymentMethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPaymentMethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPaymentMethodGroupByArgs['orderBy'] }
        : { orderBy?: UserPaymentMethodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPaymentMethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPaymentMethodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPaymentMethod model
   */
  readonly fields: UserPaymentMethodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPaymentMethod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPaymentMethodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserPaymentMethod model
   */ 
  interface UserPaymentMethodFieldRefs {
    readonly id: FieldRef<"UserPaymentMethod", 'Int'>
    readonly userId: FieldRef<"UserPaymentMethod", 'String'>
    readonly paymentMethod: FieldRef<"UserPaymentMethod", 'PaymentMethod'>
    readonly createdAt: FieldRef<"UserPaymentMethod", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPaymentMethod", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * UserPaymentMethod findUnique
   */
  export type UserPaymentMethodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which UserPaymentMethod to fetch.
     */
    where: UserPaymentMethodWhereUniqueInput
  }


  /**
   * UserPaymentMethod findUniqueOrThrow
   */
  export type UserPaymentMethodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which UserPaymentMethod to fetch.
     */
    where: UserPaymentMethodWhereUniqueInput
  }


  /**
   * UserPaymentMethod findFirst
   */
  export type UserPaymentMethodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which UserPaymentMethod to fetch.
     */
    where?: UserPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPaymentMethods to fetch.
     */
    orderBy?: UserPaymentMethodOrderByWithRelationInput | UserPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPaymentMethods.
     */
    cursor?: UserPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPaymentMethods.
     */
    distinct?: UserPaymentMethodScalarFieldEnum | UserPaymentMethodScalarFieldEnum[]
  }


  /**
   * UserPaymentMethod findFirstOrThrow
   */
  export type UserPaymentMethodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which UserPaymentMethod to fetch.
     */
    where?: UserPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPaymentMethods to fetch.
     */
    orderBy?: UserPaymentMethodOrderByWithRelationInput | UserPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPaymentMethods.
     */
    cursor?: UserPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPaymentMethods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPaymentMethods.
     */
    distinct?: UserPaymentMethodScalarFieldEnum | UserPaymentMethodScalarFieldEnum[]
  }


  /**
   * UserPaymentMethod findMany
   */
  export type UserPaymentMethodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter, which UserPaymentMethods to fetch.
     */
    where?: UserPaymentMethodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPaymentMethods to fetch.
     */
    orderBy?: UserPaymentMethodOrderByWithRelationInput | UserPaymentMethodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPaymentMethods.
     */
    cursor?: UserPaymentMethodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPaymentMethods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPaymentMethods.
     */
    skip?: number
    distinct?: UserPaymentMethodScalarFieldEnum | UserPaymentMethodScalarFieldEnum[]
  }


  /**
   * UserPaymentMethod create
   */
  export type UserPaymentMethodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPaymentMethod.
     */
    data: XOR<UserPaymentMethodCreateInput, UserPaymentMethodUncheckedCreateInput>
  }


  /**
   * UserPaymentMethod createMany
   */
  export type UserPaymentMethodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPaymentMethods.
     */
    data: UserPaymentMethodCreateManyInput | UserPaymentMethodCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserPaymentMethod update
   */
  export type UserPaymentMethodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPaymentMethod.
     */
    data: XOR<UserPaymentMethodUpdateInput, UserPaymentMethodUncheckedUpdateInput>
    /**
     * Choose, which UserPaymentMethod to update.
     */
    where: UserPaymentMethodWhereUniqueInput
  }


  /**
   * UserPaymentMethod updateMany
   */
  export type UserPaymentMethodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPaymentMethods.
     */
    data: XOR<UserPaymentMethodUpdateManyMutationInput, UserPaymentMethodUncheckedUpdateManyInput>
    /**
     * Filter which UserPaymentMethods to update
     */
    where?: UserPaymentMethodWhereInput
  }


  /**
   * UserPaymentMethod upsert
   */
  export type UserPaymentMethodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPaymentMethod to update in case it exists.
     */
    where: UserPaymentMethodWhereUniqueInput
    /**
     * In case the UserPaymentMethod found by the `where` argument doesn't exist, create a new UserPaymentMethod with this data.
     */
    create: XOR<UserPaymentMethodCreateInput, UserPaymentMethodUncheckedCreateInput>
    /**
     * In case the UserPaymentMethod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPaymentMethodUpdateInput, UserPaymentMethodUncheckedUpdateInput>
  }


  /**
   * UserPaymentMethod delete
   */
  export type UserPaymentMethodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
    /**
     * Filter which UserPaymentMethod to delete.
     */
    where: UserPaymentMethodWhereUniqueInput
  }


  /**
   * UserPaymentMethod deleteMany
   */
  export type UserPaymentMethodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPaymentMethods to delete
     */
    where?: UserPaymentMethodWhereInput
  }


  /**
   * UserPaymentMethod without action
   */
  export type UserPaymentMethodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPaymentMethod
     */
    select?: UserPaymentMethodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPaymentMethodInclude<ExtArgs> | null
  }



  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    categoryOnMedia?: boolean | Category$categoryOnMediaArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoryOnMedia?: boolean | Category$categoryOnMediaArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      categoryOnMedia: Prisma.$MediaOnCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categoryOnMedia<T extends Category$categoryOnMediaArgs<ExtArgs> = {}>(args?: Subset<T, Category$categoryOnMediaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }


  /**
   * Category.categoryOnMedia
   */
  export type Category$categoryOnMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    where?: MediaOnCategoryWhereInput
    orderBy?: MediaOnCategoryOrderByWithRelationInput | MediaOnCategoryOrderByWithRelationInput[]
    cursor?: MediaOnCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaOnCategoryScalarFieldEnum | MediaOnCategoryScalarFieldEnum[]
  }


  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoryInclude<ExtArgs> | null
  }



  /**
   * Model MediaOnCategory
   */

  export type AggregateMediaOnCategory = {
    _count: MediaOnCategoryCountAggregateOutputType | null
    _avg: MediaOnCategoryAvgAggregateOutputType | null
    _sum: MediaOnCategorySumAggregateOutputType | null
    _min: MediaOnCategoryMinAggregateOutputType | null
    _max: MediaOnCategoryMaxAggregateOutputType | null
  }

  export type MediaOnCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type MediaOnCategorySumAggregateOutputType = {
    id: number | null
  }

  export type MediaOnCategoryMinAggregateOutputType = {
    id: number | null
    categoryId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaOnCategoryMaxAggregateOutputType = {
    id: number | null
    categoryId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaOnCategoryCountAggregateOutputType = {
    id: number
    categoryId: number
    mediaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MediaOnCategoryAvgAggregateInputType = {
    id?: true
  }

  export type MediaOnCategorySumAggregateInputType = {
    id?: true
  }

  export type MediaOnCategoryMinAggregateInputType = {
    id?: true
    categoryId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaOnCategoryMaxAggregateInputType = {
    id?: true
    categoryId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaOnCategoryCountAggregateInputType = {
    id?: true
    categoryId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MediaOnCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaOnCategory to aggregate.
     */
    where?: MediaOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnCategories to fetch.
     */
    orderBy?: MediaOnCategoryOrderByWithRelationInput | MediaOnCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaOnCategories
    **/
    _count?: true | MediaOnCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaOnCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaOnCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaOnCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaOnCategoryMaxAggregateInputType
  }

  export type GetMediaOnCategoryAggregateType<T extends MediaOnCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaOnCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaOnCategory[P]>
      : GetScalarType<T[P], AggregateMediaOnCategory[P]>
  }




  export type MediaOnCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnCategoryWhereInput
    orderBy?: MediaOnCategoryOrderByWithAggregationInput | MediaOnCategoryOrderByWithAggregationInput[]
    by: MediaOnCategoryScalarFieldEnum[] | MediaOnCategoryScalarFieldEnum
    having?: MediaOnCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaOnCategoryCountAggregateInputType | true
    _avg?: MediaOnCategoryAvgAggregateInputType
    _sum?: MediaOnCategorySumAggregateInputType
    _min?: MediaOnCategoryMinAggregateInputType
    _max?: MediaOnCategoryMaxAggregateInputType
  }

  export type MediaOnCategoryGroupByOutputType = {
    id: number
    categoryId: string
    mediaId: string
    createdAt: Date
    updatedAt: Date
    _count: MediaOnCategoryCountAggregateOutputType | null
    _avg: MediaOnCategoryAvgAggregateOutputType | null
    _sum: MediaOnCategorySumAggregateOutputType | null
    _min: MediaOnCategoryMinAggregateOutputType | null
    _max: MediaOnCategoryMaxAggregateOutputType | null
  }

  type GetMediaOnCategoryGroupByPayload<T extends MediaOnCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaOnCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaOnCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaOnCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], MediaOnCategoryGroupByOutputType[P]>
        }
      >
    >


  export type MediaOnCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaOnCategory"]>

  export type MediaOnCategorySelectScalar = {
    id?: boolean
    categoryId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MediaOnCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $MediaOnCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaOnCategory"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: string
      mediaId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mediaOnCategory"]>
    composites: {}
  }


  type MediaOnCategoryGetPayload<S extends boolean | null | undefined | MediaOnCategoryDefaultArgs> = $Result.GetResult<Prisma.$MediaOnCategoryPayload, S>

  type MediaOnCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaOnCategoryFindManyArgs, 'select' | 'include'> & {
      select?: MediaOnCategoryCountAggregateInputType | true
    }

  export interface MediaOnCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaOnCategory'], meta: { name: 'MediaOnCategory' } }
    /**
     * Find zero or one MediaOnCategory that matches the filter.
     * @param {MediaOnCategoryFindUniqueArgs} args - Arguments to find a MediaOnCategory
     * @example
     * // Get one MediaOnCategory
     * const mediaOnCategory = await prisma.mediaOnCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MediaOnCategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnCategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MediaOnCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MediaOnCategoryFindUniqueOrThrowArgs} args - Arguments to find a MediaOnCategory
     * @example
     * // Get one MediaOnCategory
     * const mediaOnCategory = await prisma.mediaOnCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MediaOnCategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnCategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MediaOnCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnCategoryFindFirstArgs} args - Arguments to find a MediaOnCategory
     * @example
     * // Get one MediaOnCategory
     * const mediaOnCategory = await prisma.mediaOnCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MediaOnCategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnCategoryFindFirstArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MediaOnCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnCategoryFindFirstOrThrowArgs} args - Arguments to find a MediaOnCategory
     * @example
     * // Get one MediaOnCategory
     * const mediaOnCategory = await prisma.mediaOnCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MediaOnCategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnCategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MediaOnCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaOnCategories
     * const mediaOnCategories = await prisma.mediaOnCategory.findMany()
     * 
     * // Get first 10 MediaOnCategories
     * const mediaOnCategories = await prisma.mediaOnCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaOnCategoryWithIdOnly = await prisma.mediaOnCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MediaOnCategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnCategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MediaOnCategory.
     * @param {MediaOnCategoryCreateArgs} args - Arguments to create a MediaOnCategory.
     * @example
     * // Create one MediaOnCategory
     * const MediaOnCategory = await prisma.mediaOnCategory.create({
     *   data: {
     *     // ... data to create a MediaOnCategory
     *   }
     * })
     * 
    **/
    create<T extends MediaOnCategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnCategoryCreateArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MediaOnCategories.
     *     @param {MediaOnCategoryCreateManyArgs} args - Arguments to create many MediaOnCategories.
     *     @example
     *     // Create many MediaOnCategories
     *     const mediaOnCategory = await prisma.mediaOnCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MediaOnCategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnCategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MediaOnCategory.
     * @param {MediaOnCategoryDeleteArgs} args - Arguments to delete one MediaOnCategory.
     * @example
     * // Delete one MediaOnCategory
     * const MediaOnCategory = await prisma.mediaOnCategory.delete({
     *   where: {
     *     // ... filter to delete one MediaOnCategory
     *   }
     * })
     * 
    **/
    delete<T extends MediaOnCategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnCategoryDeleteArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MediaOnCategory.
     * @param {MediaOnCategoryUpdateArgs} args - Arguments to update one MediaOnCategory.
     * @example
     * // Update one MediaOnCategory
     * const mediaOnCategory = await prisma.mediaOnCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MediaOnCategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnCategoryUpdateArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MediaOnCategories.
     * @param {MediaOnCategoryDeleteManyArgs} args - Arguments to filter MediaOnCategories to delete.
     * @example
     * // Delete a few MediaOnCategories
     * const { count } = await prisma.mediaOnCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MediaOnCategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnCategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaOnCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaOnCategories
     * const mediaOnCategory = await prisma.mediaOnCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MediaOnCategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnCategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MediaOnCategory.
     * @param {MediaOnCategoryUpsertArgs} args - Arguments to update or create a MediaOnCategory.
     * @example
     * // Update or create a MediaOnCategory
     * const mediaOnCategory = await prisma.mediaOnCategory.upsert({
     *   create: {
     *     // ... data to create a MediaOnCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaOnCategory we want to update
     *   }
     * })
    **/
    upsert<T extends MediaOnCategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnCategoryUpsertArgs<ExtArgs>>
    ): Prisma__MediaOnCategoryClient<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MediaOnCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnCategoryCountArgs} args - Arguments to filter MediaOnCategories to count.
     * @example
     * // Count the number of MediaOnCategories
     * const count = await prisma.mediaOnCategory.count({
     *   where: {
     *     // ... the filter for the MediaOnCategories we want to count
     *   }
     * })
    **/
    count<T extends MediaOnCategoryCountArgs>(
      args?: Subset<T, MediaOnCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaOnCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaOnCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaOnCategoryAggregateArgs>(args: Subset<T, MediaOnCategoryAggregateArgs>): Prisma.PrismaPromise<GetMediaOnCategoryAggregateType<T>>

    /**
     * Group by MediaOnCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaOnCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaOnCategoryGroupByArgs['orderBy'] }
        : { orderBy?: MediaOnCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaOnCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaOnCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaOnCategory model
   */
  readonly fields: MediaOnCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaOnCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaOnCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MediaOnCategory model
   */ 
  interface MediaOnCategoryFieldRefs {
    readonly id: FieldRef<"MediaOnCategory", 'Int'>
    readonly categoryId: FieldRef<"MediaOnCategory", 'String'>
    readonly mediaId: FieldRef<"MediaOnCategory", 'String'>
    readonly createdAt: FieldRef<"MediaOnCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaOnCategory", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MediaOnCategory findUnique
   */
  export type MediaOnCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnCategory to fetch.
     */
    where: MediaOnCategoryWhereUniqueInput
  }


  /**
   * MediaOnCategory findUniqueOrThrow
   */
  export type MediaOnCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnCategory to fetch.
     */
    where: MediaOnCategoryWhereUniqueInput
  }


  /**
   * MediaOnCategory findFirst
   */
  export type MediaOnCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnCategory to fetch.
     */
    where?: MediaOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnCategories to fetch.
     */
    orderBy?: MediaOnCategoryOrderByWithRelationInput | MediaOnCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaOnCategories.
     */
    cursor?: MediaOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaOnCategories.
     */
    distinct?: MediaOnCategoryScalarFieldEnum | MediaOnCategoryScalarFieldEnum[]
  }


  /**
   * MediaOnCategory findFirstOrThrow
   */
  export type MediaOnCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnCategory to fetch.
     */
    where?: MediaOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnCategories to fetch.
     */
    orderBy?: MediaOnCategoryOrderByWithRelationInput | MediaOnCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaOnCategories.
     */
    cursor?: MediaOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaOnCategories.
     */
    distinct?: MediaOnCategoryScalarFieldEnum | MediaOnCategoryScalarFieldEnum[]
  }


  /**
   * MediaOnCategory findMany
   */
  export type MediaOnCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnCategories to fetch.
     */
    where?: MediaOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnCategories to fetch.
     */
    orderBy?: MediaOnCategoryOrderByWithRelationInput | MediaOnCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaOnCategories.
     */
    cursor?: MediaOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnCategories.
     */
    skip?: number
    distinct?: MediaOnCategoryScalarFieldEnum | MediaOnCategoryScalarFieldEnum[]
  }


  /**
   * MediaOnCategory create
   */
  export type MediaOnCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaOnCategory.
     */
    data: XOR<MediaOnCategoryCreateInput, MediaOnCategoryUncheckedCreateInput>
  }


  /**
   * MediaOnCategory createMany
   */
  export type MediaOnCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaOnCategories.
     */
    data: MediaOnCategoryCreateManyInput | MediaOnCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MediaOnCategory update
   */
  export type MediaOnCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaOnCategory.
     */
    data: XOR<MediaOnCategoryUpdateInput, MediaOnCategoryUncheckedUpdateInput>
    /**
     * Choose, which MediaOnCategory to update.
     */
    where: MediaOnCategoryWhereUniqueInput
  }


  /**
   * MediaOnCategory updateMany
   */
  export type MediaOnCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaOnCategories.
     */
    data: XOR<MediaOnCategoryUpdateManyMutationInput, MediaOnCategoryUncheckedUpdateManyInput>
    /**
     * Filter which MediaOnCategories to update
     */
    where?: MediaOnCategoryWhereInput
  }


  /**
   * MediaOnCategory upsert
   */
  export type MediaOnCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaOnCategory to update in case it exists.
     */
    where: MediaOnCategoryWhereUniqueInput
    /**
     * In case the MediaOnCategory found by the `where` argument doesn't exist, create a new MediaOnCategory with this data.
     */
    create: XOR<MediaOnCategoryCreateInput, MediaOnCategoryUncheckedCreateInput>
    /**
     * In case the MediaOnCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaOnCategoryUpdateInput, MediaOnCategoryUncheckedUpdateInput>
  }


  /**
   * MediaOnCategory delete
   */
  export type MediaOnCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    /**
     * Filter which MediaOnCategory to delete.
     */
    where: MediaOnCategoryWhereUniqueInput
  }


  /**
   * MediaOnCategory deleteMany
   */
  export type MediaOnCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaOnCategories to delete
     */
    where?: MediaOnCategoryWhereInput
  }


  /**
   * MediaOnCategory without action
   */
  export type MediaOnCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
  }



  /**
   * Model SessionUpload
   */

  export type AggregateSessionUpload = {
    _count: SessionUploadCountAggregateOutputType | null
    _min: SessionUploadMinAggregateOutputType | null
    _max: SessionUploadMaxAggregateOutputType | null
  }

  export type SessionUploadMinAggregateOutputType = {
    id: string | null
    sessionUploadUrl: string | null
    mediaId: string | null
    created_at: Date | null
    updated_at: Date | null
    expired_at: Date | null
  }

  export type SessionUploadMaxAggregateOutputType = {
    id: string | null
    sessionUploadUrl: string | null
    mediaId: string | null
    created_at: Date | null
    updated_at: Date | null
    expired_at: Date | null
  }

  export type SessionUploadCountAggregateOutputType = {
    id: number
    sessionUploadUrl: number
    mediaId: number
    created_at: number
    updated_at: number
    expired_at: number
    _all: number
  }


  export type SessionUploadMinAggregateInputType = {
    id?: true
    sessionUploadUrl?: true
    mediaId?: true
    created_at?: true
    updated_at?: true
    expired_at?: true
  }

  export type SessionUploadMaxAggregateInputType = {
    id?: true
    sessionUploadUrl?: true
    mediaId?: true
    created_at?: true
    updated_at?: true
    expired_at?: true
  }

  export type SessionUploadCountAggregateInputType = {
    id?: true
    sessionUploadUrl?: true
    mediaId?: true
    created_at?: true
    updated_at?: true
    expired_at?: true
    _all?: true
  }

  export type SessionUploadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionUpload to aggregate.
     */
    where?: SessionUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionUploads to fetch.
     */
    orderBy?: SessionUploadOrderByWithRelationInput | SessionUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionUploads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionUploads
    **/
    _count?: true | SessionUploadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionUploadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionUploadMaxAggregateInputType
  }

  export type GetSessionUploadAggregateType<T extends SessionUploadAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionUpload]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionUpload[P]>
      : GetScalarType<T[P], AggregateSessionUpload[P]>
  }




  export type SessionUploadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionUploadWhereInput
    orderBy?: SessionUploadOrderByWithAggregationInput | SessionUploadOrderByWithAggregationInput[]
    by: SessionUploadScalarFieldEnum[] | SessionUploadScalarFieldEnum
    having?: SessionUploadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionUploadCountAggregateInputType | true
    _min?: SessionUploadMinAggregateInputType
    _max?: SessionUploadMaxAggregateInputType
  }

  export type SessionUploadGroupByOutputType = {
    id: string
    sessionUploadUrl: string
    mediaId: string
    created_at: Date
    updated_at: Date
    expired_at: Date | null
    _count: SessionUploadCountAggregateOutputType | null
    _min: SessionUploadMinAggregateOutputType | null
    _max: SessionUploadMaxAggregateOutputType | null
  }

  type GetSessionUploadGroupByPayload<T extends SessionUploadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionUploadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionUploadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionUploadGroupByOutputType[P]>
            : GetScalarType<T[P], SessionUploadGroupByOutputType[P]>
        }
      >
    >


  export type SessionUploadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionUploadUrl?: boolean
    mediaId?: boolean
    created_at?: boolean
    updated_at?: boolean
    expired_at?: boolean
    Media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionUpload"]>

  export type SessionUploadSelectScalar = {
    id?: boolean
    sessionUploadUrl?: boolean
    mediaId?: boolean
    created_at?: boolean
    updated_at?: boolean
    expired_at?: boolean
  }

  export type SessionUploadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $SessionUploadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionUpload"
    objects: {
      Media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionUploadUrl: string
      mediaId: string
      created_at: Date
      updated_at: Date
      expired_at: Date | null
    }, ExtArgs["result"]["sessionUpload"]>
    composites: {}
  }


  type SessionUploadGetPayload<S extends boolean | null | undefined | SessionUploadDefaultArgs> = $Result.GetResult<Prisma.$SessionUploadPayload, S>

  type SessionUploadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionUploadFindManyArgs, 'select' | 'include'> & {
      select?: SessionUploadCountAggregateInputType | true
    }

  export interface SessionUploadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionUpload'], meta: { name: 'SessionUpload' } }
    /**
     * Find zero or one SessionUpload that matches the filter.
     * @param {SessionUploadFindUniqueArgs} args - Arguments to find a SessionUpload
     * @example
     * // Get one SessionUpload
     * const sessionUpload = await prisma.sessionUpload.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionUploadFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUploadFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SessionUpload that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionUploadFindUniqueOrThrowArgs} args - Arguments to find a SessionUpload
     * @example
     * // Get one SessionUpload
     * const sessionUpload = await prisma.sessionUpload.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionUploadFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionUploadFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SessionUpload that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUploadFindFirstArgs} args - Arguments to find a SessionUpload
     * @example
     * // Get one SessionUpload
     * const sessionUpload = await prisma.sessionUpload.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionUploadFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionUploadFindFirstArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SessionUpload that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUploadFindFirstOrThrowArgs} args - Arguments to find a SessionUpload
     * @example
     * // Get one SessionUpload
     * const sessionUpload = await prisma.sessionUpload.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionUploadFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionUploadFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SessionUploads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUploadFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionUploads
     * const sessionUploads = await prisma.sessionUpload.findMany()
     * 
     * // Get first 10 SessionUploads
     * const sessionUploads = await prisma.sessionUpload.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionUploadWithIdOnly = await prisma.sessionUpload.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionUploadFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionUploadFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SessionUpload.
     * @param {SessionUploadCreateArgs} args - Arguments to create a SessionUpload.
     * @example
     * // Create one SessionUpload
     * const SessionUpload = await prisma.sessionUpload.create({
     *   data: {
     *     // ... data to create a SessionUpload
     *   }
     * })
     * 
    **/
    create<T extends SessionUploadCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUploadCreateArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SessionUploads.
     *     @param {SessionUploadCreateManyArgs} args - Arguments to create many SessionUploads.
     *     @example
     *     // Create many SessionUploads
     *     const sessionUpload = await prisma.sessionUpload.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionUploadCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionUploadCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SessionUpload.
     * @param {SessionUploadDeleteArgs} args - Arguments to delete one SessionUpload.
     * @example
     * // Delete one SessionUpload
     * const SessionUpload = await prisma.sessionUpload.delete({
     *   where: {
     *     // ... filter to delete one SessionUpload
     *   }
     * })
     * 
    **/
    delete<T extends SessionUploadDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUploadDeleteArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SessionUpload.
     * @param {SessionUploadUpdateArgs} args - Arguments to update one SessionUpload.
     * @example
     * // Update one SessionUpload
     * const sessionUpload = await prisma.sessionUpload.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUploadUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUploadUpdateArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SessionUploads.
     * @param {SessionUploadDeleteManyArgs} args - Arguments to filter SessionUploads to delete.
     * @example
     * // Delete a few SessionUploads
     * const { count } = await prisma.sessionUpload.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionUploadDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionUploadDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionUploads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUploadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionUploads
     * const sessionUpload = await prisma.sessionUpload.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUploadUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUploadUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionUpload.
     * @param {SessionUploadUpsertArgs} args - Arguments to update or create a SessionUpload.
     * @example
     * // Update or create a SessionUpload
     * const sessionUpload = await prisma.sessionUpload.upsert({
     *   create: {
     *     // ... data to create a SessionUpload
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionUpload we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUploadUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUploadUpsertArgs<ExtArgs>>
    ): Prisma__SessionUploadClient<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SessionUploads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUploadCountArgs} args - Arguments to filter SessionUploads to count.
     * @example
     * // Count the number of SessionUploads
     * const count = await prisma.sessionUpload.count({
     *   where: {
     *     // ... the filter for the SessionUploads we want to count
     *   }
     * })
    **/
    count<T extends SessionUploadCountArgs>(
      args?: Subset<T, SessionUploadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionUploadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionUpload.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUploadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionUploadAggregateArgs>(args: Subset<T, SessionUploadAggregateArgs>): Prisma.PrismaPromise<GetSessionUploadAggregateType<T>>

    /**
     * Group by SessionUpload.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUploadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionUploadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionUploadGroupByArgs['orderBy'] }
        : { orderBy?: SessionUploadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionUploadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionUploadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionUpload model
   */
  readonly fields: SessionUploadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionUpload.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionUploadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SessionUpload model
   */ 
  interface SessionUploadFieldRefs {
    readonly id: FieldRef<"SessionUpload", 'String'>
    readonly sessionUploadUrl: FieldRef<"SessionUpload", 'String'>
    readonly mediaId: FieldRef<"SessionUpload", 'String'>
    readonly created_at: FieldRef<"SessionUpload", 'DateTime'>
    readonly updated_at: FieldRef<"SessionUpload", 'DateTime'>
    readonly expired_at: FieldRef<"SessionUpload", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * SessionUpload findUnique
   */
  export type SessionUploadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * Filter, which SessionUpload to fetch.
     */
    where: SessionUploadWhereUniqueInput
  }


  /**
   * SessionUpload findUniqueOrThrow
   */
  export type SessionUploadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * Filter, which SessionUpload to fetch.
     */
    where: SessionUploadWhereUniqueInput
  }


  /**
   * SessionUpload findFirst
   */
  export type SessionUploadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * Filter, which SessionUpload to fetch.
     */
    where?: SessionUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionUploads to fetch.
     */
    orderBy?: SessionUploadOrderByWithRelationInput | SessionUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionUploads.
     */
    cursor?: SessionUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionUploads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionUploads.
     */
    distinct?: SessionUploadScalarFieldEnum | SessionUploadScalarFieldEnum[]
  }


  /**
   * SessionUpload findFirstOrThrow
   */
  export type SessionUploadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * Filter, which SessionUpload to fetch.
     */
    where?: SessionUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionUploads to fetch.
     */
    orderBy?: SessionUploadOrderByWithRelationInput | SessionUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionUploads.
     */
    cursor?: SessionUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionUploads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionUploads.
     */
    distinct?: SessionUploadScalarFieldEnum | SessionUploadScalarFieldEnum[]
  }


  /**
   * SessionUpload findMany
   */
  export type SessionUploadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * Filter, which SessionUploads to fetch.
     */
    where?: SessionUploadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionUploads to fetch.
     */
    orderBy?: SessionUploadOrderByWithRelationInput | SessionUploadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionUploads.
     */
    cursor?: SessionUploadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionUploads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionUploads.
     */
    skip?: number
    distinct?: SessionUploadScalarFieldEnum | SessionUploadScalarFieldEnum[]
  }


  /**
   * SessionUpload create
   */
  export type SessionUploadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionUpload.
     */
    data: XOR<SessionUploadCreateInput, SessionUploadUncheckedCreateInput>
  }


  /**
   * SessionUpload createMany
   */
  export type SessionUploadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionUploads.
     */
    data: SessionUploadCreateManyInput | SessionUploadCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SessionUpload update
   */
  export type SessionUploadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionUpload.
     */
    data: XOR<SessionUploadUpdateInput, SessionUploadUncheckedUpdateInput>
    /**
     * Choose, which SessionUpload to update.
     */
    where: SessionUploadWhereUniqueInput
  }


  /**
   * SessionUpload updateMany
   */
  export type SessionUploadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionUploads.
     */
    data: XOR<SessionUploadUpdateManyMutationInput, SessionUploadUncheckedUpdateManyInput>
    /**
     * Filter which SessionUploads to update
     */
    where?: SessionUploadWhereInput
  }


  /**
   * SessionUpload upsert
   */
  export type SessionUploadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionUpload to update in case it exists.
     */
    where: SessionUploadWhereUniqueInput
    /**
     * In case the SessionUpload found by the `where` argument doesn't exist, create a new SessionUpload with this data.
     */
    create: XOR<SessionUploadCreateInput, SessionUploadUncheckedCreateInput>
    /**
     * In case the SessionUpload was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUploadUpdateInput, SessionUploadUncheckedUpdateInput>
  }


  /**
   * SessionUpload delete
   */
  export type SessionUploadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    /**
     * Filter which SessionUpload to delete.
     */
    where: SessionUploadWhereUniqueInput
  }


  /**
   * SessionUpload deleteMany
   */
  export type SessionUploadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionUploads to delete
     */
    where?: SessionUploadWhereInput
  }


  /**
   * SessionUpload without action
   */
  export type SessionUploadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
  }



  /**
   * Model Media
   */

  export type AggregateMedia = {
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  export type MediaAvgAggregateOutputType = {
    views: number | null
    duration: number | null
    plays: number | null
  }

  export type MediaSumAggregateOutputType = {
    views: number | null
    duration: number | null
    plays: number | null
  }

  export type MediaMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    views: number | null
    duration: number | null
    plays: number | null
    status: $Enums.StatusResource | null
    viewMode: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
    lockedAt: Date | null
    publishedAt: Date | null
  }

  export type MediaMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    views: number | null
    duration: number | null
    plays: number | null
    status: $Enums.StatusResource | null
    viewMode: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
    lockedAt: Date | null
    publishedAt: Date | null
  }

  export type MediaCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    views: number
    duration: number
    plays: number
    status: number
    viewMode: number
    createdAt: number
    updatedAt: number
    lockedAt: number
    publishedAt: number
    _all: number
  }


  export type MediaAvgAggregateInputType = {
    views?: true
    duration?: true
    plays?: true
  }

  export type MediaSumAggregateInputType = {
    views?: true
    duration?: true
    plays?: true
  }

  export type MediaMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    views?: true
    duration?: true
    plays?: true
    status?: true
    viewMode?: true
    createdAt?: true
    updatedAt?: true
    lockedAt?: true
    publishedAt?: true
  }

  export type MediaMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    views?: true
    duration?: true
    plays?: true
    status?: true
    viewMode?: true
    createdAt?: true
    updatedAt?: true
    lockedAt?: true
    publishedAt?: true
  }

  export type MediaCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    views?: true
    duration?: true
    plays?: true
    status?: true
    viewMode?: true
    createdAt?: true
    updatedAt?: true
    lockedAt?: true
    publishedAt?: true
    _all?: true
  }

  export type MediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to aggregate.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Media
    **/
    _count?: true | MediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaMaxAggregateInputType
  }

  export type GetMediaAggregateType<T extends MediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedia[P]>
      : GetScalarType<T[P], AggregateMedia[P]>
  }




  export type MediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaWhereInput
    orderBy?: MediaOrderByWithAggregationInput | MediaOrderByWithAggregationInput[]
    by: MediaScalarFieldEnum[] | MediaScalarFieldEnum
    having?: MediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaCountAggregateInputType | true
    _avg?: MediaAvgAggregateInputType
    _sum?: MediaSumAggregateInputType
    _min?: MediaMinAggregateInputType
    _max?: MediaMaxAggregateInputType
  }

  export type MediaGroupByOutputType = {
    id: string
    userId: string
    title: string
    views: number
    duration: number
    plays: number
    status: $Enums.StatusResource
    viewMode: $Enums.Status
    createdAt: Date
    updatedAt: Date
    lockedAt: Date | null
    publishedAt: Date | null
    _count: MediaCountAggregateOutputType | null
    _avg: MediaAvgAggregateOutputType | null
    _sum: MediaSumAggregateOutputType | null
    _min: MediaMinAggregateOutputType | null
    _max: MediaMaxAggregateOutputType | null
  }

  type GetMediaGroupByPayload<T extends MediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaGroupByOutputType[P]>
            : GetScalarType<T[P], MediaGroupByOutputType[P]>
        }
      >
    >


  export type MediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    views?: boolean
    duration?: boolean
    plays?: boolean
    status?: boolean
    viewMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lockedAt?: boolean
    publishedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    thumbnails?: boolean | Media$thumbnailsArgs<ExtArgs>
    detail?: boolean | Media$detailArgs<ExtArgs>
    videoResources?: boolean | Media$videoResourcesArgs<ExtArgs>
    audioResources?: boolean | Media$audioResourcesArgs<ExtArgs>
    mediaReaction?: boolean | Media$mediaReactionArgs<ExtArgs>
    history?: boolean | Media$historyArgs<ExtArgs>
    mediaOnCategory?: boolean | Media$mediaOnCategoryArgs<ExtArgs>
    comment?: boolean | Media$commentArgs<ExtArgs>
    mediaOnPlaylist?: boolean | Media$mediaOnPlaylistArgs<ExtArgs>
    sessionUpload?: boolean | Media$sessionUploadArgs<ExtArgs>
    mediaOnAlbum?: boolean | Media$mediaOnAlbumArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["media"]>

  export type MediaSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    views?: boolean
    duration?: boolean
    plays?: boolean
    status?: boolean
    viewMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lockedAt?: boolean
    publishedAt?: boolean
  }

  export type MediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    thumbnails?: boolean | Media$thumbnailsArgs<ExtArgs>
    detail?: boolean | Media$detailArgs<ExtArgs>
    videoResources?: boolean | Media$videoResourcesArgs<ExtArgs>
    audioResources?: boolean | Media$audioResourcesArgs<ExtArgs>
    mediaReaction?: boolean | Media$mediaReactionArgs<ExtArgs>
    history?: boolean | Media$historyArgs<ExtArgs>
    mediaOnCategory?: boolean | Media$mediaOnCategoryArgs<ExtArgs>
    comment?: boolean | Media$commentArgs<ExtArgs>
    mediaOnPlaylist?: boolean | Media$mediaOnPlaylistArgs<ExtArgs>
    sessionUpload?: boolean | Media$sessionUploadArgs<ExtArgs>
    mediaOnAlbum?: boolean | Media$mediaOnAlbumArgs<ExtArgs>
    _count?: boolean | MediaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Media"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      thumbnails: Prisma.$ThumbnailPayload<ExtArgs>[]
      detail: Prisma.$MediaDetailPayload<ExtArgs> | null
      videoResources: Prisma.$VideoResourcePayload<ExtArgs>[]
      audioResources: Prisma.$AudioResourcePayload<ExtArgs>[]
      mediaReaction: Prisma.$MediaReactionPayload<ExtArgs>[]
      history: Prisma.$HistoryPayload<ExtArgs>[]
      mediaOnCategory: Prisma.$MediaOnCategoryPayload<ExtArgs>[]
      comment: Prisma.$CommentPayload<ExtArgs>[]
      mediaOnPlaylist: Prisma.$MediaOnPlaylistPayload<ExtArgs>[]
      sessionUpload: Prisma.$SessionUploadPayload<ExtArgs>[]
      mediaOnAlbum: Prisma.$MediaOnAlbumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      views: number
      duration: number
      plays: number
      status: $Enums.StatusResource
      viewMode: $Enums.Status
      createdAt: Date
      updatedAt: Date
      lockedAt: Date | null
      publishedAt: Date | null
    }, ExtArgs["result"]["media"]>
    composites: {}
  }


  type MediaGetPayload<S extends boolean | null | undefined | MediaDefaultArgs> = $Result.GetResult<Prisma.$MediaPayload, S>

  type MediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaFindManyArgs, 'select' | 'include'> & {
      select?: MediaCountAggregateInputType | true
    }

  export interface MediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Media'], meta: { name: 'Media' } }
    /**
     * Find zero or one Media that matches the filter.
     * @param {MediaFindUniqueArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MediaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MediaFindUniqueArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Media that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MediaFindUniqueOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MediaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MediaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindFirstArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Media that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindFirstOrThrowArgs} args - Arguments to find a Media
     * @example
     * // Get one Media
     * const media = await prisma.media.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MediaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Media that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Media
     * const media = await prisma.media.findMany()
     * 
     * // Get first 10 Media
     * const media = await prisma.media.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaWithIdOnly = await prisma.media.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MediaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Media.
     * @param {MediaCreateArgs} args - Arguments to create a Media.
     * @example
     * // Create one Media
     * const Media = await prisma.media.create({
     *   data: {
     *     // ... data to create a Media
     *   }
     * })
     * 
    **/
    create<T extends MediaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaCreateArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Media.
     *     @param {MediaCreateManyArgs} args - Arguments to create many Media.
     *     @example
     *     // Create many Media
     *     const media = await prisma.media.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MediaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Media.
     * @param {MediaDeleteArgs} args - Arguments to delete one Media.
     * @example
     * // Delete one Media
     * const Media = await prisma.media.delete({
     *   where: {
     *     // ... filter to delete one Media
     *   }
     * })
     * 
    **/
    delete<T extends MediaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDeleteArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Media.
     * @param {MediaUpdateArgs} args - Arguments to update one Media.
     * @example
     * // Update one Media
     * const media = await prisma.media.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MediaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaUpdateArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Media.
     * @param {MediaDeleteManyArgs} args - Arguments to filter Media to delete.
     * @example
     * // Delete a few Media
     * const { count } = await prisma.media.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MediaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Media
     * const media = await prisma.media.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MediaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MediaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Media.
     * @param {MediaUpsertArgs} args - Arguments to update or create a Media.
     * @example
     * // Update or create a Media
     * const media = await prisma.media.upsert({
     *   create: {
     *     // ... data to create a Media
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Media we want to update
     *   }
     * })
    **/
    upsert<T extends MediaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MediaUpsertArgs<ExtArgs>>
    ): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaCountArgs} args - Arguments to filter Media to count.
     * @example
     * // Count the number of Media
     * const count = await prisma.media.count({
     *   where: {
     *     // ... the filter for the Media we want to count
     *   }
     * })
    **/
    count<T extends MediaCountArgs>(
      args?: Subset<T, MediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaAggregateArgs>(args: Subset<T, MediaAggregateArgs>): Prisma.PrismaPromise<GetMediaAggregateType<T>>

    /**
     * Group by Media.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaGroupByArgs['orderBy'] }
        : { orderBy?: MediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Media model
   */
  readonly fields: MediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Media.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    thumbnails<T extends Media$thumbnailsArgs<ExtArgs> = {}>(args?: Subset<T, Media$thumbnailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'findMany'> | Null>;

    detail<T extends Media$detailArgs<ExtArgs> = {}>(args?: Subset<T, Media$detailArgs<ExtArgs>>): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    videoResources<T extends Media$videoResourcesArgs<ExtArgs> = {}>(args?: Subset<T, Media$videoResourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'findMany'> | Null>;

    audioResources<T extends Media$audioResourcesArgs<ExtArgs> = {}>(args?: Subset<T, Media$audioResourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'findMany'> | Null>;

    mediaReaction<T extends Media$mediaReactionArgs<ExtArgs> = {}>(args?: Subset<T, Media$mediaReactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'findMany'> | Null>;

    history<T extends Media$historyArgs<ExtArgs> = {}>(args?: Subset<T, Media$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    mediaOnCategory<T extends Media$mediaOnCategoryArgs<ExtArgs> = {}>(args?: Subset<T, Media$mediaOnCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnCategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    comment<T extends Media$commentArgs<ExtArgs> = {}>(args?: Subset<T, Media$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    mediaOnPlaylist<T extends Media$mediaOnPlaylistArgs<ExtArgs> = {}>(args?: Subset<T, Media$mediaOnPlaylistArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'findMany'> | Null>;

    sessionUpload<T extends Media$sessionUploadArgs<ExtArgs> = {}>(args?: Subset<T, Media$sessionUploadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionUploadPayload<ExtArgs>, T, 'findMany'> | Null>;

    mediaOnAlbum<T extends Media$mediaOnAlbumArgs<ExtArgs> = {}>(args?: Subset<T, Media$mediaOnAlbumArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Media model
   */ 
  interface MediaFieldRefs {
    readonly id: FieldRef<"Media", 'String'>
    readonly userId: FieldRef<"Media", 'String'>
    readonly title: FieldRef<"Media", 'String'>
    readonly views: FieldRef<"Media", 'Int'>
    readonly duration: FieldRef<"Media", 'Float'>
    readonly plays: FieldRef<"Media", 'Int'>
    readonly status: FieldRef<"Media", 'StatusResource'>
    readonly viewMode: FieldRef<"Media", 'Status'>
    readonly createdAt: FieldRef<"Media", 'DateTime'>
    readonly updatedAt: FieldRef<"Media", 'DateTime'>
    readonly lockedAt: FieldRef<"Media", 'DateTime'>
    readonly publishedAt: FieldRef<"Media", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Media findUnique
   */
  export type MediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media findUniqueOrThrow
   */
  export type MediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media findFirst
   */
  export type MediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }


  /**
   * Media findFirstOrThrow
   */
  export type MediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Media.
     */
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }


  /**
   * Media findMany
   */
  export type MediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter, which Media to fetch.
     */
    where?: MediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Media to fetch.
     */
    orderBy?: MediaOrderByWithRelationInput | MediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Media.
     */
    cursor?: MediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Media from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Media.
     */
    skip?: number
    distinct?: MediaScalarFieldEnum | MediaScalarFieldEnum[]
  }


  /**
   * Media create
   */
  export type MediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The data needed to create a Media.
     */
    data: XOR<MediaCreateInput, MediaUncheckedCreateInput>
  }


  /**
   * Media createMany
   */
  export type MediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Media.
     */
    data: MediaCreateManyInput | MediaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Media update
   */
  export type MediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The data needed to update a Media.
     */
    data: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
    /**
     * Choose, which Media to update.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media updateMany
   */
  export type MediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Media.
     */
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyInput>
    /**
     * Filter which Media to update
     */
    where?: MediaWhereInput
  }


  /**
   * Media upsert
   */
  export type MediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * The filter to search for the Media to update in case it exists.
     */
    where: MediaWhereUniqueInput
    /**
     * In case the Media found by the `where` argument doesn't exist, create a new Media with this data.
     */
    create: XOR<MediaCreateInput, MediaUncheckedCreateInput>
    /**
     * In case the Media was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaUpdateInput, MediaUncheckedUpdateInput>
  }


  /**
   * Media delete
   */
  export type MediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
    /**
     * Filter which Media to delete.
     */
    where: MediaWhereUniqueInput
  }


  /**
   * Media deleteMany
   */
  export type MediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Media to delete
     */
    where?: MediaWhereInput
  }


  /**
   * Media.thumbnails
   */
  export type Media$thumbnailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    where?: ThumbnailWhereInput
    orderBy?: ThumbnailOrderByWithRelationInput | ThumbnailOrderByWithRelationInput[]
    cursor?: ThumbnailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThumbnailScalarFieldEnum | ThumbnailScalarFieldEnum[]
  }


  /**
   * Media.detail
   */
  export type Media$detailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    where?: MediaDetailWhereInput
  }


  /**
   * Media.videoResources
   */
  export type Media$videoResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    where?: VideoResourceWhereInput
    orderBy?: VideoResourceOrderByWithRelationInput | VideoResourceOrderByWithRelationInput[]
    cursor?: VideoResourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoResourceScalarFieldEnum | VideoResourceScalarFieldEnum[]
  }


  /**
   * Media.audioResources
   */
  export type Media$audioResourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    where?: AudioResourceWhereInput
    orderBy?: AudioResourceOrderByWithRelationInput | AudioResourceOrderByWithRelationInput[]
    cursor?: AudioResourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AudioResourceScalarFieldEnum | AudioResourceScalarFieldEnum[]
  }


  /**
   * Media.mediaReaction
   */
  export type Media$mediaReactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    where?: MediaReactionWhereInput
    orderBy?: MediaReactionOrderByWithRelationInput | MediaReactionOrderByWithRelationInput[]
    cursor?: MediaReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaReactionScalarFieldEnum | MediaReactionScalarFieldEnum[]
  }


  /**
   * Media.history
   */
  export type Media$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    cursor?: HistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * Media.mediaOnCategory
   */
  export type Media$mediaOnCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnCategory
     */
    select?: MediaOnCategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnCategoryInclude<ExtArgs> | null
    where?: MediaOnCategoryWhereInput
    orderBy?: MediaOnCategoryOrderByWithRelationInput | MediaOnCategoryOrderByWithRelationInput[]
    cursor?: MediaOnCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaOnCategoryScalarFieldEnum | MediaOnCategoryScalarFieldEnum[]
  }


  /**
   * Media.comment
   */
  export type Media$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Media.mediaOnPlaylist
   */
  export type Media$mediaOnPlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    where?: MediaOnPlaylistWhereInput
    orderBy?: MediaOnPlaylistOrderByWithRelationInput | MediaOnPlaylistOrderByWithRelationInput[]
    cursor?: MediaOnPlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaOnPlaylistScalarFieldEnum | MediaOnPlaylistScalarFieldEnum[]
  }


  /**
   * Media.sessionUpload
   */
  export type Media$sessionUploadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionUpload
     */
    select?: SessionUploadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionUploadInclude<ExtArgs> | null
    where?: SessionUploadWhereInput
    orderBy?: SessionUploadOrderByWithRelationInput | SessionUploadOrderByWithRelationInput[]
    cursor?: SessionUploadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionUploadScalarFieldEnum | SessionUploadScalarFieldEnum[]
  }


  /**
   * Media.mediaOnAlbum
   */
  export type Media$mediaOnAlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    where?: MediaOnAlbumWhereInput
    orderBy?: MediaOnAlbumOrderByWithRelationInput | MediaOnAlbumOrderByWithRelationInput[]
    cursor?: MediaOnAlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaOnAlbumScalarFieldEnum | MediaOnAlbumScalarFieldEnum[]
  }


  /**
   * Media without action
   */
  export type MediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Media
     */
    select?: MediaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaInclude<ExtArgs> | null
  }



  /**
   * Model MediaReaction
   */

  export type AggregateMediaReaction = {
    _count: MediaReactionCountAggregateOutputType | null
    _min: MediaReactionMinAggregateOutputType | null
    _max: MediaReactionMaxAggregateOutputType | null
  }

  export type MediaReactionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    mediaId: string | null
    isLike: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaReactionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    mediaId: string | null
    isLike: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaReactionCountAggregateOutputType = {
    id: number
    userId: number
    mediaId: number
    isLike: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MediaReactionMinAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    isLike?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaReactionMaxAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    isLike?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaReactionCountAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    isLike?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MediaReactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaReaction to aggregate.
     */
    where?: MediaReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaReactions to fetch.
     */
    orderBy?: MediaReactionOrderByWithRelationInput | MediaReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaReactions
    **/
    _count?: true | MediaReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaReactionMaxAggregateInputType
  }

  export type GetMediaReactionAggregateType<T extends MediaReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaReaction[P]>
      : GetScalarType<T[P], AggregateMediaReaction[P]>
  }




  export type MediaReactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaReactionWhereInput
    orderBy?: MediaReactionOrderByWithAggregationInput | MediaReactionOrderByWithAggregationInput[]
    by: MediaReactionScalarFieldEnum[] | MediaReactionScalarFieldEnum
    having?: MediaReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaReactionCountAggregateInputType | true
    _min?: MediaReactionMinAggregateInputType
    _max?: MediaReactionMaxAggregateInputType
  }

  export type MediaReactionGroupByOutputType = {
    id: string
    userId: string
    mediaId: string
    isLike: boolean
    createdAt: Date
    updatedAt: Date
    _count: MediaReactionCountAggregateOutputType | null
    _min: MediaReactionMinAggregateOutputType | null
    _max: MediaReactionMaxAggregateOutputType | null
  }

  type GetMediaReactionGroupByPayload<T extends MediaReactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaReactionGroupByOutputType[P]>
            : GetScalarType<T[P], MediaReactionGroupByOutputType[P]>
        }
      >
    >


  export type MediaReactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mediaId?: boolean
    isLike?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaReaction"]>

  export type MediaReactionSelectScalar = {
    id?: boolean
    userId?: boolean
    mediaId?: boolean
    isLike?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MediaReactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $MediaReactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaReaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      mediaId: string
      isLike: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mediaReaction"]>
    composites: {}
  }


  type MediaReactionGetPayload<S extends boolean | null | undefined | MediaReactionDefaultArgs> = $Result.GetResult<Prisma.$MediaReactionPayload, S>

  type MediaReactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaReactionFindManyArgs, 'select' | 'include'> & {
      select?: MediaReactionCountAggregateInputType | true
    }

  export interface MediaReactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaReaction'], meta: { name: 'MediaReaction' } }
    /**
     * Find zero or one MediaReaction that matches the filter.
     * @param {MediaReactionFindUniqueArgs} args - Arguments to find a MediaReaction
     * @example
     * // Get one MediaReaction
     * const mediaReaction = await prisma.mediaReaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MediaReactionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MediaReactionFindUniqueArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MediaReaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MediaReactionFindUniqueOrThrowArgs} args - Arguments to find a MediaReaction
     * @example
     * // Get one MediaReaction
     * const mediaReaction = await prisma.mediaReaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MediaReactionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaReactionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MediaReaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaReactionFindFirstArgs} args - Arguments to find a MediaReaction
     * @example
     * // Get one MediaReaction
     * const mediaReaction = await prisma.mediaReaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MediaReactionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaReactionFindFirstArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MediaReaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaReactionFindFirstOrThrowArgs} args - Arguments to find a MediaReaction
     * @example
     * // Get one MediaReaction
     * const mediaReaction = await prisma.mediaReaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MediaReactionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaReactionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MediaReactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaReactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaReactions
     * const mediaReactions = await prisma.mediaReaction.findMany()
     * 
     * // Get first 10 MediaReactions
     * const mediaReactions = await prisma.mediaReaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaReactionWithIdOnly = await prisma.mediaReaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MediaReactionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaReactionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MediaReaction.
     * @param {MediaReactionCreateArgs} args - Arguments to create a MediaReaction.
     * @example
     * // Create one MediaReaction
     * const MediaReaction = await prisma.mediaReaction.create({
     *   data: {
     *     // ... data to create a MediaReaction
     *   }
     * })
     * 
    **/
    create<T extends MediaReactionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaReactionCreateArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MediaReactions.
     *     @param {MediaReactionCreateManyArgs} args - Arguments to create many MediaReactions.
     *     @example
     *     // Create many MediaReactions
     *     const mediaReaction = await prisma.mediaReaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MediaReactionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaReactionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MediaReaction.
     * @param {MediaReactionDeleteArgs} args - Arguments to delete one MediaReaction.
     * @example
     * // Delete one MediaReaction
     * const MediaReaction = await prisma.mediaReaction.delete({
     *   where: {
     *     // ... filter to delete one MediaReaction
     *   }
     * })
     * 
    **/
    delete<T extends MediaReactionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MediaReactionDeleteArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MediaReaction.
     * @param {MediaReactionUpdateArgs} args - Arguments to update one MediaReaction.
     * @example
     * // Update one MediaReaction
     * const mediaReaction = await prisma.mediaReaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MediaReactionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaReactionUpdateArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MediaReactions.
     * @param {MediaReactionDeleteManyArgs} args - Arguments to filter MediaReactions to delete.
     * @example
     * // Delete a few MediaReactions
     * const { count } = await prisma.mediaReaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MediaReactionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaReactionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaReactions
     * const mediaReaction = await prisma.mediaReaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MediaReactionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MediaReactionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MediaReaction.
     * @param {MediaReactionUpsertArgs} args - Arguments to update or create a MediaReaction.
     * @example
     * // Update or create a MediaReaction
     * const mediaReaction = await prisma.mediaReaction.upsert({
     *   create: {
     *     // ... data to create a MediaReaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaReaction we want to update
     *   }
     * })
    **/
    upsert<T extends MediaReactionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MediaReactionUpsertArgs<ExtArgs>>
    ): Prisma__MediaReactionClient<$Result.GetResult<Prisma.$MediaReactionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MediaReactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaReactionCountArgs} args - Arguments to filter MediaReactions to count.
     * @example
     * // Count the number of MediaReactions
     * const count = await prisma.mediaReaction.count({
     *   where: {
     *     // ... the filter for the MediaReactions we want to count
     *   }
     * })
    **/
    count<T extends MediaReactionCountArgs>(
      args?: Subset<T, MediaReactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaReactionAggregateArgs>(args: Subset<T, MediaReactionAggregateArgs>): Prisma.PrismaPromise<GetMediaReactionAggregateType<T>>

    /**
     * Group by MediaReaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaReactionGroupByArgs['orderBy'] }
        : { orderBy?: MediaReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaReaction model
   */
  readonly fields: MediaReactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaReaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaReactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MediaReaction model
   */ 
  interface MediaReactionFieldRefs {
    readonly id: FieldRef<"MediaReaction", 'String'>
    readonly userId: FieldRef<"MediaReaction", 'String'>
    readonly mediaId: FieldRef<"MediaReaction", 'String'>
    readonly isLike: FieldRef<"MediaReaction", 'Boolean'>
    readonly createdAt: FieldRef<"MediaReaction", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaReaction", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MediaReaction findUnique
   */
  export type MediaReactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * Filter, which MediaReaction to fetch.
     */
    where: MediaReactionWhereUniqueInput
  }


  /**
   * MediaReaction findUniqueOrThrow
   */
  export type MediaReactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * Filter, which MediaReaction to fetch.
     */
    where: MediaReactionWhereUniqueInput
  }


  /**
   * MediaReaction findFirst
   */
  export type MediaReactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * Filter, which MediaReaction to fetch.
     */
    where?: MediaReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaReactions to fetch.
     */
    orderBy?: MediaReactionOrderByWithRelationInput | MediaReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaReactions.
     */
    cursor?: MediaReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaReactions.
     */
    distinct?: MediaReactionScalarFieldEnum | MediaReactionScalarFieldEnum[]
  }


  /**
   * MediaReaction findFirstOrThrow
   */
  export type MediaReactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * Filter, which MediaReaction to fetch.
     */
    where?: MediaReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaReactions to fetch.
     */
    orderBy?: MediaReactionOrderByWithRelationInput | MediaReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaReactions.
     */
    cursor?: MediaReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaReactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaReactions.
     */
    distinct?: MediaReactionScalarFieldEnum | MediaReactionScalarFieldEnum[]
  }


  /**
   * MediaReaction findMany
   */
  export type MediaReactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * Filter, which MediaReactions to fetch.
     */
    where?: MediaReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaReactions to fetch.
     */
    orderBy?: MediaReactionOrderByWithRelationInput | MediaReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaReactions.
     */
    cursor?: MediaReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaReactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaReactions.
     */
    skip?: number
    distinct?: MediaReactionScalarFieldEnum | MediaReactionScalarFieldEnum[]
  }


  /**
   * MediaReaction create
   */
  export type MediaReactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaReaction.
     */
    data: XOR<MediaReactionCreateInput, MediaReactionUncheckedCreateInput>
  }


  /**
   * MediaReaction createMany
   */
  export type MediaReactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaReactions.
     */
    data: MediaReactionCreateManyInput | MediaReactionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MediaReaction update
   */
  export type MediaReactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaReaction.
     */
    data: XOR<MediaReactionUpdateInput, MediaReactionUncheckedUpdateInput>
    /**
     * Choose, which MediaReaction to update.
     */
    where: MediaReactionWhereUniqueInput
  }


  /**
   * MediaReaction updateMany
   */
  export type MediaReactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaReactions.
     */
    data: XOR<MediaReactionUpdateManyMutationInput, MediaReactionUncheckedUpdateManyInput>
    /**
     * Filter which MediaReactions to update
     */
    where?: MediaReactionWhereInput
  }


  /**
   * MediaReaction upsert
   */
  export type MediaReactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaReaction to update in case it exists.
     */
    where: MediaReactionWhereUniqueInput
    /**
     * In case the MediaReaction found by the `where` argument doesn't exist, create a new MediaReaction with this data.
     */
    create: XOR<MediaReactionCreateInput, MediaReactionUncheckedCreateInput>
    /**
     * In case the MediaReaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaReactionUpdateInput, MediaReactionUncheckedUpdateInput>
  }


  /**
   * MediaReaction delete
   */
  export type MediaReactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
    /**
     * Filter which MediaReaction to delete.
     */
    where: MediaReactionWhereUniqueInput
  }


  /**
   * MediaReaction deleteMany
   */
  export type MediaReactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaReactions to delete
     */
    where?: MediaReactionWhereInput
  }


  /**
   * MediaReaction without action
   */
  export type MediaReactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaReaction
     */
    select?: MediaReactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaReactionInclude<ExtArgs> | null
  }



  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    mediaId: string | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    mediaId: string | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    userId: number
    mediaId: number
    comment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    userId: string
    mediaId: string
    comment: string
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mediaId?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    userId?: boolean
    mediaId?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      mediaId: string
      comment: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }


  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly mediaId: FieldRef<"Comment", 'String'>
    readonly comment: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude<ExtArgs> | null
  }



  /**
   * Model Playlist
   */

  export type AggregatePlaylist = {
    _count: PlaylistCountAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  export type PlaylistMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlaylistMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlaylistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlist to aggregate.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Playlists
    **/
    _count?: true | PlaylistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistMaxAggregateInputType
  }

  export type GetPlaylistAggregateType<T extends PlaylistAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylist[P]>
      : GetScalarType<T[P], AggregatePlaylist[P]>
  }




  export type PlaylistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlaylistWhereInput
    orderBy?: PlaylistOrderByWithAggregationInput | PlaylistOrderByWithAggregationInput[]
    by: PlaylistScalarFieldEnum[] | PlaylistScalarFieldEnum
    having?: PlaylistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistCountAggregateInputType | true
    _min?: PlaylistMinAggregateInputType
    _max?: PlaylistMaxAggregateInputType
  }

  export type PlaylistGroupByOutputType = {
    id: string
    userId: string
    title: string
    createdAt: Date
    updatedAt: Date
    _count: PlaylistCountAggregateOutputType | null
    _min: PlaylistMinAggregateOutputType | null
    _max: PlaylistMaxAggregateOutputType | null
  }

  type GetPlaylistGroupByPayload<T extends PlaylistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlaylistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistGroupByOutputType[P]>
        }
      >
    >


  export type PlaylistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    MediaOnPlaylist?: boolean | Playlist$MediaOnPlaylistArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playlist"]>

  export type PlaylistSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlaylistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    MediaOnPlaylist?: boolean | Playlist$MediaOnPlaylistArgs<ExtArgs>
    _count?: boolean | PlaylistCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlaylistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Playlist"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      MediaOnPlaylist: Prisma.$MediaOnPlaylistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["playlist"]>
    composites: {}
  }


  type PlaylistGetPayload<S extends boolean | null | undefined | PlaylistDefaultArgs> = $Result.GetResult<Prisma.$PlaylistPayload, S>

  type PlaylistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlaylistFindManyArgs, 'select' | 'include'> & {
      select?: PlaylistCountAggregateInputType | true
    }

  export interface PlaylistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Playlist'], meta: { name: 'Playlist' } }
    /**
     * Find zero or one Playlist that matches the filter.
     * @param {PlaylistFindUniqueArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlaylistFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistFindUniqueArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Playlist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlaylistFindUniqueOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlaylistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Playlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlaylistFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindFirstArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Playlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindFirstOrThrowArgs} args - Arguments to find a Playlist
     * @example
     * // Get one Playlist
     * const playlist = await prisma.playlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlaylistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlists
     * const playlists = await prisma.playlist.findMany()
     * 
     * // Get first 10 Playlists
     * const playlists = await prisma.playlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistWithIdOnly = await prisma.playlist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlaylistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Playlist.
     * @param {PlaylistCreateArgs} args - Arguments to create a Playlist.
     * @example
     * // Create one Playlist
     * const Playlist = await prisma.playlist.create({
     *   data: {
     *     // ... data to create a Playlist
     *   }
     * })
     * 
    **/
    create<T extends PlaylistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistCreateArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Playlists.
     *     @param {PlaylistCreateManyArgs} args - Arguments to create many Playlists.
     *     @example
     *     // Create many Playlists
     *     const playlist = await prisma.playlist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlaylistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Playlist.
     * @param {PlaylistDeleteArgs} args - Arguments to delete one Playlist.
     * @example
     * // Delete one Playlist
     * const Playlist = await prisma.playlist.delete({
     *   where: {
     *     // ... filter to delete one Playlist
     *   }
     * })
     * 
    **/
    delete<T extends PlaylistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistDeleteArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Playlist.
     * @param {PlaylistUpdateArgs} args - Arguments to update one Playlist.
     * @example
     * // Update one Playlist
     * const playlist = await prisma.playlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlaylistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpdateArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Playlists.
     * @param {PlaylistDeleteManyArgs} args - Arguments to filter Playlists to delete.
     * @example
     * // Delete a few Playlists
     * const { count } = await prisma.playlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlaylistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlaylistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlists
     * const playlist = await prisma.playlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlaylistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Playlist.
     * @param {PlaylistUpsertArgs} args - Arguments to update or create a Playlist.
     * @example
     * // Update or create a Playlist
     * const playlist = await prisma.playlist.upsert({
     *   create: {
     *     // ... data to create a Playlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlist we want to update
     *   }
     * })
    **/
    upsert<T extends PlaylistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlaylistUpsertArgs<ExtArgs>>
    ): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistCountArgs} args - Arguments to filter Playlists to count.
     * @example
     * // Count the number of Playlists
     * const count = await prisma.playlist.count({
     *   where: {
     *     // ... the filter for the Playlists we want to count
     *   }
     * })
    **/
    count<T extends PlaylistCountArgs>(
      args?: Subset<T, PlaylistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistAggregateArgs>(args: Subset<T, PlaylistAggregateArgs>): Prisma.PrismaPromise<GetPlaylistAggregateType<T>>

    /**
     * Group by Playlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Playlist model
   */
  readonly fields: PlaylistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Playlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlaylistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    MediaOnPlaylist<T extends Playlist$MediaOnPlaylistArgs<ExtArgs> = {}>(args?: Subset<T, Playlist$MediaOnPlaylistArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Playlist model
   */ 
  interface PlaylistFieldRefs {
    readonly id: FieldRef<"Playlist", 'String'>
    readonly userId: FieldRef<"Playlist", 'String'>
    readonly title: FieldRef<"Playlist", 'String'>
    readonly createdAt: FieldRef<"Playlist", 'DateTime'>
    readonly updatedAt: FieldRef<"Playlist", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Playlist findUnique
   */
  export type PlaylistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist findUniqueOrThrow
   */
  export type PlaylistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist findFirst
   */
  export type PlaylistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * Playlist findFirstOrThrow
   */
  export type PlaylistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlist to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Playlists.
     */
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * Playlist findMany
   */
  export type PlaylistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter, which Playlists to fetch.
     */
    where?: PlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Playlists to fetch.
     */
    orderBy?: PlaylistOrderByWithRelationInput | PlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Playlists.
     */
    cursor?: PlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Playlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Playlists.
     */
    skip?: number
    distinct?: PlaylistScalarFieldEnum | PlaylistScalarFieldEnum[]
  }


  /**
   * Playlist create
   */
  export type PlaylistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to create a Playlist.
     */
    data: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
  }


  /**
   * Playlist createMany
   */
  export type PlaylistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Playlists.
     */
    data: PlaylistCreateManyInput | PlaylistCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Playlist update
   */
  export type PlaylistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The data needed to update a Playlist.
     */
    data: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
    /**
     * Choose, which Playlist to update.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist updateMany
   */
  export type PlaylistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Playlists.
     */
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyInput>
    /**
     * Filter which Playlists to update
     */
    where?: PlaylistWhereInput
  }


  /**
   * Playlist upsert
   */
  export type PlaylistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * The filter to search for the Playlist to update in case it exists.
     */
    where: PlaylistWhereUniqueInput
    /**
     * In case the Playlist found by the `where` argument doesn't exist, create a new Playlist with this data.
     */
    create: XOR<PlaylistCreateInput, PlaylistUncheckedCreateInput>
    /**
     * In case the Playlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlaylistUpdateInput, PlaylistUncheckedUpdateInput>
  }


  /**
   * Playlist delete
   */
  export type PlaylistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
    /**
     * Filter which Playlist to delete.
     */
    where: PlaylistWhereUniqueInput
  }


  /**
   * Playlist deleteMany
   */
  export type PlaylistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Playlists to delete
     */
    where?: PlaylistWhereInput
  }


  /**
   * Playlist.MediaOnPlaylist
   */
  export type Playlist$MediaOnPlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    where?: MediaOnPlaylistWhereInput
    orderBy?: MediaOnPlaylistOrderByWithRelationInput | MediaOnPlaylistOrderByWithRelationInput[]
    cursor?: MediaOnPlaylistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaOnPlaylistScalarFieldEnum | MediaOnPlaylistScalarFieldEnum[]
  }


  /**
   * Playlist without action
   */
  export type PlaylistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Playlist
     */
    select?: PlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlaylistInclude<ExtArgs> | null
  }



  /**
   * Model MediaOnPlaylist
   */

  export type AggregateMediaOnPlaylist = {
    _count: MediaOnPlaylistCountAggregateOutputType | null
    _avg: MediaOnPlaylistAvgAggregateOutputType | null
    _sum: MediaOnPlaylistSumAggregateOutputType | null
    _min: MediaOnPlaylistMinAggregateOutputType | null
    _max: MediaOnPlaylistMaxAggregateOutputType | null
  }

  export type MediaOnPlaylistAvgAggregateOutputType = {
    id: number | null
    sortNo: number | null
  }

  export type MediaOnPlaylistSumAggregateOutputType = {
    id: number | null
    sortNo: number | null
  }

  export type MediaOnPlaylistMinAggregateOutputType = {
    id: number | null
    playlistId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sortNo: number | null
  }

  export type MediaOnPlaylistMaxAggregateOutputType = {
    id: number | null
    playlistId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    sortNo: number | null
  }

  export type MediaOnPlaylistCountAggregateOutputType = {
    id: number
    playlistId: number
    mediaId: number
    createdAt: number
    updatedAt: number
    sortNo: number
    _all: number
  }


  export type MediaOnPlaylistAvgAggregateInputType = {
    id?: true
    sortNo?: true
  }

  export type MediaOnPlaylistSumAggregateInputType = {
    id?: true
    sortNo?: true
  }

  export type MediaOnPlaylistMinAggregateInputType = {
    id?: true
    playlistId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
    sortNo?: true
  }

  export type MediaOnPlaylistMaxAggregateInputType = {
    id?: true
    playlistId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
    sortNo?: true
  }

  export type MediaOnPlaylistCountAggregateInputType = {
    id?: true
    playlistId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
    sortNo?: true
    _all?: true
  }

  export type MediaOnPlaylistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaOnPlaylist to aggregate.
     */
    where?: MediaOnPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnPlaylists to fetch.
     */
    orderBy?: MediaOnPlaylistOrderByWithRelationInput | MediaOnPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaOnPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnPlaylists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaOnPlaylists
    **/
    _count?: true | MediaOnPlaylistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaOnPlaylistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaOnPlaylistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaOnPlaylistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaOnPlaylistMaxAggregateInputType
  }

  export type GetMediaOnPlaylistAggregateType<T extends MediaOnPlaylistAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaOnPlaylist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaOnPlaylist[P]>
      : GetScalarType<T[P], AggregateMediaOnPlaylist[P]>
  }




  export type MediaOnPlaylistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnPlaylistWhereInput
    orderBy?: MediaOnPlaylistOrderByWithAggregationInput | MediaOnPlaylistOrderByWithAggregationInput[]
    by: MediaOnPlaylistScalarFieldEnum[] | MediaOnPlaylistScalarFieldEnum
    having?: MediaOnPlaylistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaOnPlaylistCountAggregateInputType | true
    _avg?: MediaOnPlaylistAvgAggregateInputType
    _sum?: MediaOnPlaylistSumAggregateInputType
    _min?: MediaOnPlaylistMinAggregateInputType
    _max?: MediaOnPlaylistMaxAggregateInputType
  }

  export type MediaOnPlaylistGroupByOutputType = {
    id: number
    playlistId: string
    mediaId: string
    createdAt: Date
    updatedAt: Date
    sortNo: number
    _count: MediaOnPlaylistCountAggregateOutputType | null
    _avg: MediaOnPlaylistAvgAggregateOutputType | null
    _sum: MediaOnPlaylistSumAggregateOutputType | null
    _min: MediaOnPlaylistMinAggregateOutputType | null
    _max: MediaOnPlaylistMaxAggregateOutputType | null
  }

  type GetMediaOnPlaylistGroupByPayload<T extends MediaOnPlaylistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaOnPlaylistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaOnPlaylistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaOnPlaylistGroupByOutputType[P]>
            : GetScalarType<T[P], MediaOnPlaylistGroupByOutputType[P]>
        }
      >
    >


  export type MediaOnPlaylistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    playlistId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sortNo?: boolean
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaOnPlaylist"]>

  export type MediaOnPlaylistSelectScalar = {
    id?: boolean
    playlistId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sortNo?: boolean
  }

  export type MediaOnPlaylistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    playlist?: boolean | PlaylistDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $MediaOnPlaylistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaOnPlaylist"
    objects: {
      playlist: Prisma.$PlaylistPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      playlistId: string
      mediaId: string
      createdAt: Date
      updatedAt: Date
      sortNo: number
    }, ExtArgs["result"]["mediaOnPlaylist"]>
    composites: {}
  }


  type MediaOnPlaylistGetPayload<S extends boolean | null | undefined | MediaOnPlaylistDefaultArgs> = $Result.GetResult<Prisma.$MediaOnPlaylistPayload, S>

  type MediaOnPlaylistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaOnPlaylistFindManyArgs, 'select' | 'include'> & {
      select?: MediaOnPlaylistCountAggregateInputType | true
    }

  export interface MediaOnPlaylistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaOnPlaylist'], meta: { name: 'MediaOnPlaylist' } }
    /**
     * Find zero or one MediaOnPlaylist that matches the filter.
     * @param {MediaOnPlaylistFindUniqueArgs} args - Arguments to find a MediaOnPlaylist
     * @example
     * // Get one MediaOnPlaylist
     * const mediaOnPlaylist = await prisma.mediaOnPlaylist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MediaOnPlaylistFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnPlaylistFindUniqueArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MediaOnPlaylist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MediaOnPlaylistFindUniqueOrThrowArgs} args - Arguments to find a MediaOnPlaylist
     * @example
     * // Get one MediaOnPlaylist
     * const mediaOnPlaylist = await prisma.mediaOnPlaylist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MediaOnPlaylistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnPlaylistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MediaOnPlaylist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnPlaylistFindFirstArgs} args - Arguments to find a MediaOnPlaylist
     * @example
     * // Get one MediaOnPlaylist
     * const mediaOnPlaylist = await prisma.mediaOnPlaylist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MediaOnPlaylistFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnPlaylistFindFirstArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MediaOnPlaylist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnPlaylistFindFirstOrThrowArgs} args - Arguments to find a MediaOnPlaylist
     * @example
     * // Get one MediaOnPlaylist
     * const mediaOnPlaylist = await prisma.mediaOnPlaylist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MediaOnPlaylistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnPlaylistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MediaOnPlaylists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnPlaylistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaOnPlaylists
     * const mediaOnPlaylists = await prisma.mediaOnPlaylist.findMany()
     * 
     * // Get first 10 MediaOnPlaylists
     * const mediaOnPlaylists = await prisma.mediaOnPlaylist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaOnPlaylistWithIdOnly = await prisma.mediaOnPlaylist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MediaOnPlaylistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnPlaylistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MediaOnPlaylist.
     * @param {MediaOnPlaylistCreateArgs} args - Arguments to create a MediaOnPlaylist.
     * @example
     * // Create one MediaOnPlaylist
     * const MediaOnPlaylist = await prisma.mediaOnPlaylist.create({
     *   data: {
     *     // ... data to create a MediaOnPlaylist
     *   }
     * })
     * 
    **/
    create<T extends MediaOnPlaylistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnPlaylistCreateArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MediaOnPlaylists.
     *     @param {MediaOnPlaylistCreateManyArgs} args - Arguments to create many MediaOnPlaylists.
     *     @example
     *     // Create many MediaOnPlaylists
     *     const mediaOnPlaylist = await prisma.mediaOnPlaylist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MediaOnPlaylistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnPlaylistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MediaOnPlaylist.
     * @param {MediaOnPlaylistDeleteArgs} args - Arguments to delete one MediaOnPlaylist.
     * @example
     * // Delete one MediaOnPlaylist
     * const MediaOnPlaylist = await prisma.mediaOnPlaylist.delete({
     *   where: {
     *     // ... filter to delete one MediaOnPlaylist
     *   }
     * })
     * 
    **/
    delete<T extends MediaOnPlaylistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnPlaylistDeleteArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MediaOnPlaylist.
     * @param {MediaOnPlaylistUpdateArgs} args - Arguments to update one MediaOnPlaylist.
     * @example
     * // Update one MediaOnPlaylist
     * const mediaOnPlaylist = await prisma.mediaOnPlaylist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MediaOnPlaylistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnPlaylistUpdateArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MediaOnPlaylists.
     * @param {MediaOnPlaylistDeleteManyArgs} args - Arguments to filter MediaOnPlaylists to delete.
     * @example
     * // Delete a few MediaOnPlaylists
     * const { count } = await prisma.mediaOnPlaylist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MediaOnPlaylistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnPlaylistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaOnPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnPlaylistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaOnPlaylists
     * const mediaOnPlaylist = await prisma.mediaOnPlaylist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MediaOnPlaylistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnPlaylistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MediaOnPlaylist.
     * @param {MediaOnPlaylistUpsertArgs} args - Arguments to update or create a MediaOnPlaylist.
     * @example
     * // Update or create a MediaOnPlaylist
     * const mediaOnPlaylist = await prisma.mediaOnPlaylist.upsert({
     *   create: {
     *     // ... data to create a MediaOnPlaylist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaOnPlaylist we want to update
     *   }
     * })
    **/
    upsert<T extends MediaOnPlaylistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnPlaylistUpsertArgs<ExtArgs>>
    ): Prisma__MediaOnPlaylistClient<$Result.GetResult<Prisma.$MediaOnPlaylistPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MediaOnPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnPlaylistCountArgs} args - Arguments to filter MediaOnPlaylists to count.
     * @example
     * // Count the number of MediaOnPlaylists
     * const count = await prisma.mediaOnPlaylist.count({
     *   where: {
     *     // ... the filter for the MediaOnPlaylists we want to count
     *   }
     * })
    **/
    count<T extends MediaOnPlaylistCountArgs>(
      args?: Subset<T, MediaOnPlaylistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaOnPlaylistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaOnPlaylist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnPlaylistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaOnPlaylistAggregateArgs>(args: Subset<T, MediaOnPlaylistAggregateArgs>): Prisma.PrismaPromise<GetMediaOnPlaylistAggregateType<T>>

    /**
     * Group by MediaOnPlaylist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnPlaylistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaOnPlaylistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaOnPlaylistGroupByArgs['orderBy'] }
        : { orderBy?: MediaOnPlaylistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaOnPlaylistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaOnPlaylistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaOnPlaylist model
   */
  readonly fields: MediaOnPlaylistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaOnPlaylist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaOnPlaylistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    playlist<T extends PlaylistDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlaylistDefaultArgs<ExtArgs>>): Prisma__PlaylistClient<$Result.GetResult<Prisma.$PlaylistPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MediaOnPlaylist model
   */ 
  interface MediaOnPlaylistFieldRefs {
    readonly id: FieldRef<"MediaOnPlaylist", 'Int'>
    readonly playlistId: FieldRef<"MediaOnPlaylist", 'String'>
    readonly mediaId: FieldRef<"MediaOnPlaylist", 'String'>
    readonly createdAt: FieldRef<"MediaOnPlaylist", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaOnPlaylist", 'DateTime'>
    readonly sortNo: FieldRef<"MediaOnPlaylist", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * MediaOnPlaylist findUnique
   */
  export type MediaOnPlaylistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnPlaylist to fetch.
     */
    where: MediaOnPlaylistWhereUniqueInput
  }


  /**
   * MediaOnPlaylist findUniqueOrThrow
   */
  export type MediaOnPlaylistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnPlaylist to fetch.
     */
    where: MediaOnPlaylistWhereUniqueInput
  }


  /**
   * MediaOnPlaylist findFirst
   */
  export type MediaOnPlaylistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnPlaylist to fetch.
     */
    where?: MediaOnPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnPlaylists to fetch.
     */
    orderBy?: MediaOnPlaylistOrderByWithRelationInput | MediaOnPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaOnPlaylists.
     */
    cursor?: MediaOnPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnPlaylists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaOnPlaylists.
     */
    distinct?: MediaOnPlaylistScalarFieldEnum | MediaOnPlaylistScalarFieldEnum[]
  }


  /**
   * MediaOnPlaylist findFirstOrThrow
   */
  export type MediaOnPlaylistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnPlaylist to fetch.
     */
    where?: MediaOnPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnPlaylists to fetch.
     */
    orderBy?: MediaOnPlaylistOrderByWithRelationInput | MediaOnPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaOnPlaylists.
     */
    cursor?: MediaOnPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnPlaylists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaOnPlaylists.
     */
    distinct?: MediaOnPlaylistScalarFieldEnum | MediaOnPlaylistScalarFieldEnum[]
  }


  /**
   * MediaOnPlaylist findMany
   */
  export type MediaOnPlaylistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnPlaylists to fetch.
     */
    where?: MediaOnPlaylistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnPlaylists to fetch.
     */
    orderBy?: MediaOnPlaylistOrderByWithRelationInput | MediaOnPlaylistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaOnPlaylists.
     */
    cursor?: MediaOnPlaylistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnPlaylists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnPlaylists.
     */
    skip?: number
    distinct?: MediaOnPlaylistScalarFieldEnum | MediaOnPlaylistScalarFieldEnum[]
  }


  /**
   * MediaOnPlaylist create
   */
  export type MediaOnPlaylistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaOnPlaylist.
     */
    data: XOR<MediaOnPlaylistCreateInput, MediaOnPlaylistUncheckedCreateInput>
  }


  /**
   * MediaOnPlaylist createMany
   */
  export type MediaOnPlaylistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaOnPlaylists.
     */
    data: MediaOnPlaylistCreateManyInput | MediaOnPlaylistCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MediaOnPlaylist update
   */
  export type MediaOnPlaylistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaOnPlaylist.
     */
    data: XOR<MediaOnPlaylistUpdateInput, MediaOnPlaylistUncheckedUpdateInput>
    /**
     * Choose, which MediaOnPlaylist to update.
     */
    where: MediaOnPlaylistWhereUniqueInput
  }


  /**
   * MediaOnPlaylist updateMany
   */
  export type MediaOnPlaylistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaOnPlaylists.
     */
    data: XOR<MediaOnPlaylistUpdateManyMutationInput, MediaOnPlaylistUncheckedUpdateManyInput>
    /**
     * Filter which MediaOnPlaylists to update
     */
    where?: MediaOnPlaylistWhereInput
  }


  /**
   * MediaOnPlaylist upsert
   */
  export type MediaOnPlaylistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaOnPlaylist to update in case it exists.
     */
    where: MediaOnPlaylistWhereUniqueInput
    /**
     * In case the MediaOnPlaylist found by the `where` argument doesn't exist, create a new MediaOnPlaylist with this data.
     */
    create: XOR<MediaOnPlaylistCreateInput, MediaOnPlaylistUncheckedCreateInput>
    /**
     * In case the MediaOnPlaylist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaOnPlaylistUpdateInput, MediaOnPlaylistUncheckedUpdateInput>
  }


  /**
   * MediaOnPlaylist delete
   */
  export type MediaOnPlaylistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
    /**
     * Filter which MediaOnPlaylist to delete.
     */
    where: MediaOnPlaylistWhereUniqueInput
  }


  /**
   * MediaOnPlaylist deleteMany
   */
  export type MediaOnPlaylistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaOnPlaylists to delete
     */
    where?: MediaOnPlaylistWhereInput
  }


  /**
   * MediaOnPlaylist without action
   */
  export type MediaOnPlaylistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnPlaylist
     */
    select?: MediaOnPlaylistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnPlaylistInclude<ExtArgs> | null
  }



  /**
   * Model History
   */

  export type AggregateHistory = {
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  export type HistoryAvgAggregateOutputType = {
    id: number | null
  }

  export type HistorySumAggregateOutputType = {
    id: number | null
  }

  export type HistoryMinAggregateOutputType = {
    id: number | null
    userId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HistoryMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HistoryCountAggregateOutputType = {
    id: number
    userId: number
    mediaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HistoryAvgAggregateInputType = {
    id?: true
  }

  export type HistorySumAggregateInputType = {
    id?: true
  }

  export type HistoryMinAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HistoryCountAggregateInputType = {
    id?: true
    userId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which History to aggregate.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Histories
    **/
    _count?: true | HistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoryMaxAggregateInputType
  }

  export type GetHistoryAggregateType<T extends HistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistory[P]>
      : GetScalarType<T[P], AggregateHistory[P]>
  }




  export type HistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoryWhereInput
    orderBy?: HistoryOrderByWithAggregationInput | HistoryOrderByWithAggregationInput[]
    by: HistoryScalarFieldEnum[] | HistoryScalarFieldEnum
    having?: HistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoryCountAggregateInputType | true
    _avg?: HistoryAvgAggregateInputType
    _sum?: HistorySumAggregateInputType
    _min?: HistoryMinAggregateInputType
    _max?: HistoryMaxAggregateInputType
  }

  export type HistoryGroupByOutputType = {
    id: number
    userId: string
    mediaId: string
    createdAt: Date
    updatedAt: Date
    _count: HistoryCountAggregateOutputType | null
    _avg: HistoryAvgAggregateOutputType | null
    _sum: HistorySumAggregateOutputType | null
    _min: HistoryMinAggregateOutputType | null
    _max: HistoryMaxAggregateOutputType | null
  }

  type GetHistoryGroupByPayload<T extends HistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoryGroupByOutputType[P]>
            : GetScalarType<T[P], HistoryGroupByOutputType[P]>
        }
      >
    >


  export type HistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["history"]>

  export type HistorySelectScalar = {
    id?: boolean
    userId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $HistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "History"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      mediaId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["history"]>
    composites: {}
  }


  type HistoryGetPayload<S extends boolean | null | undefined | HistoryDefaultArgs> = $Result.GetResult<Prisma.$HistoryPayload, S>

  type HistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HistoryFindManyArgs, 'select' | 'include'> & {
      select?: HistoryCountAggregateInputType | true
    }

  export interface HistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['History'], meta: { name: 'History' } }
    /**
     * Find zero or one History that matches the filter.
     * @param {HistoryFindUniqueArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one History that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HistoryFindUniqueOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first History that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first History that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindFirstOrThrowArgs} args - Arguments to find a History
     * @example
     * // Get one History
     * const history = await prisma.history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Histories
     * const histories = await prisma.history.findMany()
     * 
     * // Get first 10 Histories
     * const histories = await prisma.history.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historyWithIdOnly = await prisma.history.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a History.
     * @param {HistoryCreateArgs} args - Arguments to create a History.
     * @example
     * // Create one History
     * const History = await prisma.history.create({
     *   data: {
     *     // ... data to create a History
     *   }
     * })
     * 
    **/
    create<T extends HistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryCreateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Histories.
     *     @param {HistoryCreateManyArgs} args - Arguments to create many Histories.
     *     @example
     *     // Create many Histories
     *     const history = await prisma.history.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a History.
     * @param {HistoryDeleteArgs} args - Arguments to delete one History.
     * @example
     * // Delete one History
     * const History = await prisma.history.delete({
     *   where: {
     *     // ... filter to delete one History
     *   }
     * })
     * 
    **/
    delete<T extends HistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryDeleteArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one History.
     * @param {HistoryUpdateArgs} args - Arguments to update one History.
     * @example
     * // Update one History
     * const history = await prisma.history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Histories.
     * @param {HistoryDeleteManyArgs} args - Arguments to filter Histories to delete.
     * @example
     * // Delete a few Histories
     * const { count } = await prisma.history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Histories
     * const history = await prisma.history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one History.
     * @param {HistoryUpsertArgs} args - Arguments to update or create a History.
     * @example
     * // Update or create a History
     * const history = await prisma.history.upsert({
     *   create: {
     *     // ... data to create a History
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the History we want to update
     *   }
     * })
    **/
    upsert<T extends HistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HistoryUpsertArgs<ExtArgs>>
    ): Prisma__HistoryClient<$Result.GetResult<Prisma.$HistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryCountArgs} args - Arguments to filter Histories to count.
     * @example
     * // Count the number of Histories
     * const count = await prisma.history.count({
     *   where: {
     *     // ... the filter for the Histories we want to count
     *   }
     * })
    **/
    count<T extends HistoryCountArgs>(
      args?: Subset<T, HistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoryAggregateArgs>(args: Subset<T, HistoryAggregateArgs>): Prisma.PrismaPromise<GetHistoryAggregateType<T>>

    /**
     * Group by History.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoryGroupByArgs['orderBy'] }
        : { orderBy?: HistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the History model
   */
  readonly fields: HistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for History.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the History model
   */ 
  interface HistoryFieldRefs {
    readonly id: FieldRef<"History", 'Int'>
    readonly userId: FieldRef<"History", 'String'>
    readonly mediaId: FieldRef<"History", 'String'>
    readonly createdAt: FieldRef<"History", 'DateTime'>
    readonly updatedAt: FieldRef<"History", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * History findUnique
   */
  export type HistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History findUniqueOrThrow
   */
  export type HistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History findFirst
   */
  export type HistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History findFirstOrThrow
   */
  export type HistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which History to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Histories.
     */
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History findMany
   */
  export type HistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter, which Histories to fetch.
     */
    where?: HistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Histories to fetch.
     */
    orderBy?: HistoryOrderByWithRelationInput | HistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Histories.
     */
    cursor?: HistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Histories.
     */
    skip?: number
    distinct?: HistoryScalarFieldEnum | HistoryScalarFieldEnum[]
  }


  /**
   * History create
   */
  export type HistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a History.
     */
    data: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
  }


  /**
   * History createMany
   */
  export type HistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Histories.
     */
    data: HistoryCreateManyInput | HistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * History update
   */
  export type HistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a History.
     */
    data: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
    /**
     * Choose, which History to update.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History updateMany
   */
  export type HistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Histories.
     */
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyInput>
    /**
     * Filter which Histories to update
     */
    where?: HistoryWhereInput
  }


  /**
   * History upsert
   */
  export type HistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the History to update in case it exists.
     */
    where: HistoryWhereUniqueInput
    /**
     * In case the History found by the `where` argument doesn't exist, create a new History with this data.
     */
    create: XOR<HistoryCreateInput, HistoryUncheckedCreateInput>
    /**
     * In case the History was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoryUpdateInput, HistoryUncheckedUpdateInput>
  }


  /**
   * History delete
   */
  export type HistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
    /**
     * Filter which History to delete.
     */
    where: HistoryWhereUniqueInput
  }


  /**
   * History deleteMany
   */
  export type HistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Histories to delete
     */
    where?: HistoryWhereInput
  }


  /**
   * History without action
   */
  export type HistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the History
     */
    select?: HistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoryInclude<ExtArgs> | null
  }



  /**
   * Model Subscriber
   */

  export type AggregateSubscriber = {
    _count: SubscriberCountAggregateOutputType | null
    _avg: SubscriberAvgAggregateOutputType | null
    _sum: SubscriberSumAggregateOutputType | null
    _min: SubscriberMinAggregateOutputType | null
    _max: SubscriberMaxAggregateOutputType | null
  }

  export type SubscriberAvgAggregateOutputType = {
    id: number | null
  }

  export type SubscriberSumAggregateOutputType = {
    id: number | null
  }

  export type SubscriberMinAggregateOutputType = {
    id: number | null
    userId: string | null
    channelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriberMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    channelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriberCountAggregateOutputType = {
    id: number
    userId: number
    channelId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriberAvgAggregateInputType = {
    id?: true
  }

  export type SubscriberSumAggregateInputType = {
    id?: true
  }

  export type SubscriberMinAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriberMaxAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriberCountAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriber to aggregate.
     */
    where?: SubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscribers to fetch.
     */
    orderBy?: SubscriberOrderByWithRelationInput | SubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscribers
    **/
    _count?: true | SubscriberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriberMaxAggregateInputType
  }

  export type GetSubscriberAggregateType<T extends SubscriberAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriber[P]>
      : GetScalarType<T[P], AggregateSubscriber[P]>
  }




  export type SubscriberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriberWhereInput
    orderBy?: SubscriberOrderByWithAggregationInput | SubscriberOrderByWithAggregationInput[]
    by: SubscriberScalarFieldEnum[] | SubscriberScalarFieldEnum
    having?: SubscriberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriberCountAggregateInputType | true
    _avg?: SubscriberAvgAggregateInputType
    _sum?: SubscriberSumAggregateInputType
    _min?: SubscriberMinAggregateInputType
    _max?: SubscriberMaxAggregateInputType
  }

  export type SubscriberGroupByOutputType = {
    id: number
    userId: string
    channelId: string
    createdAt: Date
    updatedAt: Date
    _count: SubscriberCountAggregateOutputType | null
    _avg: SubscriberAvgAggregateOutputType | null
    _sum: SubscriberSumAggregateOutputType | null
    _min: SubscriberMinAggregateOutputType | null
    _max: SubscriberMaxAggregateOutputType | null
  }

  type GetSubscriberGroupByPayload<T extends SubscriberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriberGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriberGroupByOutputType[P]>
        }
      >
    >


  export type SubscriberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    channelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriber"]>

  export type SubscriberSelectScalar = {
    id?: boolean
    userId?: boolean
    channelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SubscriberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscriber"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      channel: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      channelId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscriber"]>
    composites: {}
  }


  type SubscriberGetPayload<S extends boolean | null | undefined | SubscriberDefaultArgs> = $Result.GetResult<Prisma.$SubscriberPayload, S>

  type SubscriberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubscriberFindManyArgs, 'select' | 'include'> & {
      select?: SubscriberCountAggregateInputType | true
    }

  export interface SubscriberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscriber'], meta: { name: 'Subscriber' } }
    /**
     * Find zero or one Subscriber that matches the filter.
     * @param {SubscriberFindUniqueArgs} args - Arguments to find a Subscriber
     * @example
     * // Get one Subscriber
     * const subscriber = await prisma.subscriber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubscriberFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriberFindUniqueArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Subscriber that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubscriberFindUniqueOrThrowArgs} args - Arguments to find a Subscriber
     * @example
     * // Get one Subscriber
     * const subscriber = await prisma.subscriber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubscriberFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriberFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Subscriber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriberFindFirstArgs} args - Arguments to find a Subscriber
     * @example
     * // Get one Subscriber
     * const subscriber = await prisma.subscriber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubscriberFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriberFindFirstArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Subscriber that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriberFindFirstOrThrowArgs} args - Arguments to find a Subscriber
     * @example
     * // Get one Subscriber
     * const subscriber = await prisma.subscriber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubscriberFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriberFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Subscribers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscribers
     * const subscribers = await prisma.subscriber.findMany()
     * 
     * // Get first 10 Subscribers
     * const subscribers = await prisma.subscriber.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriberWithIdOnly = await prisma.subscriber.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubscriberFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriberFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Subscriber.
     * @param {SubscriberCreateArgs} args - Arguments to create a Subscriber.
     * @example
     * // Create one Subscriber
     * const Subscriber = await prisma.subscriber.create({
     *   data: {
     *     // ... data to create a Subscriber
     *   }
     * })
     * 
    **/
    create<T extends SubscriberCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriberCreateArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Subscribers.
     *     @param {SubscriberCreateManyArgs} args - Arguments to create many Subscribers.
     *     @example
     *     // Create many Subscribers
     *     const subscriber = await prisma.subscriber.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubscriberCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriberCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subscriber.
     * @param {SubscriberDeleteArgs} args - Arguments to delete one Subscriber.
     * @example
     * // Delete one Subscriber
     * const Subscriber = await prisma.subscriber.delete({
     *   where: {
     *     // ... filter to delete one Subscriber
     *   }
     * })
     * 
    **/
    delete<T extends SubscriberDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriberDeleteArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Subscriber.
     * @param {SubscriberUpdateArgs} args - Arguments to update one Subscriber.
     * @example
     * // Update one Subscriber
     * const subscriber = await prisma.subscriber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubscriberUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriberUpdateArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Subscribers.
     * @param {SubscriberDeleteManyArgs} args - Arguments to filter Subscribers to delete.
     * @example
     * // Delete a few Subscribers
     * const { count } = await prisma.subscriber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubscriberDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubscriberDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscribers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscribers
     * const subscriber = await prisma.subscriber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubscriberUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriberUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscriber.
     * @param {SubscriberUpsertArgs} args - Arguments to update or create a Subscriber.
     * @example
     * // Update or create a Subscriber
     * const subscriber = await prisma.subscriber.upsert({
     *   create: {
     *     // ... data to create a Subscriber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscriber we want to update
     *   }
     * })
    **/
    upsert<T extends SubscriberUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubscriberUpsertArgs<ExtArgs>>
    ): Prisma__SubscriberClient<$Result.GetResult<Prisma.$SubscriberPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Subscribers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriberCountArgs} args - Arguments to filter Subscribers to count.
     * @example
     * // Count the number of Subscribers
     * const count = await prisma.subscriber.count({
     *   where: {
     *     // ... the filter for the Subscribers we want to count
     *   }
     * })
    **/
    count<T extends SubscriberCountArgs>(
      args?: Subset<T, SubscriberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscriber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriberAggregateArgs>(args: Subset<T, SubscriberAggregateArgs>): Prisma.PrismaPromise<GetSubscriberAggregateType<T>>

    /**
     * Group by Subscriber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriberGroupByArgs['orderBy'] }
        : { orderBy?: SubscriberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscriber model
   */
  readonly fields: SubscriberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscriber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    channel<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Subscriber model
   */ 
  interface SubscriberFieldRefs {
    readonly id: FieldRef<"Subscriber", 'Int'>
    readonly userId: FieldRef<"Subscriber", 'String'>
    readonly channelId: FieldRef<"Subscriber", 'String'>
    readonly createdAt: FieldRef<"Subscriber", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscriber", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Subscriber findUnique
   */
  export type SubscriberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * Filter, which Subscriber to fetch.
     */
    where: SubscriberWhereUniqueInput
  }


  /**
   * Subscriber findUniqueOrThrow
   */
  export type SubscriberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * Filter, which Subscriber to fetch.
     */
    where: SubscriberWhereUniqueInput
  }


  /**
   * Subscriber findFirst
   */
  export type SubscriberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * Filter, which Subscriber to fetch.
     */
    where?: SubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscribers to fetch.
     */
    orderBy?: SubscriberOrderByWithRelationInput | SubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscribers.
     */
    cursor?: SubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscribers.
     */
    distinct?: SubscriberScalarFieldEnum | SubscriberScalarFieldEnum[]
  }


  /**
   * Subscriber findFirstOrThrow
   */
  export type SubscriberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * Filter, which Subscriber to fetch.
     */
    where?: SubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscribers to fetch.
     */
    orderBy?: SubscriberOrderByWithRelationInput | SubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscribers.
     */
    cursor?: SubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscribers.
     */
    distinct?: SubscriberScalarFieldEnum | SubscriberScalarFieldEnum[]
  }


  /**
   * Subscriber findMany
   */
  export type SubscriberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * Filter, which Subscribers to fetch.
     */
    where?: SubscriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscribers to fetch.
     */
    orderBy?: SubscriberOrderByWithRelationInput | SubscriberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscribers.
     */
    cursor?: SubscriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscribers.
     */
    skip?: number
    distinct?: SubscriberScalarFieldEnum | SubscriberScalarFieldEnum[]
  }


  /**
   * Subscriber create
   */
  export type SubscriberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscriber.
     */
    data: XOR<SubscriberCreateInput, SubscriberUncheckedCreateInput>
  }


  /**
   * Subscriber createMany
   */
  export type SubscriberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscribers.
     */
    data: SubscriberCreateManyInput | SubscriberCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Subscriber update
   */
  export type SubscriberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscriber.
     */
    data: XOR<SubscriberUpdateInput, SubscriberUncheckedUpdateInput>
    /**
     * Choose, which Subscriber to update.
     */
    where: SubscriberWhereUniqueInput
  }


  /**
   * Subscriber updateMany
   */
  export type SubscriberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscribers.
     */
    data: XOR<SubscriberUpdateManyMutationInput, SubscriberUncheckedUpdateManyInput>
    /**
     * Filter which Subscribers to update
     */
    where?: SubscriberWhereInput
  }


  /**
   * Subscriber upsert
   */
  export type SubscriberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscriber to update in case it exists.
     */
    where: SubscriberWhereUniqueInput
    /**
     * In case the Subscriber found by the `where` argument doesn't exist, create a new Subscriber with this data.
     */
    create: XOR<SubscriberCreateInput, SubscriberUncheckedCreateInput>
    /**
     * In case the Subscriber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriberUpdateInput, SubscriberUncheckedUpdateInput>
  }


  /**
   * Subscriber delete
   */
  export type SubscriberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
    /**
     * Filter which Subscriber to delete.
     */
    where: SubscriberWhereUniqueInput
  }


  /**
   * Subscriber deleteMany
   */
  export type SubscriberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscribers to delete
     */
    where?: SubscriberWhereInput
  }


  /**
   * Subscriber without action
   */
  export type SubscriberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscriber
     */
    select?: SubscriberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubscriberInclude<ExtArgs> | null
  }



  /**
   * Model NotificationSubscriptions
   */

  export type AggregateNotificationSubscriptions = {
    _count: NotificationSubscriptionsCountAggregateOutputType | null
    _avg: NotificationSubscriptionsAvgAggregateOutputType | null
    _sum: NotificationSubscriptionsSumAggregateOutputType | null
    _min: NotificationSubscriptionsMinAggregateOutputType | null
    _max: NotificationSubscriptionsMaxAggregateOutputType | null
  }

  export type NotificationSubscriptionsAvgAggregateOutputType = {
    id: number | null
  }

  export type NotificationSubscriptionsSumAggregateOutputType = {
    id: number | null
  }

  export type NotificationSubscriptionsMinAggregateOutputType = {
    id: number | null
    userId: string | null
    subscription: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSubscriptionsMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    subscription: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSubscriptionsCountAggregateOutputType = {
    id: number
    userId: number
    subscription: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationSubscriptionsAvgAggregateInputType = {
    id?: true
  }

  export type NotificationSubscriptionsSumAggregateInputType = {
    id?: true
  }

  export type NotificationSubscriptionsMinAggregateInputType = {
    id?: true
    userId?: true
    subscription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSubscriptionsMaxAggregateInputType = {
    id?: true
    userId?: true
    subscription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSubscriptionsCountAggregateInputType = {
    id?: true
    userId?: true
    subscription?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationSubscriptionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSubscriptions to aggregate.
     */
    where?: NotificationSubscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSubscriptions to fetch.
     */
    orderBy?: NotificationSubscriptionsOrderByWithRelationInput | NotificationSubscriptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationSubscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationSubscriptions
    **/
    _count?: true | NotificationSubscriptionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationSubscriptionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSubscriptionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationSubscriptionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationSubscriptionsMaxAggregateInputType
  }

  export type GetNotificationSubscriptionsAggregateType<T extends NotificationSubscriptionsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationSubscriptions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationSubscriptions[P]>
      : GetScalarType<T[P], AggregateNotificationSubscriptions[P]>
  }




  export type NotificationSubscriptionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationSubscriptionsWhereInput
    orderBy?: NotificationSubscriptionsOrderByWithAggregationInput | NotificationSubscriptionsOrderByWithAggregationInput[]
    by: NotificationSubscriptionsScalarFieldEnum[] | NotificationSubscriptionsScalarFieldEnum
    having?: NotificationSubscriptionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationSubscriptionsCountAggregateInputType | true
    _avg?: NotificationSubscriptionsAvgAggregateInputType
    _sum?: NotificationSubscriptionsSumAggregateInputType
    _min?: NotificationSubscriptionsMinAggregateInputType
    _max?: NotificationSubscriptionsMaxAggregateInputType
  }

  export type NotificationSubscriptionsGroupByOutputType = {
    id: number
    userId: string
    subscription: string
    createdAt: Date
    updatedAt: Date
    _count: NotificationSubscriptionsCountAggregateOutputType | null
    _avg: NotificationSubscriptionsAvgAggregateOutputType | null
    _sum: NotificationSubscriptionsSumAggregateOutputType | null
    _min: NotificationSubscriptionsMinAggregateOutputType | null
    _max: NotificationSubscriptionsMaxAggregateOutputType | null
  }

  type GetNotificationSubscriptionsGroupByPayload<T extends NotificationSubscriptionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationSubscriptionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationSubscriptionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationSubscriptionsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationSubscriptionsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSubscriptionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subscription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSubscriptions"]>

  export type NotificationSubscriptionsSelectScalar = {
    id?: boolean
    userId?: boolean
    subscription?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationSubscriptionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $NotificationSubscriptionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationSubscriptions"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      subscription: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationSubscriptions"]>
    composites: {}
  }


  type NotificationSubscriptionsGetPayload<S extends boolean | null | undefined | NotificationSubscriptionsDefaultArgs> = $Result.GetResult<Prisma.$NotificationSubscriptionsPayload, S>

  type NotificationSubscriptionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationSubscriptionsFindManyArgs, 'select' | 'include'> & {
      select?: NotificationSubscriptionsCountAggregateInputType | true
    }

  export interface NotificationSubscriptionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationSubscriptions'], meta: { name: 'NotificationSubscriptions' } }
    /**
     * Find zero or one NotificationSubscriptions that matches the filter.
     * @param {NotificationSubscriptionsFindUniqueArgs} args - Arguments to find a NotificationSubscriptions
     * @example
     * // Get one NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationSubscriptionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationSubscriptionsFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NotificationSubscriptions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationSubscriptionsFindUniqueOrThrowArgs} args - Arguments to find a NotificationSubscriptions
     * @example
     * // Get one NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationSubscriptionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationSubscriptionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NotificationSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSubscriptionsFindFirstArgs} args - Arguments to find a NotificationSubscriptions
     * @example
     * // Get one NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationSubscriptionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationSubscriptionsFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NotificationSubscriptions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSubscriptionsFindFirstOrThrowArgs} args - Arguments to find a NotificationSubscriptions
     * @example
     * // Get one NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationSubscriptionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationSubscriptionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NotificationSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSubscriptionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.findMany()
     * 
     * // Get first 10 NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationSubscriptionsWithIdOnly = await prisma.notificationSubscriptions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationSubscriptionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationSubscriptionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NotificationSubscriptions.
     * @param {NotificationSubscriptionsCreateArgs} args - Arguments to create a NotificationSubscriptions.
     * @example
     * // Create one NotificationSubscriptions
     * const NotificationSubscriptions = await prisma.notificationSubscriptions.create({
     *   data: {
     *     // ... data to create a NotificationSubscriptions
     *   }
     * })
     * 
    **/
    create<T extends NotificationSubscriptionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationSubscriptionsCreateArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NotificationSubscriptions.
     *     @param {NotificationSubscriptionsCreateManyArgs} args - Arguments to create many NotificationSubscriptions.
     *     @example
     *     // Create many NotificationSubscriptions
     *     const notificationSubscriptions = await prisma.notificationSubscriptions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationSubscriptionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationSubscriptionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationSubscriptions.
     * @param {NotificationSubscriptionsDeleteArgs} args - Arguments to delete one NotificationSubscriptions.
     * @example
     * // Delete one NotificationSubscriptions
     * const NotificationSubscriptions = await prisma.notificationSubscriptions.delete({
     *   where: {
     *     // ... filter to delete one NotificationSubscriptions
     *   }
     * })
     * 
    **/
    delete<T extends NotificationSubscriptionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationSubscriptionsDeleteArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NotificationSubscriptions.
     * @param {NotificationSubscriptionsUpdateArgs} args - Arguments to update one NotificationSubscriptions.
     * @example
     * // Update one NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationSubscriptionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationSubscriptionsUpdateArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NotificationSubscriptions.
     * @param {NotificationSubscriptionsDeleteManyArgs} args - Arguments to filter NotificationSubscriptions to delete.
     * @example
     * // Delete a few NotificationSubscriptions
     * const { count } = await prisma.notificationSubscriptions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationSubscriptionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationSubscriptionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSubscriptionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationSubscriptionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationSubscriptionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationSubscriptions.
     * @param {NotificationSubscriptionsUpsertArgs} args - Arguments to update or create a NotificationSubscriptions.
     * @example
     * // Update or create a NotificationSubscriptions
     * const notificationSubscriptions = await prisma.notificationSubscriptions.upsert({
     *   create: {
     *     // ... data to create a NotificationSubscriptions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationSubscriptions we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationSubscriptionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationSubscriptionsUpsertArgs<ExtArgs>>
    ): Prisma__NotificationSubscriptionsClient<$Result.GetResult<Prisma.$NotificationSubscriptionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NotificationSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSubscriptionsCountArgs} args - Arguments to filter NotificationSubscriptions to count.
     * @example
     * // Count the number of NotificationSubscriptions
     * const count = await prisma.notificationSubscriptions.count({
     *   where: {
     *     // ... the filter for the NotificationSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends NotificationSubscriptionsCountArgs>(
      args?: Subset<T, NotificationSubscriptionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationSubscriptionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSubscriptionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationSubscriptionsAggregateArgs>(args: Subset<T, NotificationSubscriptionsAggregateArgs>): Prisma.PrismaPromise<GetNotificationSubscriptionsAggregateType<T>>

    /**
     * Group by NotificationSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSubscriptionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationSubscriptionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationSubscriptionsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationSubscriptionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationSubscriptionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationSubscriptionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationSubscriptions model
   */
  readonly fields: NotificationSubscriptionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationSubscriptions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationSubscriptionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NotificationSubscriptions model
   */ 
  interface NotificationSubscriptionsFieldRefs {
    readonly id: FieldRef<"NotificationSubscriptions", 'Int'>
    readonly userId: FieldRef<"NotificationSubscriptions", 'String'>
    readonly subscription: FieldRef<"NotificationSubscriptions", 'String'>
    readonly createdAt: FieldRef<"NotificationSubscriptions", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationSubscriptions", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * NotificationSubscriptions findUnique
   */
  export type NotificationSubscriptionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSubscriptions to fetch.
     */
    where: NotificationSubscriptionsWhereUniqueInput
  }


  /**
   * NotificationSubscriptions findUniqueOrThrow
   */
  export type NotificationSubscriptionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSubscriptions to fetch.
     */
    where: NotificationSubscriptionsWhereUniqueInput
  }


  /**
   * NotificationSubscriptions findFirst
   */
  export type NotificationSubscriptionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSubscriptions to fetch.
     */
    where?: NotificationSubscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSubscriptions to fetch.
     */
    orderBy?: NotificationSubscriptionsOrderByWithRelationInput | NotificationSubscriptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSubscriptions.
     */
    cursor?: NotificationSubscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSubscriptions.
     */
    distinct?: NotificationSubscriptionsScalarFieldEnum | NotificationSubscriptionsScalarFieldEnum[]
  }


  /**
   * NotificationSubscriptions findFirstOrThrow
   */
  export type NotificationSubscriptionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSubscriptions to fetch.
     */
    where?: NotificationSubscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSubscriptions to fetch.
     */
    orderBy?: NotificationSubscriptionsOrderByWithRelationInput | NotificationSubscriptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSubscriptions.
     */
    cursor?: NotificationSubscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSubscriptions.
     */
    distinct?: NotificationSubscriptionsScalarFieldEnum | NotificationSubscriptionsScalarFieldEnum[]
  }


  /**
   * NotificationSubscriptions findMany
   */
  export type NotificationSubscriptionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSubscriptions to fetch.
     */
    where?: NotificationSubscriptionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSubscriptions to fetch.
     */
    orderBy?: NotificationSubscriptionsOrderByWithRelationInput | NotificationSubscriptionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationSubscriptions.
     */
    cursor?: NotificationSubscriptionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSubscriptions.
     */
    skip?: number
    distinct?: NotificationSubscriptionsScalarFieldEnum | NotificationSubscriptionsScalarFieldEnum[]
  }


  /**
   * NotificationSubscriptions create
   */
  export type NotificationSubscriptionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationSubscriptions.
     */
    data: XOR<NotificationSubscriptionsCreateInput, NotificationSubscriptionsUncheckedCreateInput>
  }


  /**
   * NotificationSubscriptions createMany
   */
  export type NotificationSubscriptionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationSubscriptions.
     */
    data: NotificationSubscriptionsCreateManyInput | NotificationSubscriptionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * NotificationSubscriptions update
   */
  export type NotificationSubscriptionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationSubscriptions.
     */
    data: XOR<NotificationSubscriptionsUpdateInput, NotificationSubscriptionsUncheckedUpdateInput>
    /**
     * Choose, which NotificationSubscriptions to update.
     */
    where: NotificationSubscriptionsWhereUniqueInput
  }


  /**
   * NotificationSubscriptions updateMany
   */
  export type NotificationSubscriptionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationSubscriptions.
     */
    data: XOR<NotificationSubscriptionsUpdateManyMutationInput, NotificationSubscriptionsUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSubscriptions to update
     */
    where?: NotificationSubscriptionsWhereInput
  }


  /**
   * NotificationSubscriptions upsert
   */
  export type NotificationSubscriptionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationSubscriptions to update in case it exists.
     */
    where: NotificationSubscriptionsWhereUniqueInput
    /**
     * In case the NotificationSubscriptions found by the `where` argument doesn't exist, create a new NotificationSubscriptions with this data.
     */
    create: XOR<NotificationSubscriptionsCreateInput, NotificationSubscriptionsUncheckedCreateInput>
    /**
     * In case the NotificationSubscriptions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationSubscriptionsUpdateInput, NotificationSubscriptionsUncheckedUpdateInput>
  }


  /**
   * NotificationSubscriptions delete
   */
  export type NotificationSubscriptionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
    /**
     * Filter which NotificationSubscriptions to delete.
     */
    where: NotificationSubscriptionsWhereUniqueInput
  }


  /**
   * NotificationSubscriptions deleteMany
   */
  export type NotificationSubscriptionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSubscriptions to delete
     */
    where?: NotificationSubscriptionsWhereInput
  }


  /**
   * NotificationSubscriptions without action
   */
  export type NotificationSubscriptionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSubscriptions
     */
    select?: NotificationSubscriptionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationSubscriptionsInclude<ExtArgs> | null
  }



  /**
   * Model VideoResource
   */

  export type AggregateVideoResource = {
    _count: VideoResourceCountAggregateOutputType | null
    _min: VideoResourceMinAggregateOutputType | null
    _max: VideoResourceMaxAggregateOutputType | null
  }

  export type VideoResourceMinAggregateOutputType = {
    id: string | null
    mediaId: string | null
    label: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoResourceMaxAggregateOutputType = {
    id: string | null
    mediaId: string | null
    label: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoResourceCountAggregateOutputType = {
    id: number
    mediaId: number
    label: number
    url: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VideoResourceMinAggregateInputType = {
    id?: true
    mediaId?: true
    label?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoResourceMaxAggregateInputType = {
    id?: true
    mediaId?: true
    label?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoResourceCountAggregateInputType = {
    id?: true
    mediaId?: true
    label?: true
    url?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VideoResourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VideoResource to aggregate.
     */
    where?: VideoResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoResources to fetch.
     */
    orderBy?: VideoResourceOrderByWithRelationInput | VideoResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VideoResources
    **/
    _count?: true | VideoResourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoResourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoResourceMaxAggregateInputType
  }

  export type GetVideoResourceAggregateType<T extends VideoResourceAggregateArgs> = {
        [P in keyof T & keyof AggregateVideoResource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideoResource[P]>
      : GetScalarType<T[P], AggregateVideoResource[P]>
  }




  export type VideoResourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoResourceWhereInput
    orderBy?: VideoResourceOrderByWithAggregationInput | VideoResourceOrderByWithAggregationInput[]
    by: VideoResourceScalarFieldEnum[] | VideoResourceScalarFieldEnum
    having?: VideoResourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoResourceCountAggregateInputType | true
    _min?: VideoResourceMinAggregateInputType
    _max?: VideoResourceMaxAggregateInputType
  }

  export type VideoResourceGroupByOutputType = {
    id: string
    mediaId: string
    label: string
    url: string
    createdAt: Date
    updatedAt: Date
    _count: VideoResourceCountAggregateOutputType | null
    _min: VideoResourceMinAggregateOutputType | null
    _max: VideoResourceMaxAggregateOutputType | null
  }

  type GetVideoResourceGroupByPayload<T extends VideoResourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoResourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoResourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoResourceGroupByOutputType[P]>
            : GetScalarType<T[P], VideoResourceGroupByOutputType[P]>
        }
      >
    >


  export type VideoResourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mediaId?: boolean
    label?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["videoResource"]>

  export type VideoResourceSelectScalar = {
    id?: boolean
    mediaId?: boolean
    label?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VideoResourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $VideoResourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VideoResource"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mediaId: string
      label: string
      url: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["videoResource"]>
    composites: {}
  }


  type VideoResourceGetPayload<S extends boolean | null | undefined | VideoResourceDefaultArgs> = $Result.GetResult<Prisma.$VideoResourcePayload, S>

  type VideoResourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VideoResourceFindManyArgs, 'select' | 'include'> & {
      select?: VideoResourceCountAggregateInputType | true
    }

  export interface VideoResourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VideoResource'], meta: { name: 'VideoResource' } }
    /**
     * Find zero or one VideoResource that matches the filter.
     * @param {VideoResourceFindUniqueArgs} args - Arguments to find a VideoResource
     * @example
     * // Get one VideoResource
     * const videoResource = await prisma.videoResource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VideoResourceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VideoResourceFindUniqueArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VideoResource that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VideoResourceFindUniqueOrThrowArgs} args - Arguments to find a VideoResource
     * @example
     * // Get one VideoResource
     * const videoResource = await prisma.videoResource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VideoResourceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoResourceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VideoResource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoResourceFindFirstArgs} args - Arguments to find a VideoResource
     * @example
     * // Get one VideoResource
     * const videoResource = await prisma.videoResource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VideoResourceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoResourceFindFirstArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VideoResource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoResourceFindFirstOrThrowArgs} args - Arguments to find a VideoResource
     * @example
     * // Get one VideoResource
     * const videoResource = await prisma.videoResource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VideoResourceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoResourceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VideoResources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoResourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VideoResources
     * const videoResources = await prisma.videoResource.findMany()
     * 
     * // Get first 10 VideoResources
     * const videoResources = await prisma.videoResource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoResourceWithIdOnly = await prisma.videoResource.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VideoResourceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoResourceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VideoResource.
     * @param {VideoResourceCreateArgs} args - Arguments to create a VideoResource.
     * @example
     * // Create one VideoResource
     * const VideoResource = await prisma.videoResource.create({
     *   data: {
     *     // ... data to create a VideoResource
     *   }
     * })
     * 
    **/
    create<T extends VideoResourceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VideoResourceCreateArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many VideoResources.
     *     @param {VideoResourceCreateManyArgs} args - Arguments to create many VideoResources.
     *     @example
     *     // Create many VideoResources
     *     const videoResource = await prisma.videoResource.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VideoResourceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoResourceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VideoResource.
     * @param {VideoResourceDeleteArgs} args - Arguments to delete one VideoResource.
     * @example
     * // Delete one VideoResource
     * const VideoResource = await prisma.videoResource.delete({
     *   where: {
     *     // ... filter to delete one VideoResource
     *   }
     * })
     * 
    **/
    delete<T extends VideoResourceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VideoResourceDeleteArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VideoResource.
     * @param {VideoResourceUpdateArgs} args - Arguments to update one VideoResource.
     * @example
     * // Update one VideoResource
     * const videoResource = await prisma.videoResource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VideoResourceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VideoResourceUpdateArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VideoResources.
     * @param {VideoResourceDeleteManyArgs} args - Arguments to filter VideoResources to delete.
     * @example
     * // Delete a few VideoResources
     * const { count } = await prisma.videoResource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VideoResourceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoResourceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VideoResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoResourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VideoResources
     * const videoResource = await prisma.videoResource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VideoResourceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VideoResourceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VideoResource.
     * @param {VideoResourceUpsertArgs} args - Arguments to update or create a VideoResource.
     * @example
     * // Update or create a VideoResource
     * const videoResource = await prisma.videoResource.upsert({
     *   create: {
     *     // ... data to create a VideoResource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VideoResource we want to update
     *   }
     * })
    **/
    upsert<T extends VideoResourceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VideoResourceUpsertArgs<ExtArgs>>
    ): Prisma__VideoResourceClient<$Result.GetResult<Prisma.$VideoResourcePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VideoResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoResourceCountArgs} args - Arguments to filter VideoResources to count.
     * @example
     * // Count the number of VideoResources
     * const count = await prisma.videoResource.count({
     *   where: {
     *     // ... the filter for the VideoResources we want to count
     *   }
     * })
    **/
    count<T extends VideoResourceCountArgs>(
      args?: Subset<T, VideoResourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoResourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VideoResource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoResourceAggregateArgs>(args: Subset<T, VideoResourceAggregateArgs>): Prisma.PrismaPromise<GetVideoResourceAggregateType<T>>

    /**
     * Group by VideoResource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoResourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoResourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoResourceGroupByArgs['orderBy'] }
        : { orderBy?: VideoResourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoResourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoResourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VideoResource model
   */
  readonly fields: VideoResourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VideoResource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoResourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the VideoResource model
   */ 
  interface VideoResourceFieldRefs {
    readonly id: FieldRef<"VideoResource", 'String'>
    readonly mediaId: FieldRef<"VideoResource", 'String'>
    readonly label: FieldRef<"VideoResource", 'String'>
    readonly url: FieldRef<"VideoResource", 'String'>
    readonly createdAt: FieldRef<"VideoResource", 'DateTime'>
    readonly updatedAt: FieldRef<"VideoResource", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * VideoResource findUnique
   */
  export type VideoResourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * Filter, which VideoResource to fetch.
     */
    where: VideoResourceWhereUniqueInput
  }


  /**
   * VideoResource findUniqueOrThrow
   */
  export type VideoResourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * Filter, which VideoResource to fetch.
     */
    where: VideoResourceWhereUniqueInput
  }


  /**
   * VideoResource findFirst
   */
  export type VideoResourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * Filter, which VideoResource to fetch.
     */
    where?: VideoResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoResources to fetch.
     */
    orderBy?: VideoResourceOrderByWithRelationInput | VideoResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VideoResources.
     */
    cursor?: VideoResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VideoResources.
     */
    distinct?: VideoResourceScalarFieldEnum | VideoResourceScalarFieldEnum[]
  }


  /**
   * VideoResource findFirstOrThrow
   */
  export type VideoResourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * Filter, which VideoResource to fetch.
     */
    where?: VideoResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoResources to fetch.
     */
    orderBy?: VideoResourceOrderByWithRelationInput | VideoResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VideoResources.
     */
    cursor?: VideoResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VideoResources.
     */
    distinct?: VideoResourceScalarFieldEnum | VideoResourceScalarFieldEnum[]
  }


  /**
   * VideoResource findMany
   */
  export type VideoResourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * Filter, which VideoResources to fetch.
     */
    where?: VideoResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoResources to fetch.
     */
    orderBy?: VideoResourceOrderByWithRelationInput | VideoResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VideoResources.
     */
    cursor?: VideoResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoResources.
     */
    skip?: number
    distinct?: VideoResourceScalarFieldEnum | VideoResourceScalarFieldEnum[]
  }


  /**
   * VideoResource create
   */
  export type VideoResourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * The data needed to create a VideoResource.
     */
    data: XOR<VideoResourceCreateInput, VideoResourceUncheckedCreateInput>
  }


  /**
   * VideoResource createMany
   */
  export type VideoResourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VideoResources.
     */
    data: VideoResourceCreateManyInput | VideoResourceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * VideoResource update
   */
  export type VideoResourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * The data needed to update a VideoResource.
     */
    data: XOR<VideoResourceUpdateInput, VideoResourceUncheckedUpdateInput>
    /**
     * Choose, which VideoResource to update.
     */
    where: VideoResourceWhereUniqueInput
  }


  /**
   * VideoResource updateMany
   */
  export type VideoResourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VideoResources.
     */
    data: XOR<VideoResourceUpdateManyMutationInput, VideoResourceUncheckedUpdateManyInput>
    /**
     * Filter which VideoResources to update
     */
    where?: VideoResourceWhereInput
  }


  /**
   * VideoResource upsert
   */
  export type VideoResourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * The filter to search for the VideoResource to update in case it exists.
     */
    where: VideoResourceWhereUniqueInput
    /**
     * In case the VideoResource found by the `where` argument doesn't exist, create a new VideoResource with this data.
     */
    create: XOR<VideoResourceCreateInput, VideoResourceUncheckedCreateInput>
    /**
     * In case the VideoResource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoResourceUpdateInput, VideoResourceUncheckedUpdateInput>
  }


  /**
   * VideoResource delete
   */
  export type VideoResourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
    /**
     * Filter which VideoResource to delete.
     */
    where: VideoResourceWhereUniqueInput
  }


  /**
   * VideoResource deleteMany
   */
  export type VideoResourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VideoResources to delete
     */
    where?: VideoResourceWhereInput
  }


  /**
   * VideoResource without action
   */
  export type VideoResourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoResource
     */
    select?: VideoResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoResourceInclude<ExtArgs> | null
  }



  /**
   * Model AudioResource
   */

  export type AggregateAudioResource = {
    _count: AudioResourceCountAggregateOutputType | null
    _min: AudioResourceMinAggregateOutputType | null
    _max: AudioResourceMaxAggregateOutputType | null
  }

  export type AudioResourceMinAggregateOutputType = {
    id: string | null
    mediaId: string | null
    label: $Enums.AudioQuality | null
    fileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AudioResourceMaxAggregateOutputType = {
    id: string | null
    mediaId: string | null
    label: $Enums.AudioQuality | null
    fileId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AudioResourceCountAggregateOutputType = {
    id: number
    mediaId: number
    label: number
    fileId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AudioResourceMinAggregateInputType = {
    id?: true
    mediaId?: true
    label?: true
    fileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AudioResourceMaxAggregateInputType = {
    id?: true
    mediaId?: true
    label?: true
    fileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AudioResourceCountAggregateInputType = {
    id?: true
    mediaId?: true
    label?: true
    fileId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AudioResourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AudioResource to aggregate.
     */
    where?: AudioResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioResources to fetch.
     */
    orderBy?: AudioResourceOrderByWithRelationInput | AudioResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AudioResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AudioResources
    **/
    _count?: true | AudioResourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AudioResourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AudioResourceMaxAggregateInputType
  }

  export type GetAudioResourceAggregateType<T extends AudioResourceAggregateArgs> = {
        [P in keyof T & keyof AggregateAudioResource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAudioResource[P]>
      : GetScalarType<T[P], AggregateAudioResource[P]>
  }




  export type AudioResourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AudioResourceWhereInput
    orderBy?: AudioResourceOrderByWithAggregationInput | AudioResourceOrderByWithAggregationInput[]
    by: AudioResourceScalarFieldEnum[] | AudioResourceScalarFieldEnum
    having?: AudioResourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AudioResourceCountAggregateInputType | true
    _min?: AudioResourceMinAggregateInputType
    _max?: AudioResourceMaxAggregateInputType
  }

  export type AudioResourceGroupByOutputType = {
    id: string
    mediaId: string
    label: $Enums.AudioQuality
    fileId: string
    createdAt: Date
    updatedAt: Date
    _count: AudioResourceCountAggregateOutputType | null
    _min: AudioResourceMinAggregateOutputType | null
    _max: AudioResourceMaxAggregateOutputType | null
  }

  type GetAudioResourceGroupByPayload<T extends AudioResourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AudioResourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AudioResourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AudioResourceGroupByOutputType[P]>
            : GetScalarType<T[P], AudioResourceGroupByOutputType[P]>
        }
      >
    >


  export type AudioResourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mediaId?: boolean
    label?: boolean
    fileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["audioResource"]>

  export type AudioResourceSelectScalar = {
    id?: boolean
    mediaId?: boolean
    label?: boolean
    fileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AudioResourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $AudioResourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AudioResource"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mediaId: string
      label: $Enums.AudioQuality
      fileId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["audioResource"]>
    composites: {}
  }


  type AudioResourceGetPayload<S extends boolean | null | undefined | AudioResourceDefaultArgs> = $Result.GetResult<Prisma.$AudioResourcePayload, S>

  type AudioResourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AudioResourceFindManyArgs, 'select' | 'include'> & {
      select?: AudioResourceCountAggregateInputType | true
    }

  export interface AudioResourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AudioResource'], meta: { name: 'AudioResource' } }
    /**
     * Find zero or one AudioResource that matches the filter.
     * @param {AudioResourceFindUniqueArgs} args - Arguments to find a AudioResource
     * @example
     * // Get one AudioResource
     * const audioResource = await prisma.audioResource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AudioResourceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AudioResourceFindUniqueArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AudioResource that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AudioResourceFindUniqueOrThrowArgs} args - Arguments to find a AudioResource
     * @example
     * // Get one AudioResource
     * const audioResource = await prisma.audioResource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AudioResourceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AudioResourceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AudioResource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioResourceFindFirstArgs} args - Arguments to find a AudioResource
     * @example
     * // Get one AudioResource
     * const audioResource = await prisma.audioResource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AudioResourceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AudioResourceFindFirstArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AudioResource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioResourceFindFirstOrThrowArgs} args - Arguments to find a AudioResource
     * @example
     * // Get one AudioResource
     * const audioResource = await prisma.audioResource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AudioResourceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AudioResourceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AudioResources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioResourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AudioResources
     * const audioResources = await prisma.audioResource.findMany()
     * 
     * // Get first 10 AudioResources
     * const audioResources = await prisma.audioResource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const audioResourceWithIdOnly = await prisma.audioResource.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AudioResourceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AudioResourceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AudioResource.
     * @param {AudioResourceCreateArgs} args - Arguments to create a AudioResource.
     * @example
     * // Create one AudioResource
     * const AudioResource = await prisma.audioResource.create({
     *   data: {
     *     // ... data to create a AudioResource
     *   }
     * })
     * 
    **/
    create<T extends AudioResourceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AudioResourceCreateArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AudioResources.
     *     @param {AudioResourceCreateManyArgs} args - Arguments to create many AudioResources.
     *     @example
     *     // Create many AudioResources
     *     const audioResource = await prisma.audioResource.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AudioResourceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AudioResourceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AudioResource.
     * @param {AudioResourceDeleteArgs} args - Arguments to delete one AudioResource.
     * @example
     * // Delete one AudioResource
     * const AudioResource = await prisma.audioResource.delete({
     *   where: {
     *     // ... filter to delete one AudioResource
     *   }
     * })
     * 
    **/
    delete<T extends AudioResourceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AudioResourceDeleteArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AudioResource.
     * @param {AudioResourceUpdateArgs} args - Arguments to update one AudioResource.
     * @example
     * // Update one AudioResource
     * const audioResource = await prisma.audioResource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AudioResourceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AudioResourceUpdateArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AudioResources.
     * @param {AudioResourceDeleteManyArgs} args - Arguments to filter AudioResources to delete.
     * @example
     * // Delete a few AudioResources
     * const { count } = await prisma.audioResource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AudioResourceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AudioResourceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AudioResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioResourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AudioResources
     * const audioResource = await prisma.audioResource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AudioResourceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AudioResourceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AudioResource.
     * @param {AudioResourceUpsertArgs} args - Arguments to update or create a AudioResource.
     * @example
     * // Update or create a AudioResource
     * const audioResource = await prisma.audioResource.upsert({
     *   create: {
     *     // ... data to create a AudioResource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AudioResource we want to update
     *   }
     * })
    **/
    upsert<T extends AudioResourceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AudioResourceUpsertArgs<ExtArgs>>
    ): Prisma__AudioResourceClient<$Result.GetResult<Prisma.$AudioResourcePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AudioResources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioResourceCountArgs} args - Arguments to filter AudioResources to count.
     * @example
     * // Count the number of AudioResources
     * const count = await prisma.audioResource.count({
     *   where: {
     *     // ... the filter for the AudioResources we want to count
     *   }
     * })
    **/
    count<T extends AudioResourceCountArgs>(
      args?: Subset<T, AudioResourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AudioResourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AudioResource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioResourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AudioResourceAggregateArgs>(args: Subset<T, AudioResourceAggregateArgs>): Prisma.PrismaPromise<GetAudioResourceAggregateType<T>>

    /**
     * Group by AudioResource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AudioResourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AudioResourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AudioResourceGroupByArgs['orderBy'] }
        : { orderBy?: AudioResourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AudioResourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAudioResourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AudioResource model
   */
  readonly fields: AudioResourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AudioResource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AudioResourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AudioResource model
   */ 
  interface AudioResourceFieldRefs {
    readonly id: FieldRef<"AudioResource", 'String'>
    readonly mediaId: FieldRef<"AudioResource", 'String'>
    readonly label: FieldRef<"AudioResource", 'AudioQuality'>
    readonly fileId: FieldRef<"AudioResource", 'String'>
    readonly createdAt: FieldRef<"AudioResource", 'DateTime'>
    readonly updatedAt: FieldRef<"AudioResource", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * AudioResource findUnique
   */
  export type AudioResourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * Filter, which AudioResource to fetch.
     */
    where: AudioResourceWhereUniqueInput
  }


  /**
   * AudioResource findUniqueOrThrow
   */
  export type AudioResourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * Filter, which AudioResource to fetch.
     */
    where: AudioResourceWhereUniqueInput
  }


  /**
   * AudioResource findFirst
   */
  export type AudioResourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * Filter, which AudioResource to fetch.
     */
    where?: AudioResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioResources to fetch.
     */
    orderBy?: AudioResourceOrderByWithRelationInput | AudioResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AudioResources.
     */
    cursor?: AudioResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AudioResources.
     */
    distinct?: AudioResourceScalarFieldEnum | AudioResourceScalarFieldEnum[]
  }


  /**
   * AudioResource findFirstOrThrow
   */
  export type AudioResourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * Filter, which AudioResource to fetch.
     */
    where?: AudioResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioResources to fetch.
     */
    orderBy?: AudioResourceOrderByWithRelationInput | AudioResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AudioResources.
     */
    cursor?: AudioResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioResources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AudioResources.
     */
    distinct?: AudioResourceScalarFieldEnum | AudioResourceScalarFieldEnum[]
  }


  /**
   * AudioResource findMany
   */
  export type AudioResourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * Filter, which AudioResources to fetch.
     */
    where?: AudioResourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AudioResources to fetch.
     */
    orderBy?: AudioResourceOrderByWithRelationInput | AudioResourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AudioResources.
     */
    cursor?: AudioResourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AudioResources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AudioResources.
     */
    skip?: number
    distinct?: AudioResourceScalarFieldEnum | AudioResourceScalarFieldEnum[]
  }


  /**
   * AudioResource create
   */
  export type AudioResourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * The data needed to create a AudioResource.
     */
    data: XOR<AudioResourceCreateInput, AudioResourceUncheckedCreateInput>
  }


  /**
   * AudioResource createMany
   */
  export type AudioResourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AudioResources.
     */
    data: AudioResourceCreateManyInput | AudioResourceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * AudioResource update
   */
  export type AudioResourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * The data needed to update a AudioResource.
     */
    data: XOR<AudioResourceUpdateInput, AudioResourceUncheckedUpdateInput>
    /**
     * Choose, which AudioResource to update.
     */
    where: AudioResourceWhereUniqueInput
  }


  /**
   * AudioResource updateMany
   */
  export type AudioResourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AudioResources.
     */
    data: XOR<AudioResourceUpdateManyMutationInput, AudioResourceUncheckedUpdateManyInput>
    /**
     * Filter which AudioResources to update
     */
    where?: AudioResourceWhereInput
  }


  /**
   * AudioResource upsert
   */
  export type AudioResourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * The filter to search for the AudioResource to update in case it exists.
     */
    where: AudioResourceWhereUniqueInput
    /**
     * In case the AudioResource found by the `where` argument doesn't exist, create a new AudioResource with this data.
     */
    create: XOR<AudioResourceCreateInput, AudioResourceUncheckedCreateInput>
    /**
     * In case the AudioResource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AudioResourceUpdateInput, AudioResourceUncheckedUpdateInput>
  }


  /**
   * AudioResource delete
   */
  export type AudioResourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
    /**
     * Filter which AudioResource to delete.
     */
    where: AudioResourceWhereUniqueInput
  }


  /**
   * AudioResource deleteMany
   */
  export type AudioResourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AudioResources to delete
     */
    where?: AudioResourceWhereInput
  }


  /**
   * AudioResource without action
   */
  export type AudioResourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AudioResource
     */
    select?: AudioResourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AudioResourceInclude<ExtArgs> | null
  }



  /**
   * Model MediaDetail
   */

  export type AggregateMediaDetail = {
    _count: MediaDetailCountAggregateOutputType | null
    _min: MediaDetailMinAggregateOutputType | null
    _max: MediaDetailMaxAggregateOutputType | null
  }

  export type MediaDetailMinAggregateOutputType = {
    id: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaDetailMaxAggregateOutputType = {
    id: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaDetailCountAggregateOutputType = {
    id: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MediaDetailMinAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaDetailMaxAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaDetailCountAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MediaDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaDetail to aggregate.
     */
    where?: MediaDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaDetails to fetch.
     */
    orderBy?: MediaDetailOrderByWithRelationInput | MediaDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaDetails
    **/
    _count?: true | MediaDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaDetailMaxAggregateInputType
  }

  export type GetMediaDetailAggregateType<T extends MediaDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaDetail[P]>
      : GetScalarType<T[P], AggregateMediaDetail[P]>
  }




  export type MediaDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaDetailWhereInput
    orderBy?: MediaDetailOrderByWithAggregationInput | MediaDetailOrderByWithAggregationInput[]
    by: MediaDetailScalarFieldEnum[] | MediaDetailScalarFieldEnum
    having?: MediaDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaDetailCountAggregateInputType | true
    _min?: MediaDetailMinAggregateInputType
    _max?: MediaDetailMaxAggregateInputType
  }

  export type MediaDetailGroupByOutputType = {
    id: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: MediaDetailCountAggregateOutputType | null
    _min: MediaDetailMinAggregateOutputType | null
    _max: MediaDetailMaxAggregateOutputType | null
  }

  type GetMediaDetailGroupByPayload<T extends MediaDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaDetailGroupByOutputType[P]>
            : GetScalarType<T[P], MediaDetailGroupByOutputType[P]>
        }
      >
    >


  export type MediaDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaDetail"]>

  export type MediaDetailSelectScalar = {
    id?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MediaDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $MediaDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaDetail"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mediaDetail"]>
    composites: {}
  }


  type MediaDetailGetPayload<S extends boolean | null | undefined | MediaDetailDefaultArgs> = $Result.GetResult<Prisma.$MediaDetailPayload, S>

  type MediaDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaDetailFindManyArgs, 'select' | 'include'> & {
      select?: MediaDetailCountAggregateInputType | true
    }

  export interface MediaDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaDetail'], meta: { name: 'MediaDetail' } }
    /**
     * Find zero or one MediaDetail that matches the filter.
     * @param {MediaDetailFindUniqueArgs} args - Arguments to find a MediaDetail
     * @example
     * // Get one MediaDetail
     * const mediaDetail = await prisma.mediaDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MediaDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MediaDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MediaDetailFindUniqueOrThrowArgs} args - Arguments to find a MediaDetail
     * @example
     * // Get one MediaDetail
     * const mediaDetail = await prisma.mediaDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MediaDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MediaDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaDetailFindFirstArgs} args - Arguments to find a MediaDetail
     * @example
     * // Get one MediaDetail
     * const mediaDetail = await prisma.mediaDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MediaDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDetailFindFirstArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MediaDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaDetailFindFirstOrThrowArgs} args - Arguments to find a MediaDetail
     * @example
     * // Get one MediaDetail
     * const mediaDetail = await prisma.mediaDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MediaDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MediaDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaDetails
     * const mediaDetails = await prisma.mediaDetail.findMany()
     * 
     * // Get first 10 MediaDetails
     * const mediaDetails = await prisma.mediaDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaDetailWithIdOnly = await prisma.mediaDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MediaDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MediaDetail.
     * @param {MediaDetailCreateArgs} args - Arguments to create a MediaDetail.
     * @example
     * // Create one MediaDetail
     * const MediaDetail = await prisma.mediaDetail.create({
     *   data: {
     *     // ... data to create a MediaDetail
     *   }
     * })
     * 
    **/
    create<T extends MediaDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDetailCreateArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MediaDetails.
     *     @param {MediaDetailCreateManyArgs} args - Arguments to create many MediaDetails.
     *     @example
     *     // Create many MediaDetails
     *     const mediaDetail = await prisma.mediaDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MediaDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MediaDetail.
     * @param {MediaDetailDeleteArgs} args - Arguments to delete one MediaDetail.
     * @example
     * // Delete one MediaDetail
     * const MediaDetail = await prisma.mediaDetail.delete({
     *   where: {
     *     // ... filter to delete one MediaDetail
     *   }
     * })
     * 
    **/
    delete<T extends MediaDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDetailDeleteArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MediaDetail.
     * @param {MediaDetailUpdateArgs} args - Arguments to update one MediaDetail.
     * @example
     * // Update one MediaDetail
     * const mediaDetail = await prisma.mediaDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MediaDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDetailUpdateArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MediaDetails.
     * @param {MediaDetailDeleteManyArgs} args - Arguments to filter MediaDetails to delete.
     * @example
     * // Delete a few MediaDetails
     * const { count } = await prisma.mediaDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MediaDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaDetails
     * const mediaDetail = await prisma.mediaDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MediaDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MediaDetail.
     * @param {MediaDetailUpsertArgs} args - Arguments to update or create a MediaDetail.
     * @example
     * // Update or create a MediaDetail
     * const mediaDetail = await prisma.mediaDetail.upsert({
     *   create: {
     *     // ... data to create a MediaDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaDetail we want to update
     *   }
     * })
    **/
    upsert<T extends MediaDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MediaDetailUpsertArgs<ExtArgs>>
    ): Prisma__MediaDetailClient<$Result.GetResult<Prisma.$MediaDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MediaDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaDetailCountArgs} args - Arguments to filter MediaDetails to count.
     * @example
     * // Count the number of MediaDetails
     * const count = await prisma.mediaDetail.count({
     *   where: {
     *     // ... the filter for the MediaDetails we want to count
     *   }
     * })
    **/
    count<T extends MediaDetailCountArgs>(
      args?: Subset<T, MediaDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaDetailAggregateArgs>(args: Subset<T, MediaDetailAggregateArgs>): Prisma.PrismaPromise<GetMediaDetailAggregateType<T>>

    /**
     * Group by MediaDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaDetailGroupByArgs['orderBy'] }
        : { orderBy?: MediaDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaDetail model
   */
  readonly fields: MediaDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MediaDetail model
   */ 
  interface MediaDetailFieldRefs {
    readonly id: FieldRef<"MediaDetail", 'String'>
    readonly description: FieldRef<"MediaDetail", 'String'>
    readonly createdAt: FieldRef<"MediaDetail", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaDetail", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MediaDetail findUnique
   */
  export type MediaDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * Filter, which MediaDetail to fetch.
     */
    where: MediaDetailWhereUniqueInput
  }


  /**
   * MediaDetail findUniqueOrThrow
   */
  export type MediaDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * Filter, which MediaDetail to fetch.
     */
    where: MediaDetailWhereUniqueInput
  }


  /**
   * MediaDetail findFirst
   */
  export type MediaDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * Filter, which MediaDetail to fetch.
     */
    where?: MediaDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaDetails to fetch.
     */
    orderBy?: MediaDetailOrderByWithRelationInput | MediaDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaDetails.
     */
    cursor?: MediaDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaDetails.
     */
    distinct?: MediaDetailScalarFieldEnum | MediaDetailScalarFieldEnum[]
  }


  /**
   * MediaDetail findFirstOrThrow
   */
  export type MediaDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * Filter, which MediaDetail to fetch.
     */
    where?: MediaDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaDetails to fetch.
     */
    orderBy?: MediaDetailOrderByWithRelationInput | MediaDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaDetails.
     */
    cursor?: MediaDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaDetails.
     */
    distinct?: MediaDetailScalarFieldEnum | MediaDetailScalarFieldEnum[]
  }


  /**
   * MediaDetail findMany
   */
  export type MediaDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * Filter, which MediaDetails to fetch.
     */
    where?: MediaDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaDetails to fetch.
     */
    orderBy?: MediaDetailOrderByWithRelationInput | MediaDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaDetails.
     */
    cursor?: MediaDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaDetails.
     */
    skip?: number
    distinct?: MediaDetailScalarFieldEnum | MediaDetailScalarFieldEnum[]
  }


  /**
   * MediaDetail create
   */
  export type MediaDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaDetail.
     */
    data: XOR<MediaDetailCreateInput, MediaDetailUncheckedCreateInput>
  }


  /**
   * MediaDetail createMany
   */
  export type MediaDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaDetails.
     */
    data: MediaDetailCreateManyInput | MediaDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MediaDetail update
   */
  export type MediaDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaDetail.
     */
    data: XOR<MediaDetailUpdateInput, MediaDetailUncheckedUpdateInput>
    /**
     * Choose, which MediaDetail to update.
     */
    where: MediaDetailWhereUniqueInput
  }


  /**
   * MediaDetail updateMany
   */
  export type MediaDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaDetails.
     */
    data: XOR<MediaDetailUpdateManyMutationInput, MediaDetailUncheckedUpdateManyInput>
    /**
     * Filter which MediaDetails to update
     */
    where?: MediaDetailWhereInput
  }


  /**
   * MediaDetail upsert
   */
  export type MediaDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaDetail to update in case it exists.
     */
    where: MediaDetailWhereUniqueInput
    /**
     * In case the MediaDetail found by the `where` argument doesn't exist, create a new MediaDetail with this data.
     */
    create: XOR<MediaDetailCreateInput, MediaDetailUncheckedCreateInput>
    /**
     * In case the MediaDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaDetailUpdateInput, MediaDetailUncheckedUpdateInput>
  }


  /**
   * MediaDetail delete
   */
  export type MediaDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
    /**
     * Filter which MediaDetail to delete.
     */
    where: MediaDetailWhereUniqueInput
  }


  /**
   * MediaDetail deleteMany
   */
  export type MediaDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaDetails to delete
     */
    where?: MediaDetailWhereInput
  }


  /**
   * MediaDetail without action
   */
  export type MediaDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaDetail
     */
    select?: MediaDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaDetailInclude<ExtArgs> | null
  }



  /**
   * Model Thumbnail
   */

  export type AggregateThumbnail = {
    _count: ThumbnailCountAggregateOutputType | null
    _min: ThumbnailMinAggregateOutputType | null
    _max: ThumbnailMaxAggregateOutputType | null
  }

  export type ThumbnailMinAggregateOutputType = {
    id: string | null
    url: string | null
    isPrimary: boolean | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThumbnailMaxAggregateOutputType = {
    id: string | null
    url: string | null
    isPrimary: boolean | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ThumbnailCountAggregateOutputType = {
    id: number
    url: number
    isPrimary: number
    mediaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ThumbnailMinAggregateInputType = {
    id?: true
    url?: true
    isPrimary?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThumbnailMaxAggregateInputType = {
    id?: true
    url?: true
    isPrimary?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ThumbnailCountAggregateInputType = {
    id?: true
    url?: true
    isPrimary?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ThumbnailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Thumbnail to aggregate.
     */
    where?: ThumbnailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Thumbnails to fetch.
     */
    orderBy?: ThumbnailOrderByWithRelationInput | ThumbnailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThumbnailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Thumbnails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Thumbnails
    **/
    _count?: true | ThumbnailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThumbnailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThumbnailMaxAggregateInputType
  }

  export type GetThumbnailAggregateType<T extends ThumbnailAggregateArgs> = {
        [P in keyof T & keyof AggregateThumbnail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThumbnail[P]>
      : GetScalarType<T[P], AggregateThumbnail[P]>
  }




  export type ThumbnailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThumbnailWhereInput
    orderBy?: ThumbnailOrderByWithAggregationInput | ThumbnailOrderByWithAggregationInput[]
    by: ThumbnailScalarFieldEnum[] | ThumbnailScalarFieldEnum
    having?: ThumbnailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThumbnailCountAggregateInputType | true
    _min?: ThumbnailMinAggregateInputType
    _max?: ThumbnailMaxAggregateInputType
  }

  export type ThumbnailGroupByOutputType = {
    id: string
    url: string
    isPrimary: boolean
    mediaId: string
    createdAt: Date
    updatedAt: Date
    _count: ThumbnailCountAggregateOutputType | null
    _min: ThumbnailMinAggregateOutputType | null
    _max: ThumbnailMaxAggregateOutputType | null
  }

  type GetThumbnailGroupByPayload<T extends ThumbnailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThumbnailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThumbnailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThumbnailGroupByOutputType[P]>
            : GetScalarType<T[P], ThumbnailGroupByOutputType[P]>
        }
      >
    >


  export type ThumbnailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    isPrimary?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["thumbnail"]>

  export type ThumbnailSelectScalar = {
    id?: boolean
    url?: boolean
    isPrimary?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ThumbnailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | MediaDefaultArgs<ExtArgs>
  }


  export type $ThumbnailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Thumbnail"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      isPrimary: boolean
      mediaId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["thumbnail"]>
    composites: {}
  }


  type ThumbnailGetPayload<S extends boolean | null | undefined | ThumbnailDefaultArgs> = $Result.GetResult<Prisma.$ThumbnailPayload, S>

  type ThumbnailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ThumbnailFindManyArgs, 'select' | 'include'> & {
      select?: ThumbnailCountAggregateInputType | true
    }

  export interface ThumbnailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Thumbnail'], meta: { name: 'Thumbnail' } }
    /**
     * Find zero or one Thumbnail that matches the filter.
     * @param {ThumbnailFindUniqueArgs} args - Arguments to find a Thumbnail
     * @example
     * // Get one Thumbnail
     * const thumbnail = await prisma.thumbnail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThumbnailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThumbnailFindUniqueArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Thumbnail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThumbnailFindUniqueOrThrowArgs} args - Arguments to find a Thumbnail
     * @example
     * // Get one Thumbnail
     * const thumbnail = await prisma.thumbnail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThumbnailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThumbnailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Thumbnail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailFindFirstArgs} args - Arguments to find a Thumbnail
     * @example
     * // Get one Thumbnail
     * const thumbnail = await prisma.thumbnail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThumbnailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThumbnailFindFirstArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Thumbnail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailFindFirstOrThrowArgs} args - Arguments to find a Thumbnail
     * @example
     * // Get one Thumbnail
     * const thumbnail = await prisma.thumbnail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThumbnailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThumbnailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Thumbnails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Thumbnails
     * const thumbnails = await prisma.thumbnail.findMany()
     * 
     * // Get first 10 Thumbnails
     * const thumbnails = await prisma.thumbnail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const thumbnailWithIdOnly = await prisma.thumbnail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThumbnailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThumbnailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Thumbnail.
     * @param {ThumbnailCreateArgs} args - Arguments to create a Thumbnail.
     * @example
     * // Create one Thumbnail
     * const Thumbnail = await prisma.thumbnail.create({
     *   data: {
     *     // ... data to create a Thumbnail
     *   }
     * })
     * 
    **/
    create<T extends ThumbnailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThumbnailCreateArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Thumbnails.
     *     @param {ThumbnailCreateManyArgs} args - Arguments to create many Thumbnails.
     *     @example
     *     // Create many Thumbnails
     *     const thumbnail = await prisma.thumbnail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThumbnailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThumbnailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Thumbnail.
     * @param {ThumbnailDeleteArgs} args - Arguments to delete one Thumbnail.
     * @example
     * // Delete one Thumbnail
     * const Thumbnail = await prisma.thumbnail.delete({
     *   where: {
     *     // ... filter to delete one Thumbnail
     *   }
     * })
     * 
    **/
    delete<T extends ThumbnailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThumbnailDeleteArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Thumbnail.
     * @param {ThumbnailUpdateArgs} args - Arguments to update one Thumbnail.
     * @example
     * // Update one Thumbnail
     * const thumbnail = await prisma.thumbnail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThumbnailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThumbnailUpdateArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Thumbnails.
     * @param {ThumbnailDeleteManyArgs} args - Arguments to filter Thumbnails to delete.
     * @example
     * // Delete a few Thumbnails
     * const { count } = await prisma.thumbnail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThumbnailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThumbnailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Thumbnails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Thumbnails
     * const thumbnail = await prisma.thumbnail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThumbnailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThumbnailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Thumbnail.
     * @param {ThumbnailUpsertArgs} args - Arguments to update or create a Thumbnail.
     * @example
     * // Update or create a Thumbnail
     * const thumbnail = await prisma.thumbnail.upsert({
     *   create: {
     *     // ... data to create a Thumbnail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Thumbnail we want to update
     *   }
     * })
    **/
    upsert<T extends ThumbnailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThumbnailUpsertArgs<ExtArgs>>
    ): Prisma__ThumbnailClient<$Result.GetResult<Prisma.$ThumbnailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Thumbnails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailCountArgs} args - Arguments to filter Thumbnails to count.
     * @example
     * // Count the number of Thumbnails
     * const count = await prisma.thumbnail.count({
     *   where: {
     *     // ... the filter for the Thumbnails we want to count
     *   }
     * })
    **/
    count<T extends ThumbnailCountArgs>(
      args?: Subset<T, ThumbnailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThumbnailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Thumbnail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThumbnailAggregateArgs>(args: Subset<T, ThumbnailAggregateArgs>): Prisma.PrismaPromise<GetThumbnailAggregateType<T>>

    /**
     * Group by Thumbnail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThumbnailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThumbnailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThumbnailGroupByArgs['orderBy'] }
        : { orderBy?: ThumbnailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThumbnailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThumbnailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Thumbnail model
   */
  readonly fields: ThumbnailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Thumbnail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThumbnailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Thumbnail model
   */ 
  interface ThumbnailFieldRefs {
    readonly id: FieldRef<"Thumbnail", 'String'>
    readonly url: FieldRef<"Thumbnail", 'String'>
    readonly isPrimary: FieldRef<"Thumbnail", 'Boolean'>
    readonly mediaId: FieldRef<"Thumbnail", 'String'>
    readonly createdAt: FieldRef<"Thumbnail", 'DateTime'>
    readonly updatedAt: FieldRef<"Thumbnail", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Thumbnail findUnique
   */
  export type ThumbnailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * Filter, which Thumbnail to fetch.
     */
    where: ThumbnailWhereUniqueInput
  }


  /**
   * Thumbnail findUniqueOrThrow
   */
  export type ThumbnailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * Filter, which Thumbnail to fetch.
     */
    where: ThumbnailWhereUniqueInput
  }


  /**
   * Thumbnail findFirst
   */
  export type ThumbnailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * Filter, which Thumbnail to fetch.
     */
    where?: ThumbnailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Thumbnails to fetch.
     */
    orderBy?: ThumbnailOrderByWithRelationInput | ThumbnailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Thumbnails.
     */
    cursor?: ThumbnailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Thumbnails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Thumbnails.
     */
    distinct?: ThumbnailScalarFieldEnum | ThumbnailScalarFieldEnum[]
  }


  /**
   * Thumbnail findFirstOrThrow
   */
  export type ThumbnailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * Filter, which Thumbnail to fetch.
     */
    where?: ThumbnailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Thumbnails to fetch.
     */
    orderBy?: ThumbnailOrderByWithRelationInput | ThumbnailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Thumbnails.
     */
    cursor?: ThumbnailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Thumbnails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Thumbnails.
     */
    distinct?: ThumbnailScalarFieldEnum | ThumbnailScalarFieldEnum[]
  }


  /**
   * Thumbnail findMany
   */
  export type ThumbnailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * Filter, which Thumbnails to fetch.
     */
    where?: ThumbnailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Thumbnails to fetch.
     */
    orderBy?: ThumbnailOrderByWithRelationInput | ThumbnailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Thumbnails.
     */
    cursor?: ThumbnailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Thumbnails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Thumbnails.
     */
    skip?: number
    distinct?: ThumbnailScalarFieldEnum | ThumbnailScalarFieldEnum[]
  }


  /**
   * Thumbnail create
   */
  export type ThumbnailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * The data needed to create a Thumbnail.
     */
    data: XOR<ThumbnailCreateInput, ThumbnailUncheckedCreateInput>
  }


  /**
   * Thumbnail createMany
   */
  export type ThumbnailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Thumbnails.
     */
    data: ThumbnailCreateManyInput | ThumbnailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Thumbnail update
   */
  export type ThumbnailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * The data needed to update a Thumbnail.
     */
    data: XOR<ThumbnailUpdateInput, ThumbnailUncheckedUpdateInput>
    /**
     * Choose, which Thumbnail to update.
     */
    where: ThumbnailWhereUniqueInput
  }


  /**
   * Thumbnail updateMany
   */
  export type ThumbnailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Thumbnails.
     */
    data: XOR<ThumbnailUpdateManyMutationInput, ThumbnailUncheckedUpdateManyInput>
    /**
     * Filter which Thumbnails to update
     */
    where?: ThumbnailWhereInput
  }


  /**
   * Thumbnail upsert
   */
  export type ThumbnailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * The filter to search for the Thumbnail to update in case it exists.
     */
    where: ThumbnailWhereUniqueInput
    /**
     * In case the Thumbnail found by the `where` argument doesn't exist, create a new Thumbnail with this data.
     */
    create: XOR<ThumbnailCreateInput, ThumbnailUncheckedCreateInput>
    /**
     * In case the Thumbnail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThumbnailUpdateInput, ThumbnailUncheckedUpdateInput>
  }


  /**
   * Thumbnail delete
   */
  export type ThumbnailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
    /**
     * Filter which Thumbnail to delete.
     */
    where: ThumbnailWhereUniqueInput
  }


  /**
   * Thumbnail deleteMany
   */
  export type ThumbnailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Thumbnails to delete
     */
    where?: ThumbnailWhereInput
  }


  /**
   * Thumbnail without action
   */
  export type ThumbnailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Thumbnail
     */
    select?: ThumbnailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThumbnailInclude<ExtArgs> | null
  }



  /**
   * Model PaymentTransaction
   */

  export type AggregatePaymentTransaction = {
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  export type PaymentTransactionAvgAggregateOutputType = {
    id: number | null
  }

  export type PaymentTransactionSumAggregateOutputType = {
    id: number | null
  }

  export type PaymentTransactionMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentTransactionAvgAggregateInputType = {
    id?: true
  }

  export type PaymentTransactionSumAggregateInputType = {
    id?: true
  }

  export type PaymentTransactionMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransaction to aggregate.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentTransactions
    **/
    _count?: true | PaymentTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type GetPaymentTransactionAggregateType<T extends PaymentTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentTransaction[P]>
      : GetScalarType<T[P], AggregatePaymentTransaction[P]>
  }




  export type PaymentTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithAggregationInput | PaymentTransactionOrderByWithAggregationInput[]
    by: PaymentTransactionScalarFieldEnum[] | PaymentTransactionScalarFieldEnum
    having?: PaymentTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentTransactionCountAggregateInputType | true
    _avg?: PaymentTransactionAvgAggregateInputType
    _sum?: PaymentTransactionSumAggregateInputType
    _min?: PaymentTransactionMinAggregateInputType
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type PaymentTransactionGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  type GetPaymentTransactionGroupByPayload<T extends PaymentTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
        }
      >
    >


  export type PaymentTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    PaymentTransactionDetail?: boolean | PaymentTransaction$PaymentTransactionDetailArgs<ExtArgs>
    _count?: boolean | PaymentTransactionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransaction"]>

  export type PaymentTransactionSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PaymentTransactionDetail?: boolean | PaymentTransaction$PaymentTransactionDetailArgs<ExtArgs>
    _count?: boolean | PaymentTransactionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PaymentTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentTransaction"
    objects: {
      PaymentTransactionDetail: Prisma.$PaymentTransactionDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentTransaction"]>
    composites: {}
  }


  type PaymentTransactionGetPayload<S extends boolean | null | undefined | PaymentTransactionDefaultArgs> = $Result.GetResult<Prisma.$PaymentTransactionPayload, S>

  type PaymentTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentTransactionFindManyArgs, 'select' | 'include'> & {
      select?: PaymentTransactionCountAggregateInputType | true
    }

  export interface PaymentTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentTransaction'], meta: { name: 'PaymentTransaction' } }
    /**
     * Find zero or one PaymentTransaction that matches the filter.
     * @param {PaymentTransactionFindUniqueArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentTransactionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionFindUniqueArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PaymentTransaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentTransactionFindUniqueOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PaymentTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentTransactionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionFindFirstArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PaymentTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentTransactionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PaymentTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany()
     * 
     * // Get first 10 PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentTransactionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PaymentTransaction.
     * @param {PaymentTransactionCreateArgs} args - Arguments to create a PaymentTransaction.
     * @example
     * // Create one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.create({
     *   data: {
     *     // ... data to create a PaymentTransaction
     *   }
     * })
     * 
    **/
    create<T extends PaymentTransactionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionCreateArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PaymentTransactions.
     *     @param {PaymentTransactionCreateManyArgs} args - Arguments to create many PaymentTransactions.
     *     @example
     *     // Create many PaymentTransactions
     *     const paymentTransaction = await prisma.paymentTransaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentTransactionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentTransaction.
     * @param {PaymentTransactionDeleteArgs} args - Arguments to delete one PaymentTransaction.
     * @example
     * // Delete one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.delete({
     *   where: {
     *     // ... filter to delete one PaymentTransaction
     *   }
     * })
     * 
    **/
    delete<T extends PaymentTransactionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionDeleteArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PaymentTransaction.
     * @param {PaymentTransactionUpdateArgs} args - Arguments to update one PaymentTransaction.
     * @example
     * // Update one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentTransactionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionUpdateArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PaymentTransactions.
     * @param {PaymentTransactionDeleteManyArgs} args - Arguments to filter PaymentTransactions to delete.
     * @example
     * // Delete a few PaymentTransactions
     * const { count } = await prisma.paymentTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentTransactionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentTransactionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentTransaction.
     * @param {PaymentTransactionUpsertArgs} args - Arguments to update or create a PaymentTransaction.
     * @example
     * // Update or create a PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.upsert({
     *   create: {
     *     // ... data to create a PaymentTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentTransaction we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentTransactionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionUpsertArgs<ExtArgs>>
    ): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionCountArgs} args - Arguments to filter PaymentTransactions to count.
     * @example
     * // Count the number of PaymentTransactions
     * const count = await prisma.paymentTransaction.count({
     *   where: {
     *     // ... the filter for the PaymentTransactions we want to count
     *   }
     * })
    **/
    count<T extends PaymentTransactionCountArgs>(
      args?: Subset<T, PaymentTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentTransactionAggregateArgs>(args: Subset<T, PaymentTransactionAggregateArgs>): Prisma.PrismaPromise<GetPaymentTransactionAggregateType<T>>

    /**
     * Group by PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentTransactionGroupByArgs['orderBy'] }
        : { orderBy?: PaymentTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentTransaction model
   */
  readonly fields: PaymentTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    PaymentTransactionDetail<T extends PaymentTransaction$PaymentTransactionDetailArgs<ExtArgs> = {}>(args?: Subset<T, PaymentTransaction$PaymentTransactionDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PaymentTransaction model
   */ 
  interface PaymentTransactionFieldRefs {
    readonly id: FieldRef<"PaymentTransaction", 'Int'>
    readonly createdAt: FieldRef<"PaymentTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentTransaction", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PaymentTransaction findUnique
   */
  export type PaymentTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }


  /**
   * PaymentTransaction findUniqueOrThrow
   */
  export type PaymentTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }


  /**
   * PaymentTransaction findFirst
   */
  export type PaymentTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }


  /**
   * PaymentTransaction findFirstOrThrow
   */
  export type PaymentTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }


  /**
   * PaymentTransaction findMany
   */
  export type PaymentTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactions to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }


  /**
   * PaymentTransaction create
   */
  export type PaymentTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentTransaction.
     */
    data?: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
  }


  /**
   * PaymentTransaction createMany
   */
  export type PaymentTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentTransactions.
     */
    data: PaymentTransactionCreateManyInput | PaymentTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PaymentTransaction update
   */
  export type PaymentTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentTransaction.
     */
    data: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
    /**
     * Choose, which PaymentTransaction to update.
     */
    where: PaymentTransactionWhereUniqueInput
  }


  /**
   * PaymentTransaction updateMany
   */
  export type PaymentTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentTransactions.
     */
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTransactions to update
     */
    where?: PaymentTransactionWhereInput
  }


  /**
   * PaymentTransaction upsert
   */
  export type PaymentTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentTransaction to update in case it exists.
     */
    where: PaymentTransactionWhereUniqueInput
    /**
     * In case the PaymentTransaction found by the `where` argument doesn't exist, create a new PaymentTransaction with this data.
     */
    create: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
    /**
     * In case the PaymentTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
  }


  /**
   * PaymentTransaction delete
   */
  export type PaymentTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter which PaymentTransaction to delete.
     */
    where: PaymentTransactionWhereUniqueInput
  }


  /**
   * PaymentTransaction deleteMany
   */
  export type PaymentTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransactions to delete
     */
    where?: PaymentTransactionWhereInput
  }


  /**
   * PaymentTransaction.PaymentTransactionDetail
   */
  export type PaymentTransaction$PaymentTransactionDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    where?: PaymentTransactionDetailWhereInput
    orderBy?: PaymentTransactionDetailOrderByWithRelationInput | PaymentTransactionDetailOrderByWithRelationInput[]
    cursor?: PaymentTransactionDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTransactionDetailScalarFieldEnum | PaymentTransactionDetailScalarFieldEnum[]
  }


  /**
   * PaymentTransaction without action
   */
  export type PaymentTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
  }



  /**
   * Model PaymentTransactionDetail
   */

  export type AggregatePaymentTransactionDetail = {
    _count: PaymentTransactionDetailCountAggregateOutputType | null
    _avg: PaymentTransactionDetailAvgAggregateOutputType | null
    _sum: PaymentTransactionDetailSumAggregateOutputType | null
    _min: PaymentTransactionDetailMinAggregateOutputType | null
    _max: PaymentTransactionDetailMaxAggregateOutputType | null
  }

  export type PaymentTransactionDetailAvgAggregateOutputType = {
    id: number | null
    totalPrice: number | null
  }

  export type PaymentTransactionDetailSumAggregateOutputType = {
    id: number | null
    totalPrice: number | null
  }

  export type PaymentTransactionDetailMinAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionDetailMaxAggregateOutputType = {
    id: number | null
    totalPrice: number | null
    paymentMethod: $Enums.PaymentMethod | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionDetailCountAggregateOutputType = {
    id: number
    totalPrice: number
    paymentMethod: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentTransactionDetailAvgAggregateInputType = {
    id?: true
    totalPrice?: true
  }

  export type PaymentTransactionDetailSumAggregateInputType = {
    id?: true
    totalPrice?: true
  }

  export type PaymentTransactionDetailMinAggregateInputType = {
    id?: true
    totalPrice?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionDetailMaxAggregateInputType = {
    id?: true
    totalPrice?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionDetailCountAggregateInputType = {
    id?: true
    totalPrice?: true
    paymentMethod?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentTransactionDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransactionDetail to aggregate.
     */
    where?: PaymentTransactionDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactionDetails to fetch.
     */
    orderBy?: PaymentTransactionDetailOrderByWithRelationInput | PaymentTransactionDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentTransactionDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactionDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactionDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentTransactionDetails
    **/
    _count?: true | PaymentTransactionDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentTransactionDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentTransactionDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentTransactionDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentTransactionDetailMaxAggregateInputType
  }

  export type GetPaymentTransactionDetailAggregateType<T extends PaymentTransactionDetailAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentTransactionDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentTransactionDetail[P]>
      : GetScalarType<T[P], AggregatePaymentTransactionDetail[P]>
  }




  export type PaymentTransactionDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionDetailWhereInput
    orderBy?: PaymentTransactionDetailOrderByWithAggregationInput | PaymentTransactionDetailOrderByWithAggregationInput[]
    by: PaymentTransactionDetailScalarFieldEnum[] | PaymentTransactionDetailScalarFieldEnum
    having?: PaymentTransactionDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentTransactionDetailCountAggregateInputType | true
    _avg?: PaymentTransactionDetailAvgAggregateInputType
    _sum?: PaymentTransactionDetailSumAggregateInputType
    _min?: PaymentTransactionDetailMinAggregateInputType
    _max?: PaymentTransactionDetailMaxAggregateInputType
  }

  export type PaymentTransactionDetailGroupByOutputType = {
    id: number
    totalPrice: number
    paymentMethod: $Enums.PaymentMethod
    createdAt: Date
    updatedAt: Date
    _count: PaymentTransactionDetailCountAggregateOutputType | null
    _avg: PaymentTransactionDetailAvgAggregateOutputType | null
    _sum: PaymentTransactionDetailSumAggregateOutputType | null
    _min: PaymentTransactionDetailMinAggregateOutputType | null
    _max: PaymentTransactionDetailMaxAggregateOutputType | null
  }

  type GetPaymentTransactionDetailGroupByPayload<T extends PaymentTransactionDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentTransactionDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentTransactionDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentTransactionDetailGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentTransactionDetailGroupByOutputType[P]>
        }
      >
    >


  export type PaymentTransactionDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalPrice?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    paymentTransaction?: boolean | PaymentTransactionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransactionDetail"]>

  export type PaymentTransactionDetailSelectScalar = {
    id?: boolean
    totalPrice?: boolean
    paymentMethod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentTransactionDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    paymentTransaction?: boolean | PaymentTransactionDefaultArgs<ExtArgs>
  }


  export type $PaymentTransactionDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentTransactionDetail"
    objects: {
      paymentTransaction: Prisma.$PaymentTransactionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      totalPrice: number
      paymentMethod: $Enums.PaymentMethod
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentTransactionDetail"]>
    composites: {}
  }


  type PaymentTransactionDetailGetPayload<S extends boolean | null | undefined | PaymentTransactionDetailDefaultArgs> = $Result.GetResult<Prisma.$PaymentTransactionDetailPayload, S>

  type PaymentTransactionDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentTransactionDetailFindManyArgs, 'select' | 'include'> & {
      select?: PaymentTransactionDetailCountAggregateInputType | true
    }

  export interface PaymentTransactionDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentTransactionDetail'], meta: { name: 'PaymentTransactionDetail' } }
    /**
     * Find zero or one PaymentTransactionDetail that matches the filter.
     * @param {PaymentTransactionDetailFindUniqueArgs} args - Arguments to find a PaymentTransactionDetail
     * @example
     * // Get one PaymentTransactionDetail
     * const paymentTransactionDetail = await prisma.paymentTransactionDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentTransactionDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PaymentTransactionDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PaymentTransactionDetailFindUniqueOrThrowArgs} args - Arguments to find a PaymentTransactionDetail
     * @example
     * // Get one PaymentTransactionDetail
     * const paymentTransactionDetail = await prisma.paymentTransactionDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PaymentTransactionDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PaymentTransactionDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionDetailFindFirstArgs} args - Arguments to find a PaymentTransactionDetail
     * @example
     * // Get one PaymentTransactionDetail
     * const paymentTransactionDetail = await prisma.paymentTransactionDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentTransactionDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionDetailFindFirstArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PaymentTransactionDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionDetailFindFirstOrThrowArgs} args - Arguments to find a PaymentTransactionDetail
     * @example
     * // Get one PaymentTransactionDetail
     * const paymentTransactionDetail = await prisma.paymentTransactionDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PaymentTransactionDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PaymentTransactionDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentTransactionDetails
     * const paymentTransactionDetails = await prisma.paymentTransactionDetail.findMany()
     * 
     * // Get first 10 PaymentTransactionDetails
     * const paymentTransactionDetails = await prisma.paymentTransactionDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentTransactionDetailWithIdOnly = await prisma.paymentTransactionDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentTransactionDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PaymentTransactionDetail.
     * @param {PaymentTransactionDetailCreateArgs} args - Arguments to create a PaymentTransactionDetail.
     * @example
     * // Create one PaymentTransactionDetail
     * const PaymentTransactionDetail = await prisma.paymentTransactionDetail.create({
     *   data: {
     *     // ... data to create a PaymentTransactionDetail
     *   }
     * })
     * 
    **/
    create<T extends PaymentTransactionDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionDetailCreateArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PaymentTransactionDetails.
     *     @param {PaymentTransactionDetailCreateManyArgs} args - Arguments to create many PaymentTransactionDetails.
     *     @example
     *     // Create many PaymentTransactionDetails
     *     const paymentTransactionDetail = await prisma.paymentTransactionDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentTransactionDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentTransactionDetail.
     * @param {PaymentTransactionDetailDeleteArgs} args - Arguments to delete one PaymentTransactionDetail.
     * @example
     * // Delete one PaymentTransactionDetail
     * const PaymentTransactionDetail = await prisma.paymentTransactionDetail.delete({
     *   where: {
     *     // ... filter to delete one PaymentTransactionDetail
     *   }
     * })
     * 
    **/
    delete<T extends PaymentTransactionDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionDetailDeleteArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PaymentTransactionDetail.
     * @param {PaymentTransactionDetailUpdateArgs} args - Arguments to update one PaymentTransactionDetail.
     * @example
     * // Update one PaymentTransactionDetail
     * const paymentTransactionDetail = await prisma.paymentTransactionDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentTransactionDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionDetailUpdateArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PaymentTransactionDetails.
     * @param {PaymentTransactionDetailDeleteManyArgs} args - Arguments to filter PaymentTransactionDetails to delete.
     * @example
     * // Delete a few PaymentTransactionDetails
     * const { count } = await prisma.paymentTransactionDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentTransactionDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PaymentTransactionDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTransactionDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentTransactionDetails
     * const paymentTransactionDetail = await prisma.paymentTransactionDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentTransactionDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentTransactionDetail.
     * @param {PaymentTransactionDetailUpsertArgs} args - Arguments to update or create a PaymentTransactionDetail.
     * @example
     * // Update or create a PaymentTransactionDetail
     * const paymentTransactionDetail = await prisma.paymentTransactionDetail.upsert({
     *   create: {
     *     // ... data to create a PaymentTransactionDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentTransactionDetail we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentTransactionDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PaymentTransactionDetailUpsertArgs<ExtArgs>>
    ): Prisma__PaymentTransactionDetailClient<$Result.GetResult<Prisma.$PaymentTransactionDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PaymentTransactionDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionDetailCountArgs} args - Arguments to filter PaymentTransactionDetails to count.
     * @example
     * // Count the number of PaymentTransactionDetails
     * const count = await prisma.paymentTransactionDetail.count({
     *   where: {
     *     // ... the filter for the PaymentTransactionDetails we want to count
     *   }
     * })
    **/
    count<T extends PaymentTransactionDetailCountArgs>(
      args?: Subset<T, PaymentTransactionDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentTransactionDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentTransactionDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentTransactionDetailAggregateArgs>(args: Subset<T, PaymentTransactionDetailAggregateArgs>): Prisma.PrismaPromise<GetPaymentTransactionDetailAggregateType<T>>

    /**
     * Group by PaymentTransactionDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentTransactionDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentTransactionDetailGroupByArgs['orderBy'] }
        : { orderBy?: PaymentTransactionDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentTransactionDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentTransactionDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentTransactionDetail model
   */
  readonly fields: PaymentTransactionDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentTransactionDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentTransactionDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    paymentTransaction<T extends PaymentTransactionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentTransactionDefaultArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PaymentTransactionDetail model
   */ 
  interface PaymentTransactionDetailFieldRefs {
    readonly id: FieldRef<"PaymentTransactionDetail", 'Int'>
    readonly totalPrice: FieldRef<"PaymentTransactionDetail", 'Float'>
    readonly paymentMethod: FieldRef<"PaymentTransactionDetail", 'PaymentMethod'>
    readonly createdAt: FieldRef<"PaymentTransactionDetail", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentTransactionDetail", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * PaymentTransactionDetail findUnique
   */
  export type PaymentTransactionDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactionDetail to fetch.
     */
    where: PaymentTransactionDetailWhereUniqueInput
  }


  /**
   * PaymentTransactionDetail findUniqueOrThrow
   */
  export type PaymentTransactionDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactionDetail to fetch.
     */
    where: PaymentTransactionDetailWhereUniqueInput
  }


  /**
   * PaymentTransactionDetail findFirst
   */
  export type PaymentTransactionDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactionDetail to fetch.
     */
    where?: PaymentTransactionDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactionDetails to fetch.
     */
    orderBy?: PaymentTransactionDetailOrderByWithRelationInput | PaymentTransactionDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactionDetails.
     */
    cursor?: PaymentTransactionDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactionDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactionDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactionDetails.
     */
    distinct?: PaymentTransactionDetailScalarFieldEnum | PaymentTransactionDetailScalarFieldEnum[]
  }


  /**
   * PaymentTransactionDetail findFirstOrThrow
   */
  export type PaymentTransactionDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactionDetail to fetch.
     */
    where?: PaymentTransactionDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactionDetails to fetch.
     */
    orderBy?: PaymentTransactionDetailOrderByWithRelationInput | PaymentTransactionDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactionDetails.
     */
    cursor?: PaymentTransactionDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactionDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactionDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactionDetails.
     */
    distinct?: PaymentTransactionDetailScalarFieldEnum | PaymentTransactionDetailScalarFieldEnum[]
  }


  /**
   * PaymentTransactionDetail findMany
   */
  export type PaymentTransactionDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactionDetails to fetch.
     */
    where?: PaymentTransactionDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactionDetails to fetch.
     */
    orderBy?: PaymentTransactionDetailOrderByWithRelationInput | PaymentTransactionDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentTransactionDetails.
     */
    cursor?: PaymentTransactionDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactionDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactionDetails.
     */
    skip?: number
    distinct?: PaymentTransactionDetailScalarFieldEnum | PaymentTransactionDetailScalarFieldEnum[]
  }


  /**
   * PaymentTransactionDetail create
   */
  export type PaymentTransactionDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentTransactionDetail.
     */
    data: XOR<PaymentTransactionDetailCreateInput, PaymentTransactionDetailUncheckedCreateInput>
  }


  /**
   * PaymentTransactionDetail createMany
   */
  export type PaymentTransactionDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentTransactionDetails.
     */
    data: PaymentTransactionDetailCreateManyInput | PaymentTransactionDetailCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PaymentTransactionDetail update
   */
  export type PaymentTransactionDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentTransactionDetail.
     */
    data: XOR<PaymentTransactionDetailUpdateInput, PaymentTransactionDetailUncheckedUpdateInput>
    /**
     * Choose, which PaymentTransactionDetail to update.
     */
    where: PaymentTransactionDetailWhereUniqueInput
  }


  /**
   * PaymentTransactionDetail updateMany
   */
  export type PaymentTransactionDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentTransactionDetails.
     */
    data: XOR<PaymentTransactionDetailUpdateManyMutationInput, PaymentTransactionDetailUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTransactionDetails to update
     */
    where?: PaymentTransactionDetailWhereInput
  }


  /**
   * PaymentTransactionDetail upsert
   */
  export type PaymentTransactionDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentTransactionDetail to update in case it exists.
     */
    where: PaymentTransactionDetailWhereUniqueInput
    /**
     * In case the PaymentTransactionDetail found by the `where` argument doesn't exist, create a new PaymentTransactionDetail with this data.
     */
    create: XOR<PaymentTransactionDetailCreateInput, PaymentTransactionDetailUncheckedCreateInput>
    /**
     * In case the PaymentTransactionDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentTransactionDetailUpdateInput, PaymentTransactionDetailUncheckedUpdateInput>
  }


  /**
   * PaymentTransactionDetail delete
   */
  export type PaymentTransactionDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
    /**
     * Filter which PaymentTransactionDetail to delete.
     */
    where: PaymentTransactionDetailWhereUniqueInput
  }


  /**
   * PaymentTransactionDetail deleteMany
   */
  export type PaymentTransactionDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransactionDetails to delete
     */
    where?: PaymentTransactionDetailWhereInput
  }


  /**
   * PaymentTransactionDetail without action
   */
  export type PaymentTransactionDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransactionDetail
     */
    select?: PaymentTransactionDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PaymentTransactionDetailInclude<ExtArgs> | null
  }



  /**
   * Model MediaOnAlbum
   */

  export type AggregateMediaOnAlbum = {
    _count: MediaOnAlbumCountAggregateOutputType | null
    _avg: MediaOnAlbumAvgAggregateOutputType | null
    _sum: MediaOnAlbumSumAggregateOutputType | null
    _min: MediaOnAlbumMinAggregateOutputType | null
    _max: MediaOnAlbumMaxAggregateOutputType | null
  }

  export type MediaOnAlbumAvgAggregateOutputType = {
    id: number | null
  }

  export type MediaOnAlbumSumAggregateOutputType = {
    id: number | null
  }

  export type MediaOnAlbumMinAggregateOutputType = {
    id: number | null
    albumId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaOnAlbumMaxAggregateOutputType = {
    id: number | null
    albumId: string | null
    mediaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MediaOnAlbumCountAggregateOutputType = {
    id: number
    albumId: number
    mediaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MediaOnAlbumAvgAggregateInputType = {
    id?: true
  }

  export type MediaOnAlbumSumAggregateInputType = {
    id?: true
  }

  export type MediaOnAlbumMinAggregateInputType = {
    id?: true
    albumId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaOnAlbumMaxAggregateInputType = {
    id?: true
    albumId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MediaOnAlbumCountAggregateInputType = {
    id?: true
    albumId?: true
    mediaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MediaOnAlbumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaOnAlbum to aggregate.
     */
    where?: MediaOnAlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnAlbums to fetch.
     */
    orderBy?: MediaOnAlbumOrderByWithRelationInput | MediaOnAlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MediaOnAlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnAlbums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnAlbums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MediaOnAlbums
    **/
    _count?: true | MediaOnAlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MediaOnAlbumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MediaOnAlbumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MediaOnAlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MediaOnAlbumMaxAggregateInputType
  }

  export type GetMediaOnAlbumAggregateType<T extends MediaOnAlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateMediaOnAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMediaOnAlbum[P]>
      : GetScalarType<T[P], AggregateMediaOnAlbum[P]>
  }




  export type MediaOnAlbumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MediaOnAlbumWhereInput
    orderBy?: MediaOnAlbumOrderByWithAggregationInput | MediaOnAlbumOrderByWithAggregationInput[]
    by: MediaOnAlbumScalarFieldEnum[] | MediaOnAlbumScalarFieldEnum
    having?: MediaOnAlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MediaOnAlbumCountAggregateInputType | true
    _avg?: MediaOnAlbumAvgAggregateInputType
    _sum?: MediaOnAlbumSumAggregateInputType
    _min?: MediaOnAlbumMinAggregateInputType
    _max?: MediaOnAlbumMaxAggregateInputType
  }

  export type MediaOnAlbumGroupByOutputType = {
    id: number
    albumId: string
    mediaId: string
    createdAt: Date
    updatedAt: Date
    _count: MediaOnAlbumCountAggregateOutputType | null
    _avg: MediaOnAlbumAvgAggregateOutputType | null
    _sum: MediaOnAlbumSumAggregateOutputType | null
    _min: MediaOnAlbumMinAggregateOutputType | null
    _max: MediaOnAlbumMaxAggregateOutputType | null
  }

  type GetMediaOnAlbumGroupByPayload<T extends MediaOnAlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MediaOnAlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MediaOnAlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MediaOnAlbumGroupByOutputType[P]>
            : GetScalarType<T[P], MediaOnAlbumGroupByOutputType[P]>
        }
      >
    >


  export type MediaOnAlbumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    media?: boolean | MediaDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mediaOnAlbum"]>

  export type MediaOnAlbumSelectScalar = {
    id?: boolean
    albumId?: boolean
    mediaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MediaOnAlbumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    media?: boolean | MediaDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }


  export type $MediaOnAlbumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MediaOnAlbum"
    objects: {
      media: Prisma.$MediaPayload<ExtArgs>
      album: Prisma.$AlbumPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      albumId: string
      mediaId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mediaOnAlbum"]>
    composites: {}
  }


  type MediaOnAlbumGetPayload<S extends boolean | null | undefined | MediaOnAlbumDefaultArgs> = $Result.GetResult<Prisma.$MediaOnAlbumPayload, S>

  type MediaOnAlbumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MediaOnAlbumFindManyArgs, 'select' | 'include'> & {
      select?: MediaOnAlbumCountAggregateInputType | true
    }

  export interface MediaOnAlbumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MediaOnAlbum'], meta: { name: 'MediaOnAlbum' } }
    /**
     * Find zero or one MediaOnAlbum that matches the filter.
     * @param {MediaOnAlbumFindUniqueArgs} args - Arguments to find a MediaOnAlbum
     * @example
     * // Get one MediaOnAlbum
     * const mediaOnAlbum = await prisma.mediaOnAlbum.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MediaOnAlbumFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnAlbumFindUniqueArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MediaOnAlbum that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MediaOnAlbumFindUniqueOrThrowArgs} args - Arguments to find a MediaOnAlbum
     * @example
     * // Get one MediaOnAlbum
     * const mediaOnAlbum = await prisma.mediaOnAlbum.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MediaOnAlbumFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnAlbumFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MediaOnAlbum that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnAlbumFindFirstArgs} args - Arguments to find a MediaOnAlbum
     * @example
     * // Get one MediaOnAlbum
     * const mediaOnAlbum = await prisma.mediaOnAlbum.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MediaOnAlbumFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnAlbumFindFirstArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MediaOnAlbum that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnAlbumFindFirstOrThrowArgs} args - Arguments to find a MediaOnAlbum
     * @example
     * // Get one MediaOnAlbum
     * const mediaOnAlbum = await prisma.mediaOnAlbum.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MediaOnAlbumFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnAlbumFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MediaOnAlbums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnAlbumFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MediaOnAlbums
     * const mediaOnAlbums = await prisma.mediaOnAlbum.findMany()
     * 
     * // Get first 10 MediaOnAlbums
     * const mediaOnAlbums = await prisma.mediaOnAlbum.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mediaOnAlbumWithIdOnly = await prisma.mediaOnAlbum.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MediaOnAlbumFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnAlbumFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MediaOnAlbum.
     * @param {MediaOnAlbumCreateArgs} args - Arguments to create a MediaOnAlbum.
     * @example
     * // Create one MediaOnAlbum
     * const MediaOnAlbum = await prisma.mediaOnAlbum.create({
     *   data: {
     *     // ... data to create a MediaOnAlbum
     *   }
     * })
     * 
    **/
    create<T extends MediaOnAlbumCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnAlbumCreateArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MediaOnAlbums.
     *     @param {MediaOnAlbumCreateManyArgs} args - Arguments to create many MediaOnAlbums.
     *     @example
     *     // Create many MediaOnAlbums
     *     const mediaOnAlbum = await prisma.mediaOnAlbum.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MediaOnAlbumCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnAlbumCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MediaOnAlbum.
     * @param {MediaOnAlbumDeleteArgs} args - Arguments to delete one MediaOnAlbum.
     * @example
     * // Delete one MediaOnAlbum
     * const MediaOnAlbum = await prisma.mediaOnAlbum.delete({
     *   where: {
     *     // ... filter to delete one MediaOnAlbum
     *   }
     * })
     * 
    **/
    delete<T extends MediaOnAlbumDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnAlbumDeleteArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MediaOnAlbum.
     * @param {MediaOnAlbumUpdateArgs} args - Arguments to update one MediaOnAlbum.
     * @example
     * // Update one MediaOnAlbum
     * const mediaOnAlbum = await prisma.mediaOnAlbum.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MediaOnAlbumUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnAlbumUpdateArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MediaOnAlbums.
     * @param {MediaOnAlbumDeleteManyArgs} args - Arguments to filter MediaOnAlbums to delete.
     * @example
     * // Delete a few MediaOnAlbums
     * const { count } = await prisma.mediaOnAlbum.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MediaOnAlbumDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MediaOnAlbumDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MediaOnAlbums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnAlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MediaOnAlbums
     * const mediaOnAlbum = await prisma.mediaOnAlbum.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MediaOnAlbumUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnAlbumUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MediaOnAlbum.
     * @param {MediaOnAlbumUpsertArgs} args - Arguments to update or create a MediaOnAlbum.
     * @example
     * // Update or create a MediaOnAlbum
     * const mediaOnAlbum = await prisma.mediaOnAlbum.upsert({
     *   create: {
     *     // ... data to create a MediaOnAlbum
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MediaOnAlbum we want to update
     *   }
     * })
    **/
    upsert<T extends MediaOnAlbumUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MediaOnAlbumUpsertArgs<ExtArgs>>
    ): Prisma__MediaOnAlbumClient<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MediaOnAlbums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnAlbumCountArgs} args - Arguments to filter MediaOnAlbums to count.
     * @example
     * // Count the number of MediaOnAlbums
     * const count = await prisma.mediaOnAlbum.count({
     *   where: {
     *     // ... the filter for the MediaOnAlbums we want to count
     *   }
     * })
    **/
    count<T extends MediaOnAlbumCountArgs>(
      args?: Subset<T, MediaOnAlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MediaOnAlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MediaOnAlbum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnAlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MediaOnAlbumAggregateArgs>(args: Subset<T, MediaOnAlbumAggregateArgs>): Prisma.PrismaPromise<GetMediaOnAlbumAggregateType<T>>

    /**
     * Group by MediaOnAlbum.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MediaOnAlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MediaOnAlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MediaOnAlbumGroupByArgs['orderBy'] }
        : { orderBy?: MediaOnAlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MediaOnAlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMediaOnAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MediaOnAlbum model
   */
  readonly fields: MediaOnAlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MediaOnAlbum.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MediaOnAlbumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    media<T extends MediaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MediaDefaultArgs<ExtArgs>>): Prisma__MediaClient<$Result.GetResult<Prisma.$MediaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MediaOnAlbum model
   */ 
  interface MediaOnAlbumFieldRefs {
    readonly id: FieldRef<"MediaOnAlbum", 'Int'>
    readonly albumId: FieldRef<"MediaOnAlbum", 'String'>
    readonly mediaId: FieldRef<"MediaOnAlbum", 'String'>
    readonly createdAt: FieldRef<"MediaOnAlbum", 'DateTime'>
    readonly updatedAt: FieldRef<"MediaOnAlbum", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * MediaOnAlbum findUnique
   */
  export type MediaOnAlbumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnAlbum to fetch.
     */
    where: MediaOnAlbumWhereUniqueInput
  }


  /**
   * MediaOnAlbum findUniqueOrThrow
   */
  export type MediaOnAlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnAlbum to fetch.
     */
    where: MediaOnAlbumWhereUniqueInput
  }


  /**
   * MediaOnAlbum findFirst
   */
  export type MediaOnAlbumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnAlbum to fetch.
     */
    where?: MediaOnAlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnAlbums to fetch.
     */
    orderBy?: MediaOnAlbumOrderByWithRelationInput | MediaOnAlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaOnAlbums.
     */
    cursor?: MediaOnAlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnAlbums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnAlbums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaOnAlbums.
     */
    distinct?: MediaOnAlbumScalarFieldEnum | MediaOnAlbumScalarFieldEnum[]
  }


  /**
   * MediaOnAlbum findFirstOrThrow
   */
  export type MediaOnAlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnAlbum to fetch.
     */
    where?: MediaOnAlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnAlbums to fetch.
     */
    orderBy?: MediaOnAlbumOrderByWithRelationInput | MediaOnAlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MediaOnAlbums.
     */
    cursor?: MediaOnAlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnAlbums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnAlbums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MediaOnAlbums.
     */
    distinct?: MediaOnAlbumScalarFieldEnum | MediaOnAlbumScalarFieldEnum[]
  }


  /**
   * MediaOnAlbum findMany
   */
  export type MediaOnAlbumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * Filter, which MediaOnAlbums to fetch.
     */
    where?: MediaOnAlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MediaOnAlbums to fetch.
     */
    orderBy?: MediaOnAlbumOrderByWithRelationInput | MediaOnAlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MediaOnAlbums.
     */
    cursor?: MediaOnAlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MediaOnAlbums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MediaOnAlbums.
     */
    skip?: number
    distinct?: MediaOnAlbumScalarFieldEnum | MediaOnAlbumScalarFieldEnum[]
  }


  /**
   * MediaOnAlbum create
   */
  export type MediaOnAlbumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a MediaOnAlbum.
     */
    data: XOR<MediaOnAlbumCreateInput, MediaOnAlbumUncheckedCreateInput>
  }


  /**
   * MediaOnAlbum createMany
   */
  export type MediaOnAlbumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MediaOnAlbums.
     */
    data: MediaOnAlbumCreateManyInput | MediaOnAlbumCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MediaOnAlbum update
   */
  export type MediaOnAlbumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a MediaOnAlbum.
     */
    data: XOR<MediaOnAlbumUpdateInput, MediaOnAlbumUncheckedUpdateInput>
    /**
     * Choose, which MediaOnAlbum to update.
     */
    where: MediaOnAlbumWhereUniqueInput
  }


  /**
   * MediaOnAlbum updateMany
   */
  export type MediaOnAlbumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MediaOnAlbums.
     */
    data: XOR<MediaOnAlbumUpdateManyMutationInput, MediaOnAlbumUncheckedUpdateManyInput>
    /**
     * Filter which MediaOnAlbums to update
     */
    where?: MediaOnAlbumWhereInput
  }


  /**
   * MediaOnAlbum upsert
   */
  export type MediaOnAlbumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the MediaOnAlbum to update in case it exists.
     */
    where: MediaOnAlbumWhereUniqueInput
    /**
     * In case the MediaOnAlbum found by the `where` argument doesn't exist, create a new MediaOnAlbum with this data.
     */
    create: XOR<MediaOnAlbumCreateInput, MediaOnAlbumUncheckedCreateInput>
    /**
     * In case the MediaOnAlbum was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MediaOnAlbumUpdateInput, MediaOnAlbumUncheckedUpdateInput>
  }


  /**
   * MediaOnAlbum delete
   */
  export type MediaOnAlbumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    /**
     * Filter which MediaOnAlbum to delete.
     */
    where: MediaOnAlbumWhereUniqueInput
  }


  /**
   * MediaOnAlbum deleteMany
   */
  export type MediaOnAlbumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MediaOnAlbums to delete
     */
    where?: MediaOnAlbumWhereInput
  }


  /**
   * MediaOnAlbum without action
   */
  export type MediaOnAlbumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
  }



  /**
   * Model Album
   */

  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    name: number
    description: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlbumMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlbumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithAggregationInput | AlbumOrderByWithAggregationInput[]
    by: AlbumScalarFieldEnum[] | AlbumScalarFieldEnum
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }

  export type AlbumGroupByOutputType = {
    id: string
    name: string
    description: string | null
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: AlbumCountAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    mediaOnAlbum?: boolean | Album$mediaOnAlbumArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlbumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    mediaOnAlbum?: boolean | Album$mediaOnAlbumArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AlbumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Album"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      mediaOnAlbum: Prisma.$MediaOnAlbumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["album"]>
    composites: {}
  }


  type AlbumGetPayload<S extends boolean | null | undefined | AlbumDefaultArgs> = $Result.GetResult<Prisma.$AlbumPayload, S>

  type AlbumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlbumFindManyArgs, 'select' | 'include'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Album'], meta: { name: 'Album' } }
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AlbumFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumFindUniqueArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Album that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AlbumFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindFirstArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Album that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AlbumFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
    **/
    create<T extends AlbumCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumCreateArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Albums.
     *     @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     *     @example
     *     // Create many Albums
     *     const album = await prisma.album.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AlbumCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
    **/
    delete<T extends AlbumDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumDeleteArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AlbumUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumUpdateArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AlbumDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AlbumDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AlbumUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
    **/
    upsert<T extends AlbumUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AlbumUpsertArgs<ExtArgs>>
    ): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Album model
   */
  readonly fields: AlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    mediaOnAlbum<T extends Album$mediaOnAlbumArgs<ExtArgs> = {}>(args?: Subset<T, Album$mediaOnAlbumArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MediaOnAlbumPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Album model
   */ 
  interface AlbumFieldRefs {
    readonly id: FieldRef<"Album", 'String'>
    readonly name: FieldRef<"Album", 'String'>
    readonly description: FieldRef<"Album", 'String'>
    readonly userId: FieldRef<"Album", 'String'>
    readonly createdAt: FieldRef<"Album", 'DateTime'>
    readonly updatedAt: FieldRef<"Album", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Album findUnique
   */
  export type AlbumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album findFirst
   */
  export type AlbumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }


  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }


  /**
   * Album findMany
   */
  export type AlbumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }


  /**
   * Album create
   */
  export type AlbumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }


  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Album update
   */
  export type AlbumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
  }


  /**
   * Album upsert
   */
  export type AlbumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }


  /**
   * Album delete
   */
  export type AlbumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }


  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
  }


  /**
   * Album.mediaOnAlbum
   */
  export type Album$mediaOnAlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MediaOnAlbum
     */
    select?: MediaOnAlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MediaOnAlbumInclude<ExtArgs> | null
    where?: MediaOnAlbumWhereInput
    orderBy?: MediaOnAlbumOrderByWithRelationInput | MediaOnAlbumOrderByWithRelationInput[]
    cursor?: MediaOnAlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MediaOnAlbumScalarFieldEnum | MediaOnAlbumScalarFieldEnum[]
  }


  /**
   * Album without action
   */
  export type AlbumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AlbumInclude<ExtArgs> | null
  }



  /**
   * Model SocialAccount
   */

  export type AggregateSocialAccount = {
    _count: SocialAccountCountAggregateOutputType | null
    _avg: SocialAccountAvgAggregateOutputType | null
    _sum: SocialAccountSumAggregateOutputType | null
    _min: SocialAccountMinAggregateOutputType | null
    _max: SocialAccountMaxAggregateOutputType | null
  }

  export type SocialAccountAvgAggregateOutputType = {
    id: number | null
  }

  export type SocialAccountSumAggregateOutputType = {
    id: number | null
  }

  export type SocialAccountMinAggregateOutputType = {
    id: number | null
    userId: string | null
    type: $Enums.AccountType | null
    fullName: string | null
    avatarUrl: string | null
    accountUrl: string | null
    accessToken: string | null
    refreshToken: string | null
    expiredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    disabledAt: Date | null
  }

  export type SocialAccountMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    type: $Enums.AccountType | null
    fullName: string | null
    avatarUrl: string | null
    accountUrl: string | null
    accessToken: string | null
    refreshToken: string | null
    expiredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    disabledAt: Date | null
  }

  export type SocialAccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    fullName: number
    avatarUrl: number
    accountUrl: number
    accessToken: number
    refreshToken: number
    expiredAt: number
    createdAt: number
    updatedAt: number
    disabledAt: number
    _all: number
  }


  export type SocialAccountAvgAggregateInputType = {
    id?: true
  }

  export type SocialAccountSumAggregateInputType = {
    id?: true
  }

  export type SocialAccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    fullName?: true
    avatarUrl?: true
    accountUrl?: true
    accessToken?: true
    refreshToken?: true
    expiredAt?: true
    createdAt?: true
    updatedAt?: true
    disabledAt?: true
  }

  export type SocialAccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    fullName?: true
    avatarUrl?: true
    accountUrl?: true
    accessToken?: true
    refreshToken?: true
    expiredAt?: true
    createdAt?: true
    updatedAt?: true
    disabledAt?: true
  }

  export type SocialAccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    fullName?: true
    avatarUrl?: true
    accountUrl?: true
    accessToken?: true
    refreshToken?: true
    expiredAt?: true
    createdAt?: true
    updatedAt?: true
    disabledAt?: true
    _all?: true
  }

  export type SocialAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialAccount to aggregate.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialAccounts
    **/
    _count?: true | SocialAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SocialAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SocialAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialAccountMaxAggregateInputType
  }

  export type GetSocialAccountAggregateType<T extends SocialAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialAccount[P]>
      : GetScalarType<T[P], AggregateSocialAccount[P]>
  }




  export type SocialAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialAccountWhereInput
    orderBy?: SocialAccountOrderByWithAggregationInput | SocialAccountOrderByWithAggregationInput[]
    by: SocialAccountScalarFieldEnum[] | SocialAccountScalarFieldEnum
    having?: SocialAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialAccountCountAggregateInputType | true
    _avg?: SocialAccountAvgAggregateInputType
    _sum?: SocialAccountSumAggregateInputType
    _min?: SocialAccountMinAggregateInputType
    _max?: SocialAccountMaxAggregateInputType
  }

  export type SocialAccountGroupByOutputType = {
    id: number
    userId: string
    type: $Enums.AccountType
    fullName: string
    avatarUrl: string | null
    accountUrl: string | null
    accessToken: string | null
    refreshToken: string | null
    expiredAt: Date
    createdAt: Date
    updatedAt: Date
    disabledAt: Date | null
    _count: SocialAccountCountAggregateOutputType | null
    _avg: SocialAccountAvgAggregateOutputType | null
    _sum: SocialAccountSumAggregateOutputType | null
    _min: SocialAccountMinAggregateOutputType | null
    _max: SocialAccountMaxAggregateOutputType | null
  }

  type GetSocialAccountGroupByPayload<T extends SocialAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
            : GetScalarType<T[P], SocialAccountGroupByOutputType[P]>
        }
      >
    >


  export type SocialAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    fullName?: boolean
    avatarUrl?: boolean
    accountUrl?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    disabledAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialAccount"]>

  export type SocialAccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    fullName?: boolean
    avatarUrl?: boolean
    accountUrl?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    disabledAt?: boolean
  }

  export type SocialAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SocialAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialAccount"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      type: $Enums.AccountType
      fullName: string
      avatarUrl: string | null
      accountUrl: string | null
      accessToken: string | null
      refreshToken: string | null
      expiredAt: Date
      createdAt: Date
      updatedAt: Date
      disabledAt: Date | null
    }, ExtArgs["result"]["socialAccount"]>
    composites: {}
  }


  type SocialAccountGetPayload<S extends boolean | null | undefined | SocialAccountDefaultArgs> = $Result.GetResult<Prisma.$SocialAccountPayload, S>

  type SocialAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SocialAccountFindManyArgs, 'select' | 'include'> & {
      select?: SocialAccountCountAggregateInputType | true
    }

  export interface SocialAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialAccount'], meta: { name: 'SocialAccount' } }
    /**
     * Find zero or one SocialAccount that matches the filter.
     * @param {SocialAccountFindUniqueArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SocialAccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SocialAccountFindUniqueArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SocialAccount that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SocialAccountFindUniqueOrThrowArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SocialAccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialAccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SocialAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindFirstArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SocialAccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialAccountFindFirstArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SocialAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindFirstOrThrowArgs} args - Arguments to find a SocialAccount
     * @example
     * // Get one SocialAccount
     * const socialAccount = await prisma.socialAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SocialAccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialAccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SocialAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialAccounts
     * const socialAccounts = await prisma.socialAccount.findMany()
     * 
     * // Get first 10 SocialAccounts
     * const socialAccounts = await prisma.socialAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialAccountWithIdOnly = await prisma.socialAccount.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SocialAccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialAccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SocialAccount.
     * @param {SocialAccountCreateArgs} args - Arguments to create a SocialAccount.
     * @example
     * // Create one SocialAccount
     * const SocialAccount = await prisma.socialAccount.create({
     *   data: {
     *     // ... data to create a SocialAccount
     *   }
     * })
     * 
    **/
    create<T extends SocialAccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SocialAccountCreateArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SocialAccounts.
     *     @param {SocialAccountCreateManyArgs} args - Arguments to create many SocialAccounts.
     *     @example
     *     // Create many SocialAccounts
     *     const socialAccount = await prisma.socialAccount.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SocialAccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialAccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SocialAccount.
     * @param {SocialAccountDeleteArgs} args - Arguments to delete one SocialAccount.
     * @example
     * // Delete one SocialAccount
     * const SocialAccount = await prisma.socialAccount.delete({
     *   where: {
     *     // ... filter to delete one SocialAccount
     *   }
     * })
     * 
    **/
    delete<T extends SocialAccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SocialAccountDeleteArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SocialAccount.
     * @param {SocialAccountUpdateArgs} args - Arguments to update one SocialAccount.
     * @example
     * // Update one SocialAccount
     * const socialAccount = await prisma.socialAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SocialAccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SocialAccountUpdateArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SocialAccounts.
     * @param {SocialAccountDeleteManyArgs} args - Arguments to filter SocialAccounts to delete.
     * @example
     * // Delete a few SocialAccounts
     * const { count } = await prisma.socialAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SocialAccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SocialAccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialAccounts
     * const socialAccount = await prisma.socialAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SocialAccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SocialAccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SocialAccount.
     * @param {SocialAccountUpsertArgs} args - Arguments to update or create a SocialAccount.
     * @example
     * // Update or create a SocialAccount
     * const socialAccount = await prisma.socialAccount.upsert({
     *   create: {
     *     // ... data to create a SocialAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialAccount we want to update
     *   }
     * })
    **/
    upsert<T extends SocialAccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SocialAccountUpsertArgs<ExtArgs>>
    ): Prisma__SocialAccountClient<$Result.GetResult<Prisma.$SocialAccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SocialAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountCountArgs} args - Arguments to filter SocialAccounts to count.
     * @example
     * // Count the number of SocialAccounts
     * const count = await prisma.socialAccount.count({
     *   where: {
     *     // ... the filter for the SocialAccounts we want to count
     *   }
     * })
    **/
    count<T extends SocialAccountCountArgs>(
      args?: Subset<T, SocialAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialAccountAggregateArgs>(args: Subset<T, SocialAccountAggregateArgs>): Prisma.PrismaPromise<GetSocialAccountAggregateType<T>>

    /**
     * Group by SocialAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialAccountGroupByArgs['orderBy'] }
        : { orderBy?: SocialAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialAccount model
   */
  readonly fields: SocialAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SocialAccount model
   */ 
  interface SocialAccountFieldRefs {
    readonly id: FieldRef<"SocialAccount", 'Int'>
    readonly userId: FieldRef<"SocialAccount", 'String'>
    readonly type: FieldRef<"SocialAccount", 'AccountType'>
    readonly fullName: FieldRef<"SocialAccount", 'String'>
    readonly avatarUrl: FieldRef<"SocialAccount", 'String'>
    readonly accountUrl: FieldRef<"SocialAccount", 'String'>
    readonly accessToken: FieldRef<"SocialAccount", 'String'>
    readonly refreshToken: FieldRef<"SocialAccount", 'String'>
    readonly expiredAt: FieldRef<"SocialAccount", 'DateTime'>
    readonly createdAt: FieldRef<"SocialAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"SocialAccount", 'DateTime'>
    readonly disabledAt: FieldRef<"SocialAccount", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * SocialAccount findUnique
   */
  export type SocialAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where: SocialAccountWhereUniqueInput
  }


  /**
   * SocialAccount findUniqueOrThrow
   */
  export type SocialAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where: SocialAccountWhereUniqueInput
  }


  /**
   * SocialAccount findFirst
   */
  export type SocialAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialAccounts.
     */
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }


  /**
   * SocialAccount findFirstOrThrow
   */
  export type SocialAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccount to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialAccounts.
     */
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }


  /**
   * SocialAccount findMany
   */
  export type SocialAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter, which SocialAccounts to fetch.
     */
    where?: SocialAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialAccounts to fetch.
     */
    orderBy?: SocialAccountOrderByWithRelationInput | SocialAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialAccounts.
     */
    cursor?: SocialAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialAccounts.
     */
    skip?: number
    distinct?: SocialAccountScalarFieldEnum | SocialAccountScalarFieldEnum[]
  }


  /**
   * SocialAccount create
   */
  export type SocialAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a SocialAccount.
     */
    data: XOR<SocialAccountCreateInput, SocialAccountUncheckedCreateInput>
  }


  /**
   * SocialAccount createMany
   */
  export type SocialAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialAccounts.
     */
    data: SocialAccountCreateManyInput | SocialAccountCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SocialAccount update
   */
  export type SocialAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a SocialAccount.
     */
    data: XOR<SocialAccountUpdateInput, SocialAccountUncheckedUpdateInput>
    /**
     * Choose, which SocialAccount to update.
     */
    where: SocialAccountWhereUniqueInput
  }


  /**
   * SocialAccount updateMany
   */
  export type SocialAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialAccounts.
     */
    data: XOR<SocialAccountUpdateManyMutationInput, SocialAccountUncheckedUpdateManyInput>
    /**
     * Filter which SocialAccounts to update
     */
    where?: SocialAccountWhereInput
  }


  /**
   * SocialAccount upsert
   */
  export type SocialAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the SocialAccount to update in case it exists.
     */
    where: SocialAccountWhereUniqueInput
    /**
     * In case the SocialAccount found by the `where` argument doesn't exist, create a new SocialAccount with this data.
     */
    create: XOR<SocialAccountCreateInput, SocialAccountUncheckedCreateInput>
    /**
     * In case the SocialAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialAccountUpdateInput, SocialAccountUncheckedUpdateInput>
  }


  /**
   * SocialAccount delete
   */
  export type SocialAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
    /**
     * Filter which SocialAccount to delete.
     */
    where: SocialAccountWhereUniqueInput
  }


  /**
   * SocialAccount deleteMany
   */
  export type SocialAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialAccounts to delete
     */
    where?: SocialAccountWhereInput
  }


  /**
   * SocialAccount without action
   */
  export type SocialAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialAccount
     */
    select?: SocialAccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SocialAccountInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    username: 'username',
    password: 'password',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lockedAt: 'lockedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserPaymentMethodScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    paymentMethod: 'paymentMethod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserPaymentMethodScalarFieldEnum = (typeof UserPaymentMethodScalarFieldEnum)[keyof typeof UserPaymentMethodScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const MediaOnCategoryScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    mediaId: 'mediaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MediaOnCategoryScalarFieldEnum = (typeof MediaOnCategoryScalarFieldEnum)[keyof typeof MediaOnCategoryScalarFieldEnum]


  export const SessionUploadScalarFieldEnum: {
    id: 'id',
    sessionUploadUrl: 'sessionUploadUrl',
    mediaId: 'mediaId',
    created_at: 'created_at',
    updated_at: 'updated_at',
    expired_at: 'expired_at'
  };

  export type SessionUploadScalarFieldEnum = (typeof SessionUploadScalarFieldEnum)[keyof typeof SessionUploadScalarFieldEnum]


  export const MediaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    views: 'views',
    duration: 'duration',
    plays: 'plays',
    status: 'status',
    viewMode: 'viewMode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lockedAt: 'lockedAt',
    publishedAt: 'publishedAt'
  };

  export type MediaScalarFieldEnum = (typeof MediaScalarFieldEnum)[keyof typeof MediaScalarFieldEnum]


  export const MediaReactionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    mediaId: 'mediaId',
    isLike: 'isLike',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MediaReactionScalarFieldEnum = (typeof MediaReactionScalarFieldEnum)[keyof typeof MediaReactionScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    mediaId: 'mediaId',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const PlaylistScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlaylistScalarFieldEnum = (typeof PlaylistScalarFieldEnum)[keyof typeof PlaylistScalarFieldEnum]


  export const MediaOnPlaylistScalarFieldEnum: {
    id: 'id',
    playlistId: 'playlistId',
    mediaId: 'mediaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sortNo: 'sortNo'
  };

  export type MediaOnPlaylistScalarFieldEnum = (typeof MediaOnPlaylistScalarFieldEnum)[keyof typeof MediaOnPlaylistScalarFieldEnum]


  export const HistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    mediaId: 'mediaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HistoryScalarFieldEnum = (typeof HistoryScalarFieldEnum)[keyof typeof HistoryScalarFieldEnum]


  export const SubscriberScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    channelId: 'channelId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriberScalarFieldEnum = (typeof SubscriberScalarFieldEnum)[keyof typeof SubscriberScalarFieldEnum]


  export const NotificationSubscriptionsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    subscription: 'subscription',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationSubscriptionsScalarFieldEnum = (typeof NotificationSubscriptionsScalarFieldEnum)[keyof typeof NotificationSubscriptionsScalarFieldEnum]


  export const VideoResourceScalarFieldEnum: {
    id: 'id',
    mediaId: 'mediaId',
    label: 'label',
    url: 'url',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VideoResourceScalarFieldEnum = (typeof VideoResourceScalarFieldEnum)[keyof typeof VideoResourceScalarFieldEnum]


  export const AudioResourceScalarFieldEnum: {
    id: 'id',
    mediaId: 'mediaId',
    label: 'label',
    fileId: 'fileId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AudioResourceScalarFieldEnum = (typeof AudioResourceScalarFieldEnum)[keyof typeof AudioResourceScalarFieldEnum]


  export const MediaDetailScalarFieldEnum: {
    id: 'id',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MediaDetailScalarFieldEnum = (typeof MediaDetailScalarFieldEnum)[keyof typeof MediaDetailScalarFieldEnum]


  export const ThumbnailScalarFieldEnum: {
    id: 'id',
    url: 'url',
    isPrimary: 'isPrimary',
    mediaId: 'mediaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ThumbnailScalarFieldEnum = (typeof ThumbnailScalarFieldEnum)[keyof typeof ThumbnailScalarFieldEnum]


  export const PaymentTransactionScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentTransactionScalarFieldEnum = (typeof PaymentTransactionScalarFieldEnum)[keyof typeof PaymentTransactionScalarFieldEnum]


  export const PaymentTransactionDetailScalarFieldEnum: {
    id: 'id',
    totalPrice: 'totalPrice',
    paymentMethod: 'paymentMethod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentTransactionDetailScalarFieldEnum = (typeof PaymentTransactionDetailScalarFieldEnum)[keyof typeof PaymentTransactionDetailScalarFieldEnum]


  export const MediaOnAlbumScalarFieldEnum: {
    id: 'id',
    albumId: 'albumId',
    mediaId: 'mediaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MediaOnAlbumScalarFieldEnum = (typeof MediaOnAlbumScalarFieldEnum)[keyof typeof MediaOnAlbumScalarFieldEnum]


  export const AlbumScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const SocialAccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    fullName: 'fullName',
    avatarUrl: 'avatarUrl',
    accountUrl: 'accountUrl',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiredAt: 'expiredAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    disabledAt: 'disabledAt'
  };

  export type SocialAccountScalarFieldEnum = (typeof SocialAccountScalarFieldEnum)[keyof typeof SocialAccountScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'StatusResource'
   */
  export type EnumStatusResourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusResource'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AudioQuality'
   */
  export type EnumAudioQualityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AudioQuality'>
    


  /**
   * Reference to a field of type 'AccountType'
   */
  export type EnumAccountTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountType'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lockedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    media?: MediaListRelationFilter
    mediaReactions?: MediaReactionListRelationFilter
    histories?: HistoryListRelationFilter
    subscribers?: SubscriberListRelationFilter
    channel?: SubscriberListRelationFilter
    NotificationSubscriptions?: NotificationSubscriptionsListRelationFilter
    Comment?: CommentListRelationFilter
    Playlist?: PlaylistListRelationFilter
    UserPaymentMethod?: UserPaymentMethodListRelationFilter
    Album?: AlbumListRelationFilter
    SocialAccount?: SocialAccountListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    media?: MediaOrderByRelationAggregateInput
    mediaReactions?: MediaReactionOrderByRelationAggregateInput
    histories?: HistoryOrderByRelationAggregateInput
    subscribers?: SubscriberOrderByRelationAggregateInput
    channel?: SubscriberOrderByRelationAggregateInput
    NotificationSubscriptions?: NotificationSubscriptionsOrderByRelationAggregateInput
    Comment?: CommentOrderByRelationAggregateInput
    Playlist?: PlaylistOrderByRelationAggregateInput
    UserPaymentMethod?: UserPaymentMethodOrderByRelationAggregateInput
    Album?: AlbumOrderByRelationAggregateInput
    SocialAccount?: SocialAccountOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lockedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    media?: MediaListRelationFilter
    mediaReactions?: MediaReactionListRelationFilter
    histories?: HistoryListRelationFilter
    subscribers?: SubscriberListRelationFilter
    channel?: SubscriberListRelationFilter
    NotificationSubscriptions?: NotificationSubscriptionsListRelationFilter
    Comment?: CommentListRelationFilter
    Playlist?: PlaylistListRelationFilter
    UserPaymentMethod?: UserPaymentMethodListRelationFilter
    Album?: AlbumListRelationFilter
    SocialAccount?: SocialAccountListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lockedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type UserPaymentMethodWhereInput = {
    AND?: UserPaymentMethodWhereInput | UserPaymentMethodWhereInput[]
    OR?: UserPaymentMethodWhereInput[]
    NOT?: UserPaymentMethodWhereInput | UserPaymentMethodWhereInput[]
    id?: IntFilter<"UserPaymentMethod"> | number
    userId?: StringFilter<"UserPaymentMethod"> | string
    paymentMethod?: EnumPaymentMethodFilter<"UserPaymentMethod"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"UserPaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"UserPaymentMethod"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPaymentMethodOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPaymentMethodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserPaymentMethodWhereInput | UserPaymentMethodWhereInput[]
    OR?: UserPaymentMethodWhereInput[]
    NOT?: UserPaymentMethodWhereInput | UserPaymentMethodWhereInput[]
    userId?: StringFilter<"UserPaymentMethod"> | string
    paymentMethod?: EnumPaymentMethodFilter<"UserPaymentMethod"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"UserPaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"UserPaymentMethod"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserPaymentMethodOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserPaymentMethodCountOrderByAggregateInput
    _avg?: UserPaymentMethodAvgOrderByAggregateInput
    _max?: UserPaymentMethodMaxOrderByAggregateInput
    _min?: UserPaymentMethodMinOrderByAggregateInput
    _sum?: UserPaymentMethodSumOrderByAggregateInput
  }

  export type UserPaymentMethodScalarWhereWithAggregatesInput = {
    AND?: UserPaymentMethodScalarWhereWithAggregatesInput | UserPaymentMethodScalarWhereWithAggregatesInput[]
    OR?: UserPaymentMethodScalarWhereWithAggregatesInput[]
    NOT?: UserPaymentMethodScalarWhereWithAggregatesInput | UserPaymentMethodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserPaymentMethod"> | number
    userId?: StringWithAggregatesFilter<"UserPaymentMethod"> | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"UserPaymentMethod"> | $Enums.PaymentMethod
    createdAt?: DateTimeWithAggregatesFilter<"UserPaymentMethod"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPaymentMethod"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    categoryOnMedia?: MediaOnCategoryListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    categoryOnMedia?: MediaOnCategoryOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    categoryOnMedia?: MediaOnCategoryListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type MediaOnCategoryWhereInput = {
    AND?: MediaOnCategoryWhereInput | MediaOnCategoryWhereInput[]
    OR?: MediaOnCategoryWhereInput[]
    NOT?: MediaOnCategoryWhereInput | MediaOnCategoryWhereInput[]
    id?: IntFilter<"MediaOnCategory"> | number
    categoryId?: StringFilter<"MediaOnCategory"> | string
    mediaId?: StringFilter<"MediaOnCategory"> | string
    createdAt?: DateTimeFilter<"MediaOnCategory"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnCategory"> | Date | string
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type MediaOnCategoryOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: CategoryOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type MediaOnCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    categoryId_mediaId?: MediaOnCategoryCategoryIdMediaIdCompoundUniqueInput
    AND?: MediaOnCategoryWhereInput | MediaOnCategoryWhereInput[]
    OR?: MediaOnCategoryWhereInput[]
    NOT?: MediaOnCategoryWhereInput | MediaOnCategoryWhereInput[]
    categoryId?: StringFilter<"MediaOnCategory"> | string
    mediaId?: StringFilter<"MediaOnCategory"> | string
    createdAt?: DateTimeFilter<"MediaOnCategory"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnCategory"> | Date | string
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id" | "categoryId_mediaId">

  export type MediaOnCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MediaOnCategoryCountOrderByAggregateInput
    _avg?: MediaOnCategoryAvgOrderByAggregateInput
    _max?: MediaOnCategoryMaxOrderByAggregateInput
    _min?: MediaOnCategoryMinOrderByAggregateInput
    _sum?: MediaOnCategorySumOrderByAggregateInput
  }

  export type MediaOnCategoryScalarWhereWithAggregatesInput = {
    AND?: MediaOnCategoryScalarWhereWithAggregatesInput | MediaOnCategoryScalarWhereWithAggregatesInput[]
    OR?: MediaOnCategoryScalarWhereWithAggregatesInput[]
    NOT?: MediaOnCategoryScalarWhereWithAggregatesInput | MediaOnCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MediaOnCategory"> | number
    categoryId?: StringWithAggregatesFilter<"MediaOnCategory"> | string
    mediaId?: StringWithAggregatesFilter<"MediaOnCategory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MediaOnCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaOnCategory"> | Date | string
  }

  export type SessionUploadWhereInput = {
    AND?: SessionUploadWhereInput | SessionUploadWhereInput[]
    OR?: SessionUploadWhereInput[]
    NOT?: SessionUploadWhereInput | SessionUploadWhereInput[]
    id?: StringFilter<"SessionUpload"> | string
    sessionUploadUrl?: StringFilter<"SessionUpload"> | string
    mediaId?: StringFilter<"SessionUpload"> | string
    created_at?: DateTimeFilter<"SessionUpload"> | Date | string
    updated_at?: DateTimeFilter<"SessionUpload"> | Date | string
    expired_at?: DateTimeNullableFilter<"SessionUpload"> | Date | string | null
    Media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type SessionUploadOrderByWithRelationInput = {
    id?: SortOrder
    sessionUploadUrl?: SortOrder
    mediaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    expired_at?: SortOrderInput | SortOrder
    Media?: MediaOrderByWithRelationInput
  }

  export type SessionUploadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionUploadWhereInput | SessionUploadWhereInput[]
    OR?: SessionUploadWhereInput[]
    NOT?: SessionUploadWhereInput | SessionUploadWhereInput[]
    sessionUploadUrl?: StringFilter<"SessionUpload"> | string
    mediaId?: StringFilter<"SessionUpload"> | string
    created_at?: DateTimeFilter<"SessionUpload"> | Date | string
    updated_at?: DateTimeFilter<"SessionUpload"> | Date | string
    expired_at?: DateTimeNullableFilter<"SessionUpload"> | Date | string | null
    Media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type SessionUploadOrderByWithAggregationInput = {
    id?: SortOrder
    sessionUploadUrl?: SortOrder
    mediaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    expired_at?: SortOrderInput | SortOrder
    _count?: SessionUploadCountOrderByAggregateInput
    _max?: SessionUploadMaxOrderByAggregateInput
    _min?: SessionUploadMinOrderByAggregateInput
  }

  export type SessionUploadScalarWhereWithAggregatesInput = {
    AND?: SessionUploadScalarWhereWithAggregatesInput | SessionUploadScalarWhereWithAggregatesInput[]
    OR?: SessionUploadScalarWhereWithAggregatesInput[]
    NOT?: SessionUploadScalarWhereWithAggregatesInput | SessionUploadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionUpload"> | string
    sessionUploadUrl?: StringWithAggregatesFilter<"SessionUpload"> | string
    mediaId?: StringWithAggregatesFilter<"SessionUpload"> | string
    created_at?: DateTimeWithAggregatesFilter<"SessionUpload"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"SessionUpload"> | Date | string
    expired_at?: DateTimeNullableWithAggregatesFilter<"SessionUpload"> | Date | string | null
  }

  export type MediaWhereInput = {
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    id?: StringFilter<"Media"> | string
    userId?: StringFilter<"Media"> | string
    title?: StringFilter<"Media"> | string
    views?: IntFilter<"Media"> | number
    duration?: FloatFilter<"Media"> | number
    plays?: IntFilter<"Media"> | number
    status?: EnumStatusResourceFilter<"Media"> | $Enums.StatusResource
    viewMode?: EnumStatusFilter<"Media"> | $Enums.Status
    createdAt?: DateTimeFilter<"Media"> | Date | string
    updatedAt?: DateTimeFilter<"Media"> | Date | string
    lockedAt?: DateTimeNullableFilter<"Media"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"Media"> | Date | string | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
    thumbnails?: ThumbnailListRelationFilter
    detail?: XOR<MediaDetailNullableRelationFilter, MediaDetailWhereInput> | null
    videoResources?: VideoResourceListRelationFilter
    audioResources?: AudioResourceListRelationFilter
    mediaReaction?: MediaReactionListRelationFilter
    history?: HistoryListRelationFilter
    mediaOnCategory?: MediaOnCategoryListRelationFilter
    comment?: CommentListRelationFilter
    mediaOnPlaylist?: MediaOnPlaylistListRelationFilter
    sessionUpload?: SessionUploadListRelationFilter
    mediaOnAlbum?: MediaOnAlbumListRelationFilter
  }

  export type MediaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    views?: SortOrder
    duration?: SortOrder
    plays?: SortOrder
    status?: SortOrder
    viewMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
    thumbnails?: ThumbnailOrderByRelationAggregateInput
    detail?: MediaDetailOrderByWithRelationInput
    videoResources?: VideoResourceOrderByRelationAggregateInput
    audioResources?: AudioResourceOrderByRelationAggregateInput
    mediaReaction?: MediaReactionOrderByRelationAggregateInput
    history?: HistoryOrderByRelationAggregateInput
    mediaOnCategory?: MediaOnCategoryOrderByRelationAggregateInput
    comment?: CommentOrderByRelationAggregateInput
    mediaOnPlaylist?: MediaOnPlaylistOrderByRelationAggregateInput
    sessionUpload?: SessionUploadOrderByRelationAggregateInput
    mediaOnAlbum?: MediaOnAlbumOrderByRelationAggregateInput
  }

  export type MediaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MediaWhereInput | MediaWhereInput[]
    OR?: MediaWhereInput[]
    NOT?: MediaWhereInput | MediaWhereInput[]
    userId?: StringFilter<"Media"> | string
    title?: StringFilter<"Media"> | string
    views?: IntFilter<"Media"> | number
    duration?: FloatFilter<"Media"> | number
    plays?: IntFilter<"Media"> | number
    status?: EnumStatusResourceFilter<"Media"> | $Enums.StatusResource
    viewMode?: EnumStatusFilter<"Media"> | $Enums.Status
    createdAt?: DateTimeFilter<"Media"> | Date | string
    updatedAt?: DateTimeFilter<"Media"> | Date | string
    lockedAt?: DateTimeNullableFilter<"Media"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"Media"> | Date | string | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
    thumbnails?: ThumbnailListRelationFilter
    detail?: XOR<MediaDetailNullableRelationFilter, MediaDetailWhereInput> | null
    videoResources?: VideoResourceListRelationFilter
    audioResources?: AudioResourceListRelationFilter
    mediaReaction?: MediaReactionListRelationFilter
    history?: HistoryListRelationFilter
    mediaOnCategory?: MediaOnCategoryListRelationFilter
    comment?: CommentListRelationFilter
    mediaOnPlaylist?: MediaOnPlaylistListRelationFilter
    sessionUpload?: SessionUploadListRelationFilter
    mediaOnAlbum?: MediaOnAlbumListRelationFilter
  }, "id">

  export type MediaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    views?: SortOrder
    duration?: SortOrder
    plays?: SortOrder
    status?: SortOrder
    viewMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    _count?: MediaCountOrderByAggregateInput
    _avg?: MediaAvgOrderByAggregateInput
    _max?: MediaMaxOrderByAggregateInput
    _min?: MediaMinOrderByAggregateInput
    _sum?: MediaSumOrderByAggregateInput
  }

  export type MediaScalarWhereWithAggregatesInput = {
    AND?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    OR?: MediaScalarWhereWithAggregatesInput[]
    NOT?: MediaScalarWhereWithAggregatesInput | MediaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Media"> | string
    userId?: StringWithAggregatesFilter<"Media"> | string
    title?: StringWithAggregatesFilter<"Media"> | string
    views?: IntWithAggregatesFilter<"Media"> | number
    duration?: FloatWithAggregatesFilter<"Media"> | number
    plays?: IntWithAggregatesFilter<"Media"> | number
    status?: EnumStatusResourceWithAggregatesFilter<"Media"> | $Enums.StatusResource
    viewMode?: EnumStatusWithAggregatesFilter<"Media"> | $Enums.Status
    createdAt?: DateTimeWithAggregatesFilter<"Media"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Media"> | Date | string
    lockedAt?: DateTimeNullableWithAggregatesFilter<"Media"> | Date | string | null
    publishedAt?: DateTimeNullableWithAggregatesFilter<"Media"> | Date | string | null
  }

  export type MediaReactionWhereInput = {
    AND?: MediaReactionWhereInput | MediaReactionWhereInput[]
    OR?: MediaReactionWhereInput[]
    NOT?: MediaReactionWhereInput | MediaReactionWhereInput[]
    id?: StringFilter<"MediaReaction"> | string
    userId?: StringFilter<"MediaReaction"> | string
    mediaId?: StringFilter<"MediaReaction"> | string
    isLike?: BoolFilter<"MediaReaction"> | boolean
    createdAt?: DateTimeFilter<"MediaReaction"> | Date | string
    updatedAt?: DateTimeFilter<"MediaReaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type MediaReactionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    isLike?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type MediaReactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    onlyReaction?: MediaReactionOnlyReactionCompoundUniqueInput
    AND?: MediaReactionWhereInput | MediaReactionWhereInput[]
    OR?: MediaReactionWhereInput[]
    NOT?: MediaReactionWhereInput | MediaReactionWhereInput[]
    userId?: StringFilter<"MediaReaction"> | string
    mediaId?: StringFilter<"MediaReaction"> | string
    isLike?: BoolFilter<"MediaReaction"> | boolean
    createdAt?: DateTimeFilter<"MediaReaction"> | Date | string
    updatedAt?: DateTimeFilter<"MediaReaction"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id" | "onlyReaction">

  export type MediaReactionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    isLike?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MediaReactionCountOrderByAggregateInput
    _max?: MediaReactionMaxOrderByAggregateInput
    _min?: MediaReactionMinOrderByAggregateInput
  }

  export type MediaReactionScalarWhereWithAggregatesInput = {
    AND?: MediaReactionScalarWhereWithAggregatesInput | MediaReactionScalarWhereWithAggregatesInput[]
    OR?: MediaReactionScalarWhereWithAggregatesInput[]
    NOT?: MediaReactionScalarWhereWithAggregatesInput | MediaReactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MediaReaction"> | string
    userId?: StringWithAggregatesFilter<"MediaReaction"> | string
    mediaId?: StringWithAggregatesFilter<"MediaReaction"> | string
    isLike?: BoolWithAggregatesFilter<"MediaReaction"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MediaReaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaReaction"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    mediaId?: StringFilter<"Comment"> | string
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    userId?: StringFilter<"Comment"> | string
    mediaId?: StringFilter<"Comment"> | string
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    mediaId?: StringWithAggregatesFilter<"Comment"> | string
    comment?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type PlaylistWhereInput = {
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    id?: StringFilter<"Playlist"> | string
    userId?: StringFilter<"Playlist"> | string
    title?: StringFilter<"Playlist"> | string
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    MediaOnPlaylist?: MediaOnPlaylistListRelationFilter
  }

  export type PlaylistOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    MediaOnPlaylist?: MediaOnPlaylistOrderByRelationAggregateInput
  }

  export type PlaylistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlaylistWhereInput | PlaylistWhereInput[]
    OR?: PlaylistWhereInput[]
    NOT?: PlaylistWhereInput | PlaylistWhereInput[]
    userId?: StringFilter<"Playlist"> | string
    title?: StringFilter<"Playlist"> | string
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    MediaOnPlaylist?: MediaOnPlaylistListRelationFilter
  }, "id">

  export type PlaylistOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlaylistCountOrderByAggregateInput
    _max?: PlaylistMaxOrderByAggregateInput
    _min?: PlaylistMinOrderByAggregateInput
  }

  export type PlaylistScalarWhereWithAggregatesInput = {
    AND?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    OR?: PlaylistScalarWhereWithAggregatesInput[]
    NOT?: PlaylistScalarWhereWithAggregatesInput | PlaylistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Playlist"> | string
    userId?: StringWithAggregatesFilter<"Playlist"> | string
    title?: StringWithAggregatesFilter<"Playlist"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Playlist"> | Date | string
  }

  export type MediaOnPlaylistWhereInput = {
    AND?: MediaOnPlaylistWhereInput | MediaOnPlaylistWhereInput[]
    OR?: MediaOnPlaylistWhereInput[]
    NOT?: MediaOnPlaylistWhereInput | MediaOnPlaylistWhereInput[]
    id?: IntFilter<"MediaOnPlaylist"> | number
    playlistId?: StringFilter<"MediaOnPlaylist"> | string
    mediaId?: StringFilter<"MediaOnPlaylist"> | string
    createdAt?: DateTimeFilter<"MediaOnPlaylist"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnPlaylist"> | Date | string
    sortNo?: IntFilter<"MediaOnPlaylist"> | number
    playlist?: XOR<PlaylistRelationFilter, PlaylistWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type MediaOnPlaylistOrderByWithRelationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortNo?: SortOrder
    playlist?: PlaylistOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type MediaOnPlaylistWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    playlistId_mediaId?: MediaOnPlaylistPlaylistIdMediaIdCompoundUniqueInput
    AND?: MediaOnPlaylistWhereInput | MediaOnPlaylistWhereInput[]
    OR?: MediaOnPlaylistWhereInput[]
    NOT?: MediaOnPlaylistWhereInput | MediaOnPlaylistWhereInput[]
    playlistId?: StringFilter<"MediaOnPlaylist"> | string
    mediaId?: StringFilter<"MediaOnPlaylist"> | string
    createdAt?: DateTimeFilter<"MediaOnPlaylist"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnPlaylist"> | Date | string
    sortNo?: IntFilter<"MediaOnPlaylist"> | number
    playlist?: XOR<PlaylistRelationFilter, PlaylistWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id" | "playlistId_mediaId">

  export type MediaOnPlaylistOrderByWithAggregationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortNo?: SortOrder
    _count?: MediaOnPlaylistCountOrderByAggregateInput
    _avg?: MediaOnPlaylistAvgOrderByAggregateInput
    _max?: MediaOnPlaylistMaxOrderByAggregateInput
    _min?: MediaOnPlaylistMinOrderByAggregateInput
    _sum?: MediaOnPlaylistSumOrderByAggregateInput
  }

  export type MediaOnPlaylistScalarWhereWithAggregatesInput = {
    AND?: MediaOnPlaylistScalarWhereWithAggregatesInput | MediaOnPlaylistScalarWhereWithAggregatesInput[]
    OR?: MediaOnPlaylistScalarWhereWithAggregatesInput[]
    NOT?: MediaOnPlaylistScalarWhereWithAggregatesInput | MediaOnPlaylistScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MediaOnPlaylist"> | number
    playlistId?: StringWithAggregatesFilter<"MediaOnPlaylist"> | string
    mediaId?: StringWithAggregatesFilter<"MediaOnPlaylist"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MediaOnPlaylist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaOnPlaylist"> | Date | string
    sortNo?: IntWithAggregatesFilter<"MediaOnPlaylist"> | number
  }

  export type HistoryWhereInput = {
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    id?: IntFilter<"History"> | number
    userId?: StringFilter<"History"> | string
    mediaId?: StringFilter<"History"> | string
    createdAt?: DateTimeFilter<"History"> | Date | string
    updatedAt?: DateTimeFilter<"History"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type HistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    media?: MediaOrderByWithRelationInput
  }

  export type HistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    onlyOne?: HistoryOnlyOneCompoundUniqueInput
    AND?: HistoryWhereInput | HistoryWhereInput[]
    OR?: HistoryWhereInput[]
    NOT?: HistoryWhereInput | HistoryWhereInput[]
    userId?: StringFilter<"History"> | string
    mediaId?: StringFilter<"History"> | string
    createdAt?: DateTimeFilter<"History"> | Date | string
    updatedAt?: DateTimeFilter<"History"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id" | "onlyOne">

  export type HistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HistoryCountOrderByAggregateInput
    _avg?: HistoryAvgOrderByAggregateInput
    _max?: HistoryMaxOrderByAggregateInput
    _min?: HistoryMinOrderByAggregateInput
    _sum?: HistorySumOrderByAggregateInput
  }

  export type HistoryScalarWhereWithAggregatesInput = {
    AND?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    OR?: HistoryScalarWhereWithAggregatesInput[]
    NOT?: HistoryScalarWhereWithAggregatesInput | HistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"History"> | number
    userId?: StringWithAggregatesFilter<"History"> | string
    mediaId?: StringWithAggregatesFilter<"History"> | string
    createdAt?: DateTimeWithAggregatesFilter<"History"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"History"> | Date | string
  }

  export type SubscriberWhereInput = {
    AND?: SubscriberWhereInput | SubscriberWhereInput[]
    OR?: SubscriberWhereInput[]
    NOT?: SubscriberWhereInput | SubscriberWhereInput[]
    id?: IntFilter<"Subscriber"> | number
    userId?: StringFilter<"Subscriber"> | string
    channelId?: StringFilter<"Subscriber"> | string
    createdAt?: DateTimeFilter<"Subscriber"> | Date | string
    updatedAt?: DateTimeFilter<"Subscriber"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SubscriberOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    channel?: UserOrderByWithRelationInput
  }

  export type SubscriberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_channelId?: SubscriberUserIdChannelIdCompoundUniqueInput
    AND?: SubscriberWhereInput | SubscriberWhereInput[]
    OR?: SubscriberWhereInput[]
    NOT?: SubscriberWhereInput | SubscriberWhereInput[]
    userId?: StringFilter<"Subscriber"> | string
    channelId?: StringFilter<"Subscriber"> | string
    createdAt?: DateTimeFilter<"Subscriber"> | Date | string
    updatedAt?: DateTimeFilter<"Subscriber"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_channelId">

  export type SubscriberOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriberCountOrderByAggregateInput
    _avg?: SubscriberAvgOrderByAggregateInput
    _max?: SubscriberMaxOrderByAggregateInput
    _min?: SubscriberMinOrderByAggregateInput
    _sum?: SubscriberSumOrderByAggregateInput
  }

  export type SubscriberScalarWhereWithAggregatesInput = {
    AND?: SubscriberScalarWhereWithAggregatesInput | SubscriberScalarWhereWithAggregatesInput[]
    OR?: SubscriberScalarWhereWithAggregatesInput[]
    NOT?: SubscriberScalarWhereWithAggregatesInput | SubscriberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subscriber"> | number
    userId?: StringWithAggregatesFilter<"Subscriber"> | string
    channelId?: StringWithAggregatesFilter<"Subscriber"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subscriber"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscriber"> | Date | string
  }

  export type NotificationSubscriptionsWhereInput = {
    AND?: NotificationSubscriptionsWhereInput | NotificationSubscriptionsWhereInput[]
    OR?: NotificationSubscriptionsWhereInput[]
    NOT?: NotificationSubscriptionsWhereInput | NotificationSubscriptionsWhereInput[]
    id?: IntFilter<"NotificationSubscriptions"> | number
    userId?: StringFilter<"NotificationSubscriptions"> | string
    subscription?: StringFilter<"NotificationSubscriptions"> | string
    createdAt?: DateTimeFilter<"NotificationSubscriptions"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSubscriptions"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationSubscriptionsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    subscription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationSubscriptionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationSubscriptionsWhereInput | NotificationSubscriptionsWhereInput[]
    OR?: NotificationSubscriptionsWhereInput[]
    NOT?: NotificationSubscriptionsWhereInput | NotificationSubscriptionsWhereInput[]
    userId?: StringFilter<"NotificationSubscriptions"> | string
    subscription?: StringFilter<"NotificationSubscriptions"> | string
    createdAt?: DateTimeFilter<"NotificationSubscriptions"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSubscriptions"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationSubscriptionsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    subscription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationSubscriptionsCountOrderByAggregateInput
    _avg?: NotificationSubscriptionsAvgOrderByAggregateInput
    _max?: NotificationSubscriptionsMaxOrderByAggregateInput
    _min?: NotificationSubscriptionsMinOrderByAggregateInput
    _sum?: NotificationSubscriptionsSumOrderByAggregateInput
  }

  export type NotificationSubscriptionsScalarWhereWithAggregatesInput = {
    AND?: NotificationSubscriptionsScalarWhereWithAggregatesInput | NotificationSubscriptionsScalarWhereWithAggregatesInput[]
    OR?: NotificationSubscriptionsScalarWhereWithAggregatesInput[]
    NOT?: NotificationSubscriptionsScalarWhereWithAggregatesInput | NotificationSubscriptionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NotificationSubscriptions"> | number
    userId?: StringWithAggregatesFilter<"NotificationSubscriptions"> | string
    subscription?: StringWithAggregatesFilter<"NotificationSubscriptions"> | string
    createdAt?: DateTimeWithAggregatesFilter<"NotificationSubscriptions"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationSubscriptions"> | Date | string
  }

  export type VideoResourceWhereInput = {
    AND?: VideoResourceWhereInput | VideoResourceWhereInput[]
    OR?: VideoResourceWhereInput[]
    NOT?: VideoResourceWhereInput | VideoResourceWhereInput[]
    id?: StringFilter<"VideoResource"> | string
    mediaId?: StringFilter<"VideoResource"> | string
    label?: StringFilter<"VideoResource"> | string
    url?: StringFilter<"VideoResource"> | string
    createdAt?: DateTimeFilter<"VideoResource"> | Date | string
    updatedAt?: DateTimeFilter<"VideoResource"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type VideoResourceOrderByWithRelationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    media?: MediaOrderByWithRelationInput
  }

  export type VideoResourceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VideoResourceWhereInput | VideoResourceWhereInput[]
    OR?: VideoResourceWhereInput[]
    NOT?: VideoResourceWhereInput | VideoResourceWhereInput[]
    mediaId?: StringFilter<"VideoResource"> | string
    label?: StringFilter<"VideoResource"> | string
    url?: StringFilter<"VideoResource"> | string
    createdAt?: DateTimeFilter<"VideoResource"> | Date | string
    updatedAt?: DateTimeFilter<"VideoResource"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type VideoResourceOrderByWithAggregationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VideoResourceCountOrderByAggregateInput
    _max?: VideoResourceMaxOrderByAggregateInput
    _min?: VideoResourceMinOrderByAggregateInput
  }

  export type VideoResourceScalarWhereWithAggregatesInput = {
    AND?: VideoResourceScalarWhereWithAggregatesInput | VideoResourceScalarWhereWithAggregatesInput[]
    OR?: VideoResourceScalarWhereWithAggregatesInput[]
    NOT?: VideoResourceScalarWhereWithAggregatesInput | VideoResourceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VideoResource"> | string
    mediaId?: StringWithAggregatesFilter<"VideoResource"> | string
    label?: StringWithAggregatesFilter<"VideoResource"> | string
    url?: StringWithAggregatesFilter<"VideoResource"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VideoResource"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"VideoResource"> | Date | string
  }

  export type AudioResourceWhereInput = {
    AND?: AudioResourceWhereInput | AudioResourceWhereInput[]
    OR?: AudioResourceWhereInput[]
    NOT?: AudioResourceWhereInput | AudioResourceWhereInput[]
    id?: StringFilter<"AudioResource"> | string
    mediaId?: StringFilter<"AudioResource"> | string
    label?: EnumAudioQualityFilter<"AudioResource"> | $Enums.AudioQuality
    fileId?: StringFilter<"AudioResource"> | string
    createdAt?: DateTimeFilter<"AudioResource"> | Date | string
    updatedAt?: DateTimeFilter<"AudioResource"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type AudioResourceOrderByWithRelationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    fileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    media?: MediaOrderByWithRelationInput
  }

  export type AudioResourceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fileId_label?: AudioResourceFileIdLabelCompoundUniqueInput
    AND?: AudioResourceWhereInput | AudioResourceWhereInput[]
    OR?: AudioResourceWhereInput[]
    NOT?: AudioResourceWhereInput | AudioResourceWhereInput[]
    mediaId?: StringFilter<"AudioResource"> | string
    label?: EnumAudioQualityFilter<"AudioResource"> | $Enums.AudioQuality
    fileId?: StringFilter<"AudioResource"> | string
    createdAt?: DateTimeFilter<"AudioResource"> | Date | string
    updatedAt?: DateTimeFilter<"AudioResource"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id" | "fileId_label">

  export type AudioResourceOrderByWithAggregationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    fileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AudioResourceCountOrderByAggregateInput
    _max?: AudioResourceMaxOrderByAggregateInput
    _min?: AudioResourceMinOrderByAggregateInput
  }

  export type AudioResourceScalarWhereWithAggregatesInput = {
    AND?: AudioResourceScalarWhereWithAggregatesInput | AudioResourceScalarWhereWithAggregatesInput[]
    OR?: AudioResourceScalarWhereWithAggregatesInput[]
    NOT?: AudioResourceScalarWhereWithAggregatesInput | AudioResourceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AudioResource"> | string
    mediaId?: StringWithAggregatesFilter<"AudioResource"> | string
    label?: EnumAudioQualityWithAggregatesFilter<"AudioResource"> | $Enums.AudioQuality
    fileId?: StringWithAggregatesFilter<"AudioResource"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AudioResource"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AudioResource"> | Date | string
  }

  export type MediaDetailWhereInput = {
    AND?: MediaDetailWhereInput | MediaDetailWhereInput[]
    OR?: MediaDetailWhereInput[]
    NOT?: MediaDetailWhereInput | MediaDetailWhereInput[]
    id?: StringFilter<"MediaDetail"> | string
    description?: StringFilter<"MediaDetail"> | string
    createdAt?: DateTimeFilter<"MediaDetail"> | Date | string
    updatedAt?: DateTimeFilter<"MediaDetail"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type MediaDetailOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    media?: MediaOrderByWithRelationInput
  }

  export type MediaDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MediaDetailWhereInput | MediaDetailWhereInput[]
    OR?: MediaDetailWhereInput[]
    NOT?: MediaDetailWhereInput | MediaDetailWhereInput[]
    description?: StringFilter<"MediaDetail"> | string
    createdAt?: DateTimeFilter<"MediaDetail"> | Date | string
    updatedAt?: DateTimeFilter<"MediaDetail"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type MediaDetailOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MediaDetailCountOrderByAggregateInput
    _max?: MediaDetailMaxOrderByAggregateInput
    _min?: MediaDetailMinOrderByAggregateInput
  }

  export type MediaDetailScalarWhereWithAggregatesInput = {
    AND?: MediaDetailScalarWhereWithAggregatesInput | MediaDetailScalarWhereWithAggregatesInput[]
    OR?: MediaDetailScalarWhereWithAggregatesInput[]
    NOT?: MediaDetailScalarWhereWithAggregatesInput | MediaDetailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MediaDetail"> | string
    description?: StringWithAggregatesFilter<"MediaDetail"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MediaDetail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaDetail"> | Date | string
  }

  export type ThumbnailWhereInput = {
    AND?: ThumbnailWhereInput | ThumbnailWhereInput[]
    OR?: ThumbnailWhereInput[]
    NOT?: ThumbnailWhereInput | ThumbnailWhereInput[]
    id?: StringFilter<"Thumbnail"> | string
    url?: StringFilter<"Thumbnail"> | string
    isPrimary?: BoolFilter<"Thumbnail"> | boolean
    mediaId?: StringFilter<"Thumbnail"> | string
    createdAt?: DateTimeFilter<"Thumbnail"> | Date | string
    updatedAt?: DateTimeFilter<"Thumbnail"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }

  export type ThumbnailOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    media?: MediaOrderByWithRelationInput
  }

  export type ThumbnailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ThumbnailWhereInput | ThumbnailWhereInput[]
    OR?: ThumbnailWhereInput[]
    NOT?: ThumbnailWhereInput | ThumbnailWhereInput[]
    url?: StringFilter<"Thumbnail"> | string
    isPrimary?: BoolFilter<"Thumbnail"> | boolean
    mediaId?: StringFilter<"Thumbnail"> | string
    createdAt?: DateTimeFilter<"Thumbnail"> | Date | string
    updatedAt?: DateTimeFilter<"Thumbnail"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
  }, "id">

  export type ThumbnailOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ThumbnailCountOrderByAggregateInput
    _max?: ThumbnailMaxOrderByAggregateInput
    _min?: ThumbnailMinOrderByAggregateInput
  }

  export type ThumbnailScalarWhereWithAggregatesInput = {
    AND?: ThumbnailScalarWhereWithAggregatesInput | ThumbnailScalarWhereWithAggregatesInput[]
    OR?: ThumbnailScalarWhereWithAggregatesInput[]
    NOT?: ThumbnailScalarWhereWithAggregatesInput | ThumbnailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Thumbnail"> | string
    url?: StringWithAggregatesFilter<"Thumbnail"> | string
    isPrimary?: BoolWithAggregatesFilter<"Thumbnail"> | boolean
    mediaId?: StringWithAggregatesFilter<"Thumbnail"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Thumbnail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Thumbnail"> | Date | string
  }

  export type PaymentTransactionWhereInput = {
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    id?: IntFilter<"PaymentTransaction"> | number
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    PaymentTransactionDetail?: PaymentTransactionDetailListRelationFilter
  }

  export type PaymentTransactionOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    PaymentTransactionDetail?: PaymentTransactionDetailOrderByRelationAggregateInput
  }

  export type PaymentTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    PaymentTransactionDetail?: PaymentTransactionDetailListRelationFilter
  }, "id">

  export type PaymentTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentTransactionCountOrderByAggregateInput
    _avg?: PaymentTransactionAvgOrderByAggregateInput
    _max?: PaymentTransactionMaxOrderByAggregateInput
    _min?: PaymentTransactionMinOrderByAggregateInput
    _sum?: PaymentTransactionSumOrderByAggregateInput
  }

  export type PaymentTransactionScalarWhereWithAggregatesInput = {
    AND?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    OR?: PaymentTransactionScalarWhereWithAggregatesInput[]
    NOT?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaymentTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
  }

  export type PaymentTransactionDetailWhereInput = {
    AND?: PaymentTransactionDetailWhereInput | PaymentTransactionDetailWhereInput[]
    OR?: PaymentTransactionDetailWhereInput[]
    NOT?: PaymentTransactionDetailWhereInput | PaymentTransactionDetailWhereInput[]
    id?: IntFilter<"PaymentTransactionDetail"> | number
    totalPrice?: FloatFilter<"PaymentTransactionDetail"> | number
    paymentMethod?: EnumPaymentMethodFilter<"PaymentTransactionDetail"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"PaymentTransactionDetail"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransactionDetail"> | Date | string
    paymentTransaction?: XOR<PaymentTransactionRelationFilter, PaymentTransactionWhereInput>
  }

  export type PaymentTransactionDetailOrderByWithRelationInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    paymentTransaction?: PaymentTransactionOrderByWithRelationInput
  }

  export type PaymentTransactionDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentTransactionDetailWhereInput | PaymentTransactionDetailWhereInput[]
    OR?: PaymentTransactionDetailWhereInput[]
    NOT?: PaymentTransactionDetailWhereInput | PaymentTransactionDetailWhereInput[]
    totalPrice?: FloatFilter<"PaymentTransactionDetail"> | number
    paymentMethod?: EnumPaymentMethodFilter<"PaymentTransactionDetail"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"PaymentTransactionDetail"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransactionDetail"> | Date | string
    paymentTransaction?: XOR<PaymentTransactionRelationFilter, PaymentTransactionWhereInput>
  }, "id">

  export type PaymentTransactionDetailOrderByWithAggregationInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentTransactionDetailCountOrderByAggregateInput
    _avg?: PaymentTransactionDetailAvgOrderByAggregateInput
    _max?: PaymentTransactionDetailMaxOrderByAggregateInput
    _min?: PaymentTransactionDetailMinOrderByAggregateInput
    _sum?: PaymentTransactionDetailSumOrderByAggregateInput
  }

  export type PaymentTransactionDetailScalarWhereWithAggregatesInput = {
    AND?: PaymentTransactionDetailScalarWhereWithAggregatesInput | PaymentTransactionDetailScalarWhereWithAggregatesInput[]
    OR?: PaymentTransactionDetailScalarWhereWithAggregatesInput[]
    NOT?: PaymentTransactionDetailScalarWhereWithAggregatesInput | PaymentTransactionDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PaymentTransactionDetail"> | number
    totalPrice?: FloatWithAggregatesFilter<"PaymentTransactionDetail"> | number
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"PaymentTransactionDetail"> | $Enums.PaymentMethod
    createdAt?: DateTimeWithAggregatesFilter<"PaymentTransactionDetail"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentTransactionDetail"> | Date | string
  }

  export type MediaOnAlbumWhereInput = {
    AND?: MediaOnAlbumWhereInput | MediaOnAlbumWhereInput[]
    OR?: MediaOnAlbumWhereInput[]
    NOT?: MediaOnAlbumWhereInput | MediaOnAlbumWhereInput[]
    id?: IntFilter<"MediaOnAlbum"> | number
    albumId?: StringFilter<"MediaOnAlbum"> | string
    mediaId?: StringFilter<"MediaOnAlbum"> | string
    createdAt?: DateTimeFilter<"MediaOnAlbum"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnAlbum"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
  }

  export type MediaOnAlbumOrderByWithRelationInput = {
    id?: SortOrder
    albumId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    media?: MediaOrderByWithRelationInput
    album?: AlbumOrderByWithRelationInput
  }

  export type MediaOnAlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mediaId_albumId?: MediaOnAlbumMediaIdAlbumIdCompoundUniqueInput
    AND?: MediaOnAlbumWhereInput | MediaOnAlbumWhereInput[]
    OR?: MediaOnAlbumWhereInput[]
    NOT?: MediaOnAlbumWhereInput | MediaOnAlbumWhereInput[]
    albumId?: StringFilter<"MediaOnAlbum"> | string
    mediaId?: StringFilter<"MediaOnAlbum"> | string
    createdAt?: DateTimeFilter<"MediaOnAlbum"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnAlbum"> | Date | string
    media?: XOR<MediaRelationFilter, MediaWhereInput>
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
  }, "id" | "mediaId_albumId">

  export type MediaOnAlbumOrderByWithAggregationInput = {
    id?: SortOrder
    albumId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MediaOnAlbumCountOrderByAggregateInput
    _avg?: MediaOnAlbumAvgOrderByAggregateInput
    _max?: MediaOnAlbumMaxOrderByAggregateInput
    _min?: MediaOnAlbumMinOrderByAggregateInput
    _sum?: MediaOnAlbumSumOrderByAggregateInput
  }

  export type MediaOnAlbumScalarWhereWithAggregatesInput = {
    AND?: MediaOnAlbumScalarWhereWithAggregatesInput | MediaOnAlbumScalarWhereWithAggregatesInput[]
    OR?: MediaOnAlbumScalarWhereWithAggregatesInput[]
    NOT?: MediaOnAlbumScalarWhereWithAggregatesInput | MediaOnAlbumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MediaOnAlbum"> | number
    albumId?: StringWithAggregatesFilter<"MediaOnAlbum"> | string
    mediaId?: StringWithAggregatesFilter<"MediaOnAlbum"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MediaOnAlbum"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MediaOnAlbum"> | Date | string
  }

  export type AlbumWhereInput = {
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    id?: StringFilter<"Album"> | string
    name?: StringFilter<"Album"> | string
    description?: StringNullableFilter<"Album"> | string | null
    userId?: StringFilter<"Album"> | string
    createdAt?: DateTimeFilter<"Album"> | Date | string
    updatedAt?: DateTimeFilter<"Album"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    mediaOnAlbum?: MediaOnAlbumListRelationFilter
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    mediaOnAlbum?: MediaOnAlbumOrderByRelationAggregateInput
  }

  export type AlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    name?: StringFilter<"Album"> | string
    description?: StringNullableFilter<"Album"> | string | null
    userId?: StringFilter<"Album"> | string
    createdAt?: DateTimeFilter<"Album"> | Date | string
    updatedAt?: DateTimeFilter<"Album"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    mediaOnAlbum?: MediaOnAlbumListRelationFilter
  }, "id">

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    OR?: AlbumScalarWhereWithAggregatesInput[]
    NOT?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Album"> | string
    name?: StringWithAggregatesFilter<"Album"> | string
    description?: StringNullableWithAggregatesFilter<"Album"> | string | null
    userId?: StringWithAggregatesFilter<"Album"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Album"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Album"> | Date | string
  }

  export type SocialAccountWhereInput = {
    AND?: SocialAccountWhereInput | SocialAccountWhereInput[]
    OR?: SocialAccountWhereInput[]
    NOT?: SocialAccountWhereInput | SocialAccountWhereInput[]
    id?: IntFilter<"SocialAccount"> | number
    userId?: StringFilter<"SocialAccount"> | string
    type?: EnumAccountTypeFilter<"SocialAccount"> | $Enums.AccountType
    fullName?: StringFilter<"SocialAccount"> | string
    avatarUrl?: StringNullableFilter<"SocialAccount"> | string | null
    accountUrl?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiredAt?: DateTimeFilter<"SocialAccount"> | Date | string
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
    disabledAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SocialAccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    accountUrl?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disabledAt?: SortOrderInput | SortOrder
    owner?: UserOrderByWithRelationInput
  }

  export type SocialAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_accountUrl_type?: SocialAccountUserIdAccountUrlTypeCompoundUniqueInput
    AND?: SocialAccountWhereInput | SocialAccountWhereInput[]
    OR?: SocialAccountWhereInput[]
    NOT?: SocialAccountWhereInput | SocialAccountWhereInput[]
    userId?: StringFilter<"SocialAccount"> | string
    type?: EnumAccountTypeFilter<"SocialAccount"> | $Enums.AccountType
    fullName?: StringFilter<"SocialAccount"> | string
    avatarUrl?: StringNullableFilter<"SocialAccount"> | string | null
    accountUrl?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiredAt?: DateTimeFilter<"SocialAccount"> | Date | string
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
    disabledAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
    owner?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId_accountUrl_type">

  export type SocialAccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    accountUrl?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disabledAt?: SortOrderInput | SortOrder
    _count?: SocialAccountCountOrderByAggregateInput
    _avg?: SocialAccountAvgOrderByAggregateInput
    _max?: SocialAccountMaxOrderByAggregateInput
    _min?: SocialAccountMinOrderByAggregateInput
    _sum?: SocialAccountSumOrderByAggregateInput
  }

  export type SocialAccountScalarWhereWithAggregatesInput = {
    AND?: SocialAccountScalarWhereWithAggregatesInput | SocialAccountScalarWhereWithAggregatesInput[]
    OR?: SocialAccountScalarWhereWithAggregatesInput[]
    NOT?: SocialAccountScalarWhereWithAggregatesInput | SocialAccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SocialAccount"> | number
    userId?: StringWithAggregatesFilter<"SocialAccount"> | string
    type?: EnumAccountTypeWithAggregatesFilter<"SocialAccount"> | $Enums.AccountType
    fullName?: StringWithAggregatesFilter<"SocialAccount"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    accountUrl?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"SocialAccount"> | string | null
    expiredAt?: DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SocialAccount"> | Date | string
    disabledAt?: DateTimeNullableWithAggregatesFilter<"SocialAccount"> | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserPaymentMethodCreateInput = {
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserPaymentMethodInput
  }

  export type UserPaymentMethodUncheckedCreateInput = {
    id?: number
    userId: string
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPaymentMethodUpdateInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserPaymentMethodNestedInput
  }

  export type UserPaymentMethodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPaymentMethodCreateManyInput = {
    id?: number
    userId: string
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPaymentMethodUpdateManyMutationInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPaymentMethodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryOnMedia?: MediaOnCategoryCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    categoryOnMedia?: MediaOnCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryOnMedia?: MediaOnCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryOnMedia?: MediaOnCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnCategoryCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutCategoryOnMediaInput
    media: MediaCreateNestedOneWithoutMediaOnCategoryInput
  }

  export type MediaOnCategoryUncheckedCreateInput = {
    id?: number
    categoryId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnCategoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutCategoryOnMediaNestedInput
    media?: MediaUpdateOneRequiredWithoutMediaOnCategoryNestedInput
  }

  export type MediaOnCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnCategoryCreateManyInput = {
    id?: number
    categoryId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnCategoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUploadCreateInput = {
    id?: string
    sessionUploadUrl: string
    created_at?: Date | string
    updated_at?: Date | string
    expired_at?: Date | string | null
    Media: MediaCreateNestedOneWithoutSessionUploadInput
  }

  export type SessionUploadUncheckedCreateInput = {
    id?: string
    sessionUploadUrl: string
    mediaId: string
    created_at?: Date | string
    updated_at?: Date | string
    expired_at?: Date | string | null
  }

  export type SessionUploadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionUploadUrl?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expired_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Media?: MediaUpdateOneRequiredWithoutSessionUploadNestedInput
  }

  export type SessionUploadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionUploadUrl?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expired_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUploadCreateManyInput = {
    id?: string
    sessionUploadUrl: string
    mediaId: string
    created_at?: Date | string
    updated_at?: Date | string
    expired_at?: Date | string | null
  }

  export type SessionUploadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionUploadUrl?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expired_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUploadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionUploadUrl?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expired_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MediaCreateInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateManyInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
  }

  export type MediaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MediaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MediaReactionCreateInput = {
    id?: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMediaReactionsInput
    media: MediaCreateNestedOneWithoutMediaReactionInput
  }

  export type MediaReactionUncheckedCreateInput = {
    id?: string
    userId: string
    mediaId: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaReactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMediaReactionsNestedInput
    media?: MediaUpdateOneRequiredWithoutMediaReactionNestedInput
  }

  export type MediaReactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaReactionCreateManyInput = {
    id?: string
    userId: string
    mediaId: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaReactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaReactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentInput
    media: MediaCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    userId: string
    mediaId: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
    media?: MediaUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    userId: string
    mediaId: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistCreateInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlaylistInput
    MediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlaylistNestedInput
    MediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistCreateManyInput = {
    id?: string
    userId: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnPlaylistCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
    playlist: PlaylistCreateNestedOneWithoutMediaOnPlaylistInput
    media: MediaCreateNestedOneWithoutMediaOnPlaylistInput
  }

  export type MediaOnPlaylistUncheckedCreateInput = {
    id?: number
    playlistId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
  }

  export type MediaOnPlaylistUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
    playlist?: PlaylistUpdateOneRequiredWithoutMediaOnPlaylistNestedInput
    media?: MediaUpdateOneRequiredWithoutMediaOnPlaylistNestedInput
  }

  export type MediaOnPlaylistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
  }

  export type MediaOnPlaylistCreateManyInput = {
    id?: number
    playlistId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
  }

  export type MediaOnPlaylistUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
  }

  export type MediaOnPlaylistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
  }

  export type HistoryCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHistoriesInput
    media: MediaCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateInput = {
    id?: number
    userId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHistoriesNestedInput
    media?: MediaUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryCreateManyInput = {
    id?: number
    userId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriberCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscribersInput
    channel: UserCreateNestedOneWithoutChannelInput
  }

  export type SubscriberUncheckedCreateInput = {
    id?: number
    userId: string
    channelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriberUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscribersNestedInput
    channel?: UserUpdateOneRequiredWithoutChannelNestedInput
  }

  export type SubscriberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriberCreateManyInput = {
    id?: number
    userId: string
    channelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriberUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSubscriptionsCreateInput = {
    subscription: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationSubscriptionsInput
  }

  export type NotificationSubscriptionsUncheckedCreateInput = {
    id?: number
    userId: string
    subscription: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSubscriptionsUpdateInput = {
    subscription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationSubscriptionsNestedInput
  }

  export type NotificationSubscriptionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    subscription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSubscriptionsCreateManyInput = {
    id?: number
    userId: string
    subscription: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSubscriptionsUpdateManyMutationInput = {
    subscription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSubscriptionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    subscription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoResourceCreateInput = {
    id?: string
    label: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutVideoResourcesInput
  }

  export type VideoResourceUncheckedCreateInput = {
    id?: string
    mediaId: string
    label: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoResourceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutVideoResourcesNestedInput
  }

  export type VideoResourceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoResourceCreateManyInput = {
    id?: string
    mediaId: string
    label: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoResourceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoResourceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AudioResourceCreateInput = {
    id?: string
    label: $Enums.AudioQuality
    fileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutAudioResourcesInput
  }

  export type AudioResourceUncheckedCreateInput = {
    id?: string
    mediaId: string
    label: $Enums.AudioQuality
    fileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AudioResourceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: EnumAudioQualityFieldUpdateOperationsInput | $Enums.AudioQuality
    fileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutAudioResourcesNestedInput
  }

  export type AudioResourceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    label?: EnumAudioQualityFieldUpdateOperationsInput | $Enums.AudioQuality
    fileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AudioResourceCreateManyInput = {
    id?: string
    mediaId: string
    label: $Enums.AudioQuality
    fileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AudioResourceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: EnumAudioQualityFieldUpdateOperationsInput | $Enums.AudioQuality
    fileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AudioResourceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    label?: EnumAudioQualityFieldUpdateOperationsInput | $Enums.AudioQuality
    fileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaDetailCreateInput = {
    description?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutDetailInput
  }

  export type MediaDetailUncheckedCreateInput = {
    id: string
    description?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaDetailUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutDetailNestedInput
  }

  export type MediaDetailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaDetailCreateManyInput = {
    id: string
    description?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaDetailUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaDetailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThumbnailCreateInput = {
    id?: string
    url: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutThumbnailsInput
  }

  export type ThumbnailUncheckedCreateInput = {
    id?: string
    url: string
    isPrimary?: boolean
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThumbnailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutThumbnailsNestedInput
  }

  export type ThumbnailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThumbnailCreateManyInput = {
    id?: string
    url: string
    isPrimary?: boolean
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThumbnailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThumbnailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    PaymentTransactionDetail?: PaymentTransactionDetailCreateNestedManyWithoutPaymentTransactionInput
  }

  export type PaymentTransactionUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    PaymentTransactionDetail?: PaymentTransactionDetailUncheckedCreateNestedManyWithoutPaymentTransactionInput
  }

  export type PaymentTransactionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentTransactionDetail?: PaymentTransactionDetailUpdateManyWithoutPaymentTransactionNestedInput
  }

  export type PaymentTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PaymentTransactionDetail?: PaymentTransactionDetailUncheckedUpdateManyWithoutPaymentTransactionNestedInput
  }

  export type PaymentTransactionCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionDetailCreateInput = {
    totalPrice: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
    paymentTransaction: PaymentTransactionCreateNestedOneWithoutPaymentTransactionDetailInput
  }

  export type PaymentTransactionDetailUncheckedCreateInput = {
    id: number
    totalPrice: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionDetailUpdateInput = {
    totalPrice?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentTransaction?: PaymentTransactionUpdateOneRequiredWithoutPaymentTransactionDetailNestedInput
  }

  export type PaymentTransactionDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionDetailCreateManyInput = {
    id: number
    totalPrice: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionDetailUpdateManyMutationInput = {
    totalPrice?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnAlbumCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutMediaOnAlbumInput
    album: AlbumCreateNestedOneWithoutMediaOnAlbumInput
  }

  export type MediaOnAlbumUncheckedCreateInput = {
    id?: number
    albumId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnAlbumUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutMediaOnAlbumNestedInput
    album?: AlbumUpdateOneRequiredWithoutMediaOnAlbumNestedInput
  }

  export type MediaOnAlbumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnAlbumCreateManyInput = {
    id?: number
    albumId: string
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnAlbumUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnAlbumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutAlbumInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutAlbumNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountCreateInput = {
    type?: $Enums.AccountType
    fullName: string
    avatarUrl?: string | null
    accountUrl?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiredAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    disabledAt?: Date | string | null
    owner: UserCreateNestedOneWithoutSocialAccountInput
  }

  export type SocialAccountUncheckedCreateInput = {
    id?: number
    userId: string
    type?: $Enums.AccountType
    fullName: string
    avatarUrl?: string | null
    accountUrl?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiredAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    disabledAt?: Date | string | null
  }

  export type SocialAccountUpdateInput = {
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accountUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disabledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutSocialAccountNestedInput
  }

  export type SocialAccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accountUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disabledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SocialAccountCreateManyInput = {
    id?: number
    userId: string
    type?: $Enums.AccountType
    fullName: string
    avatarUrl?: string | null
    accountUrl?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiredAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    disabledAt?: Date | string | null
  }

  export type SocialAccountUpdateManyMutationInput = {
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accountUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disabledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SocialAccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accountUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disabledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type MediaListRelationFilter = {
    every?: MediaWhereInput
    some?: MediaWhereInput
    none?: MediaWhereInput
  }

  export type MediaReactionListRelationFilter = {
    every?: MediaReactionWhereInput
    some?: MediaReactionWhereInput
    none?: MediaReactionWhereInput
  }

  export type HistoryListRelationFilter = {
    every?: HistoryWhereInput
    some?: HistoryWhereInput
    none?: HistoryWhereInput
  }

  export type SubscriberListRelationFilter = {
    every?: SubscriberWhereInput
    some?: SubscriberWhereInput
    none?: SubscriberWhereInput
  }

  export type NotificationSubscriptionsListRelationFilter = {
    every?: NotificationSubscriptionsWhereInput
    some?: NotificationSubscriptionsWhereInput
    none?: NotificationSubscriptionsWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type PlaylistListRelationFilter = {
    every?: PlaylistWhereInput
    some?: PlaylistWhereInput
    none?: PlaylistWhereInput
  }

  export type UserPaymentMethodListRelationFilter = {
    every?: UserPaymentMethodWhereInput
    some?: UserPaymentMethodWhereInput
    none?: UserPaymentMethodWhereInput
  }

  export type AlbumListRelationFilter = {
    every?: AlbumWhereInput
    some?: AlbumWhereInput
    none?: AlbumWhereInput
  }

  export type SocialAccountListRelationFilter = {
    every?: SocialAccountWhereInput
    some?: SocialAccountWhereInput
    none?: SocialAccountWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaReactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationSubscriptionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlaylistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPaymentMethodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SocialAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserPaymentMethodCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPaymentMethodAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserPaymentMethodMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPaymentMethodMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserPaymentMethodSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type MediaOnCategoryListRelationFilter = {
    every?: MediaOnCategoryWhereInput
    some?: MediaOnCategoryWhereInput
    none?: MediaOnCategoryWhereInput
  }

  export type MediaOnCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type MediaRelationFilter = {
    is?: MediaWhereInput
    isNot?: MediaWhereInput
  }

  export type MediaOnCategoryCategoryIdMediaIdCompoundUniqueInput = {
    categoryId: string
    mediaId: string
  }

  export type MediaOnCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaOnCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MediaOnCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaOnCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaOnCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionUploadCountOrderByAggregateInput = {
    id?: SortOrder
    sessionUploadUrl?: SortOrder
    mediaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    expired_at?: SortOrder
  }

  export type SessionUploadMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionUploadUrl?: SortOrder
    mediaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    expired_at?: SortOrder
  }

  export type SessionUploadMinOrderByAggregateInput = {
    id?: SortOrder
    sessionUploadUrl?: SortOrder
    mediaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    expired_at?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumStatusResourceFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResource | EnumStatusResourceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResource[]
    notIn?: $Enums.StatusResource[]
    not?: NestedEnumStatusResourceFilter<$PrismaModel> | $Enums.StatusResource
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type ThumbnailListRelationFilter = {
    every?: ThumbnailWhereInput
    some?: ThumbnailWhereInput
    none?: ThumbnailWhereInput
  }

  export type MediaDetailNullableRelationFilter = {
    is?: MediaDetailWhereInput | null
    isNot?: MediaDetailWhereInput | null
  }

  export type VideoResourceListRelationFilter = {
    every?: VideoResourceWhereInput
    some?: VideoResourceWhereInput
    none?: VideoResourceWhereInput
  }

  export type AudioResourceListRelationFilter = {
    every?: AudioResourceWhereInput
    some?: AudioResourceWhereInput
    none?: AudioResourceWhereInput
  }

  export type MediaOnPlaylistListRelationFilter = {
    every?: MediaOnPlaylistWhereInput
    some?: MediaOnPlaylistWhereInput
    none?: MediaOnPlaylistWhereInput
  }

  export type SessionUploadListRelationFilter = {
    every?: SessionUploadWhereInput
    some?: SessionUploadWhereInput
    none?: SessionUploadWhereInput
  }

  export type MediaOnAlbumListRelationFilter = {
    every?: MediaOnAlbumWhereInput
    some?: MediaOnAlbumWhereInput
    none?: MediaOnAlbumWhereInput
  }

  export type ThumbnailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoResourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AudioResourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaOnPlaylistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionUploadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaOnAlbumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MediaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    views?: SortOrder
    duration?: SortOrder
    plays?: SortOrder
    status?: SortOrder
    viewMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type MediaAvgOrderByAggregateInput = {
    views?: SortOrder
    duration?: SortOrder
    plays?: SortOrder
  }

  export type MediaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    views?: SortOrder
    duration?: SortOrder
    plays?: SortOrder
    status?: SortOrder
    viewMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type MediaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    views?: SortOrder
    duration?: SortOrder
    plays?: SortOrder
    status?: SortOrder
    viewMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lockedAt?: SortOrder
    publishedAt?: SortOrder
  }

  export type MediaSumOrderByAggregateInput = {
    views?: SortOrder
    duration?: SortOrder
    plays?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumStatusResourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResource | EnumStatusResourceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResource[]
    notIn?: $Enums.StatusResource[]
    not?: NestedEnumStatusResourceWithAggregatesFilter<$PrismaModel> | $Enums.StatusResource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusResourceFilter<$PrismaModel>
    _max?: NestedEnumStatusResourceFilter<$PrismaModel>
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MediaReactionOnlyReactionCompoundUniqueInput = {
    userId: string
    mediaId: string
  }

  export type MediaReactionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    isLike?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaReactionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    isLike?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaReactionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    isLike?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlaylistRelationFilter = {
    is?: PlaylistWhereInput
    isNot?: PlaylistWhereInput
  }

  export type MediaOnPlaylistPlaylistIdMediaIdCompoundUniqueInput = {
    playlistId: string
    mediaId: string
  }

  export type MediaOnPlaylistCountOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortNo?: SortOrder
  }

  export type MediaOnPlaylistAvgOrderByAggregateInput = {
    id?: SortOrder
    sortNo?: SortOrder
  }

  export type MediaOnPlaylistMaxOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortNo?: SortOrder
  }

  export type MediaOnPlaylistMinOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sortNo?: SortOrder
  }

  export type MediaOnPlaylistSumOrderByAggregateInput = {
    id?: SortOrder
    sortNo?: SortOrder
  }

  export type HistoryOnlyOneCompoundUniqueInput = {
    userId: string
    mediaId: string
  }

  export type HistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HistoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HistorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubscriberUserIdChannelIdCompoundUniqueInput = {
    userId: string
    channelId: string
  }

  export type SubscriberCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriberAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SubscriberMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriberMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriberSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationSubscriptionsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSubscriptionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationSubscriptionsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSubscriptionsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subscription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSubscriptionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VideoResourceCountOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoResourceMaxOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoResourceMinOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAudioQualityFilter<$PrismaModel = never> = {
    equals?: $Enums.AudioQuality | EnumAudioQualityFieldRefInput<$PrismaModel>
    in?: $Enums.AudioQuality[]
    notIn?: $Enums.AudioQuality[]
    not?: NestedEnumAudioQualityFilter<$PrismaModel> | $Enums.AudioQuality
  }

  export type AudioResourceFileIdLabelCompoundUniqueInput = {
    fileId: string
    label: $Enums.AudioQuality
  }

  export type AudioResourceCountOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    fileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AudioResourceMaxOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    fileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AudioResourceMinOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    label?: SortOrder
    fileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAudioQualityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AudioQuality | EnumAudioQualityFieldRefInput<$PrismaModel>
    in?: $Enums.AudioQuality[]
    notIn?: $Enums.AudioQuality[]
    not?: NestedEnumAudioQualityWithAggregatesFilter<$PrismaModel> | $Enums.AudioQuality
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAudioQualityFilter<$PrismaModel>
    _max?: NestedEnumAudioQualityFilter<$PrismaModel>
  }

  export type MediaDetailCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaDetailMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThumbnailCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThumbnailMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ThumbnailMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    isPrimary?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionDetailListRelationFilter = {
    every?: PaymentTransactionDetailWhereInput
    some?: PaymentTransactionDetailWhereInput
    none?: PaymentTransactionDetailWhereInput
  }

  export type PaymentTransactionDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PaymentTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PaymentTransactionRelationFilter = {
    is?: PaymentTransactionWhereInput
    isNot?: PaymentTransactionWhereInput
  }

  export type PaymentTransactionDetailCountOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
  }

  export type PaymentTransactionDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionDetailMinOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
    paymentMethod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionDetailSumOrderByAggregateInput = {
    id?: SortOrder
    totalPrice?: SortOrder
  }

  export type AlbumRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type MediaOnAlbumMediaIdAlbumIdCompoundUniqueInput = {
    mediaId: string
    albumId: string
  }

  export type MediaOnAlbumCountOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaOnAlbumAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MediaOnAlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaOnAlbumMinOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    mediaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MediaOnAlbumSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[]
    notIn?: $Enums.AccountType[]
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type SocialAccountUserIdAccountUrlTypeCompoundUniqueInput = {
    userId: string
    accountUrl: string
    type: $Enums.AccountType
  }

  export type SocialAccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    accountUrl?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disabledAt?: SortOrder
  }

  export type SocialAccountAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SocialAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    accountUrl?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disabledAt?: SortOrder
  }

  export type SocialAccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    fullName?: SortOrder
    avatarUrl?: SortOrder
    accountUrl?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    disabledAt?: SortOrder
  }

  export type SocialAccountSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[]
    notIn?: $Enums.AccountType[]
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type MediaCreateNestedManyWithoutOwnerInput = {
    create?: XOR<MediaCreateWithoutOwnerInput, MediaUncheckedCreateWithoutOwnerInput> | MediaCreateWithoutOwnerInput[] | MediaUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOwnerInput | MediaCreateOrConnectWithoutOwnerInput[]
    createMany?: MediaCreateManyOwnerInputEnvelope
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
  }

  export type MediaReactionCreateNestedManyWithoutUserInput = {
    create?: XOR<MediaReactionCreateWithoutUserInput, MediaReactionUncheckedCreateWithoutUserInput> | MediaReactionCreateWithoutUserInput[] | MediaReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutUserInput | MediaReactionCreateOrConnectWithoutUserInput[]
    createMany?: MediaReactionCreateManyUserInputEnvelope
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
  }

  export type HistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type SubscriberCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriberCreateWithoutUserInput, SubscriberUncheckedCreateWithoutUserInput> | SubscriberCreateWithoutUserInput[] | SubscriberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutUserInput | SubscriberCreateOrConnectWithoutUserInput[]
    createMany?: SubscriberCreateManyUserInputEnvelope
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
  }

  export type SubscriberCreateNestedManyWithoutChannelInput = {
    create?: XOR<SubscriberCreateWithoutChannelInput, SubscriberUncheckedCreateWithoutChannelInput> | SubscriberCreateWithoutChannelInput[] | SubscriberUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutChannelInput | SubscriberCreateOrConnectWithoutChannelInput[]
    createMany?: SubscriberCreateManyChannelInputEnvelope
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
  }

  export type NotificationSubscriptionsCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationSubscriptionsCreateWithoutUserInput, NotificationSubscriptionsUncheckedCreateWithoutUserInput> | NotificationSubscriptionsCreateWithoutUserInput[] | NotificationSubscriptionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationSubscriptionsCreateOrConnectWithoutUserInput | NotificationSubscriptionsCreateOrConnectWithoutUserInput[]
    createMany?: NotificationSubscriptionsCreateManyUserInputEnvelope
    connect?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type PlaylistCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type UserPaymentMethodCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPaymentMethodCreateWithoutUserInput, UserPaymentMethodUncheckedCreateWithoutUserInput> | UserPaymentMethodCreateWithoutUserInput[] | UserPaymentMethodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentMethodCreateOrConnectWithoutUserInput | UserPaymentMethodCreateOrConnectWithoutUserInput[]
    createMany?: UserPaymentMethodCreateManyUserInputEnvelope
    connect?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
  }

  export type AlbumCreateNestedManyWithoutOwnerInput = {
    create?: XOR<AlbumCreateWithoutOwnerInput, AlbumUncheckedCreateWithoutOwnerInput> | AlbumCreateWithoutOwnerInput[] | AlbumUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutOwnerInput | AlbumCreateOrConnectWithoutOwnerInput[]
    createMany?: AlbumCreateManyOwnerInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type SocialAccountCreateNestedManyWithoutOwnerInput = {
    create?: XOR<SocialAccountCreateWithoutOwnerInput, SocialAccountUncheckedCreateWithoutOwnerInput> | SocialAccountCreateWithoutOwnerInput[] | SocialAccountUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutOwnerInput | SocialAccountCreateOrConnectWithoutOwnerInput[]
    createMany?: SocialAccountCreateManyOwnerInputEnvelope
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
  }

  export type MediaUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<MediaCreateWithoutOwnerInput, MediaUncheckedCreateWithoutOwnerInput> | MediaCreateWithoutOwnerInput[] | MediaUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOwnerInput | MediaCreateOrConnectWithoutOwnerInput[]
    createMany?: MediaCreateManyOwnerInputEnvelope
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
  }

  export type MediaReactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MediaReactionCreateWithoutUserInput, MediaReactionUncheckedCreateWithoutUserInput> | MediaReactionCreateWithoutUserInput[] | MediaReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutUserInput | MediaReactionCreateOrConnectWithoutUserInput[]
    createMany?: MediaReactionCreateManyUserInputEnvelope
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type SubscriberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubscriberCreateWithoutUserInput, SubscriberUncheckedCreateWithoutUserInput> | SubscriberCreateWithoutUserInput[] | SubscriberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutUserInput | SubscriberCreateOrConnectWithoutUserInput[]
    createMany?: SubscriberCreateManyUserInputEnvelope
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
  }

  export type SubscriberUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<SubscriberCreateWithoutChannelInput, SubscriberUncheckedCreateWithoutChannelInput> | SubscriberCreateWithoutChannelInput[] | SubscriberUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutChannelInput | SubscriberCreateOrConnectWithoutChannelInput[]
    createMany?: SubscriberCreateManyChannelInputEnvelope
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
  }

  export type NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationSubscriptionsCreateWithoutUserInput, NotificationSubscriptionsUncheckedCreateWithoutUserInput> | NotificationSubscriptionsCreateWithoutUserInput[] | NotificationSubscriptionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationSubscriptionsCreateOrConnectWithoutUserInput | NotificationSubscriptionsCreateOrConnectWithoutUserInput[]
    createMany?: NotificationSubscriptionsCreateManyUserInputEnvelope
    connect?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type PlaylistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
  }

  export type UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPaymentMethodCreateWithoutUserInput, UserPaymentMethodUncheckedCreateWithoutUserInput> | UserPaymentMethodCreateWithoutUserInput[] | UserPaymentMethodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentMethodCreateOrConnectWithoutUserInput | UserPaymentMethodCreateOrConnectWithoutUserInput[]
    createMany?: UserPaymentMethodCreateManyUserInputEnvelope
    connect?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
  }

  export type AlbumUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<AlbumCreateWithoutOwnerInput, AlbumUncheckedCreateWithoutOwnerInput> | AlbumCreateWithoutOwnerInput[] | AlbumUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutOwnerInput | AlbumCreateOrConnectWithoutOwnerInput[]
    createMany?: AlbumCreateManyOwnerInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type SocialAccountUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<SocialAccountCreateWithoutOwnerInput, SocialAccountUncheckedCreateWithoutOwnerInput> | SocialAccountCreateWithoutOwnerInput[] | SocialAccountUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutOwnerInput | SocialAccountCreateOrConnectWithoutOwnerInput[]
    createMany?: SocialAccountCreateManyOwnerInputEnvelope
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type MediaUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<MediaCreateWithoutOwnerInput, MediaUncheckedCreateWithoutOwnerInput> | MediaCreateWithoutOwnerInput[] | MediaUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOwnerInput | MediaCreateOrConnectWithoutOwnerInput[]
    upsert?: MediaUpsertWithWhereUniqueWithoutOwnerInput | MediaUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: MediaCreateManyOwnerInputEnvelope
    set?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    disconnect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    delete?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    update?: MediaUpdateWithWhereUniqueWithoutOwnerInput | MediaUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: MediaUpdateManyWithWhereWithoutOwnerInput | MediaUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: MediaScalarWhereInput | MediaScalarWhereInput[]
  }

  export type MediaReactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<MediaReactionCreateWithoutUserInput, MediaReactionUncheckedCreateWithoutUserInput> | MediaReactionCreateWithoutUserInput[] | MediaReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutUserInput | MediaReactionCreateOrConnectWithoutUserInput[]
    upsert?: MediaReactionUpsertWithWhereUniqueWithoutUserInput | MediaReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MediaReactionCreateManyUserInputEnvelope
    set?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    disconnect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    delete?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    update?: MediaReactionUpdateWithWhereUniqueWithoutUserInput | MediaReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MediaReactionUpdateManyWithWhereWithoutUserInput | MediaReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MediaReactionScalarWhereInput | MediaReactionScalarWhereInput[]
  }

  export type HistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type SubscriberUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriberCreateWithoutUserInput, SubscriberUncheckedCreateWithoutUserInput> | SubscriberCreateWithoutUserInput[] | SubscriberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutUserInput | SubscriberCreateOrConnectWithoutUserInput[]
    upsert?: SubscriberUpsertWithWhereUniqueWithoutUserInput | SubscriberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriberCreateManyUserInputEnvelope
    set?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    disconnect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    delete?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    update?: SubscriberUpdateWithWhereUniqueWithoutUserInput | SubscriberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriberUpdateManyWithWhereWithoutUserInput | SubscriberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriberScalarWhereInput | SubscriberScalarWhereInput[]
  }

  export type SubscriberUpdateManyWithoutChannelNestedInput = {
    create?: XOR<SubscriberCreateWithoutChannelInput, SubscriberUncheckedCreateWithoutChannelInput> | SubscriberCreateWithoutChannelInput[] | SubscriberUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutChannelInput | SubscriberCreateOrConnectWithoutChannelInput[]
    upsert?: SubscriberUpsertWithWhereUniqueWithoutChannelInput | SubscriberUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: SubscriberCreateManyChannelInputEnvelope
    set?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    disconnect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    delete?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    update?: SubscriberUpdateWithWhereUniqueWithoutChannelInput | SubscriberUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: SubscriberUpdateManyWithWhereWithoutChannelInput | SubscriberUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: SubscriberScalarWhereInput | SubscriberScalarWhereInput[]
  }

  export type NotificationSubscriptionsUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationSubscriptionsCreateWithoutUserInput, NotificationSubscriptionsUncheckedCreateWithoutUserInput> | NotificationSubscriptionsCreateWithoutUserInput[] | NotificationSubscriptionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationSubscriptionsCreateOrConnectWithoutUserInput | NotificationSubscriptionsCreateOrConnectWithoutUserInput[]
    upsert?: NotificationSubscriptionsUpsertWithWhereUniqueWithoutUserInput | NotificationSubscriptionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationSubscriptionsCreateManyUserInputEnvelope
    set?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    disconnect?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    delete?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    connect?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    update?: NotificationSubscriptionsUpdateWithWhereUniqueWithoutUserInput | NotificationSubscriptionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationSubscriptionsUpdateManyWithWhereWithoutUserInput | NotificationSubscriptionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationSubscriptionsScalarWhereInput | NotificationSubscriptionsScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PlaylistUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type UserPaymentMethodUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPaymentMethodCreateWithoutUserInput, UserPaymentMethodUncheckedCreateWithoutUserInput> | UserPaymentMethodCreateWithoutUserInput[] | UserPaymentMethodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentMethodCreateOrConnectWithoutUserInput | UserPaymentMethodCreateOrConnectWithoutUserInput[]
    upsert?: UserPaymentMethodUpsertWithWhereUniqueWithoutUserInput | UserPaymentMethodUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPaymentMethodCreateManyUserInputEnvelope
    set?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    disconnect?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    delete?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    connect?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    update?: UserPaymentMethodUpdateWithWhereUniqueWithoutUserInput | UserPaymentMethodUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPaymentMethodUpdateManyWithWhereWithoutUserInput | UserPaymentMethodUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPaymentMethodScalarWhereInput | UserPaymentMethodScalarWhereInput[]
  }

  export type AlbumUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<AlbumCreateWithoutOwnerInput, AlbumUncheckedCreateWithoutOwnerInput> | AlbumCreateWithoutOwnerInput[] | AlbumUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutOwnerInput | AlbumCreateOrConnectWithoutOwnerInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutOwnerInput | AlbumUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: AlbumCreateManyOwnerInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutOwnerInput | AlbumUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutOwnerInput | AlbumUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type SocialAccountUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<SocialAccountCreateWithoutOwnerInput, SocialAccountUncheckedCreateWithoutOwnerInput> | SocialAccountCreateWithoutOwnerInput[] | SocialAccountUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutOwnerInput | SocialAccountCreateOrConnectWithoutOwnerInput[]
    upsert?: SocialAccountUpsertWithWhereUniqueWithoutOwnerInput | SocialAccountUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: SocialAccountCreateManyOwnerInputEnvelope
    set?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    disconnect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    delete?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    update?: SocialAccountUpdateWithWhereUniqueWithoutOwnerInput | SocialAccountUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: SocialAccountUpdateManyWithWhereWithoutOwnerInput | SocialAccountUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
  }

  export type MediaUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<MediaCreateWithoutOwnerInput, MediaUncheckedCreateWithoutOwnerInput> | MediaCreateWithoutOwnerInput[] | MediaUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: MediaCreateOrConnectWithoutOwnerInput | MediaCreateOrConnectWithoutOwnerInput[]
    upsert?: MediaUpsertWithWhereUniqueWithoutOwnerInput | MediaUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: MediaCreateManyOwnerInputEnvelope
    set?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    disconnect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    delete?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    connect?: MediaWhereUniqueInput | MediaWhereUniqueInput[]
    update?: MediaUpdateWithWhereUniqueWithoutOwnerInput | MediaUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: MediaUpdateManyWithWhereWithoutOwnerInput | MediaUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: MediaScalarWhereInput | MediaScalarWhereInput[]
  }

  export type MediaReactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MediaReactionCreateWithoutUserInput, MediaReactionUncheckedCreateWithoutUserInput> | MediaReactionCreateWithoutUserInput[] | MediaReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutUserInput | MediaReactionCreateOrConnectWithoutUserInput[]
    upsert?: MediaReactionUpsertWithWhereUniqueWithoutUserInput | MediaReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MediaReactionCreateManyUserInputEnvelope
    set?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    disconnect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    delete?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    update?: MediaReactionUpdateWithWhereUniqueWithoutUserInput | MediaReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MediaReactionUpdateManyWithWhereWithoutUserInput | MediaReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MediaReactionScalarWhereInput | MediaReactionScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput> | HistoryCreateWithoutUserInput[] | HistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutUserInput | HistoryCreateOrConnectWithoutUserInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutUserInput | HistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoryCreateManyUserInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutUserInput | HistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutUserInput | HistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type SubscriberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubscriberCreateWithoutUserInput, SubscriberUncheckedCreateWithoutUserInput> | SubscriberCreateWithoutUserInput[] | SubscriberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutUserInput | SubscriberCreateOrConnectWithoutUserInput[]
    upsert?: SubscriberUpsertWithWhereUniqueWithoutUserInput | SubscriberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubscriberCreateManyUserInputEnvelope
    set?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    disconnect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    delete?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    update?: SubscriberUpdateWithWhereUniqueWithoutUserInput | SubscriberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubscriberUpdateManyWithWhereWithoutUserInput | SubscriberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubscriberScalarWhereInput | SubscriberScalarWhereInput[]
  }

  export type SubscriberUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<SubscriberCreateWithoutChannelInput, SubscriberUncheckedCreateWithoutChannelInput> | SubscriberCreateWithoutChannelInput[] | SubscriberUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: SubscriberCreateOrConnectWithoutChannelInput | SubscriberCreateOrConnectWithoutChannelInput[]
    upsert?: SubscriberUpsertWithWhereUniqueWithoutChannelInput | SubscriberUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: SubscriberCreateManyChannelInputEnvelope
    set?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    disconnect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    delete?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    connect?: SubscriberWhereUniqueInput | SubscriberWhereUniqueInput[]
    update?: SubscriberUpdateWithWhereUniqueWithoutChannelInput | SubscriberUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: SubscriberUpdateManyWithWhereWithoutChannelInput | SubscriberUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: SubscriberScalarWhereInput | SubscriberScalarWhereInput[]
  }

  export type NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationSubscriptionsCreateWithoutUserInput, NotificationSubscriptionsUncheckedCreateWithoutUserInput> | NotificationSubscriptionsCreateWithoutUserInput[] | NotificationSubscriptionsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationSubscriptionsCreateOrConnectWithoutUserInput | NotificationSubscriptionsCreateOrConnectWithoutUserInput[]
    upsert?: NotificationSubscriptionsUpsertWithWhereUniqueWithoutUserInput | NotificationSubscriptionsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationSubscriptionsCreateManyUserInputEnvelope
    set?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    disconnect?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    delete?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    connect?: NotificationSubscriptionsWhereUniqueInput | NotificationSubscriptionsWhereUniqueInput[]
    update?: NotificationSubscriptionsUpdateWithWhereUniqueWithoutUserInput | NotificationSubscriptionsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationSubscriptionsUpdateManyWithWhereWithoutUserInput | NotificationSubscriptionsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationSubscriptionsScalarWhereInput | NotificationSubscriptionsScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PlaylistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput> | PlaylistCreateWithoutUserInput[] | PlaylistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlaylistCreateOrConnectWithoutUserInput | PlaylistCreateOrConnectWithoutUserInput[]
    upsert?: PlaylistUpsertWithWhereUniqueWithoutUserInput | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlaylistCreateManyUserInputEnvelope
    set?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    disconnect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    delete?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    connect?: PlaylistWhereUniqueInput | PlaylistWhereUniqueInput[]
    update?: PlaylistUpdateWithWhereUniqueWithoutUserInput | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlaylistUpdateManyWithWhereWithoutUserInput | PlaylistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
  }

  export type UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPaymentMethodCreateWithoutUserInput, UserPaymentMethodUncheckedCreateWithoutUserInput> | UserPaymentMethodCreateWithoutUserInput[] | UserPaymentMethodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPaymentMethodCreateOrConnectWithoutUserInput | UserPaymentMethodCreateOrConnectWithoutUserInput[]
    upsert?: UserPaymentMethodUpsertWithWhereUniqueWithoutUserInput | UserPaymentMethodUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPaymentMethodCreateManyUserInputEnvelope
    set?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    disconnect?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    delete?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    connect?: UserPaymentMethodWhereUniqueInput | UserPaymentMethodWhereUniqueInput[]
    update?: UserPaymentMethodUpdateWithWhereUniqueWithoutUserInput | UserPaymentMethodUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPaymentMethodUpdateManyWithWhereWithoutUserInput | UserPaymentMethodUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPaymentMethodScalarWhereInput | UserPaymentMethodScalarWhereInput[]
  }

  export type AlbumUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<AlbumCreateWithoutOwnerInput, AlbumUncheckedCreateWithoutOwnerInput> | AlbumCreateWithoutOwnerInput[] | AlbumUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutOwnerInput | AlbumCreateOrConnectWithoutOwnerInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutOwnerInput | AlbumUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: AlbumCreateManyOwnerInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutOwnerInput | AlbumUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutOwnerInput | AlbumUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<SocialAccountCreateWithoutOwnerInput, SocialAccountUncheckedCreateWithoutOwnerInput> | SocialAccountCreateWithoutOwnerInput[] | SocialAccountUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: SocialAccountCreateOrConnectWithoutOwnerInput | SocialAccountCreateOrConnectWithoutOwnerInput[]
    upsert?: SocialAccountUpsertWithWhereUniqueWithoutOwnerInput | SocialAccountUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: SocialAccountCreateManyOwnerInputEnvelope
    set?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    disconnect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    delete?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    connect?: SocialAccountWhereUniqueInput | SocialAccountWhereUniqueInput[]
    update?: SocialAccountUpdateWithWhereUniqueWithoutOwnerInput | SocialAccountUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: SocialAccountUpdateManyWithWhereWithoutOwnerInput | SocialAccountUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserPaymentMethodInput = {
    create?: XOR<UserCreateWithoutUserPaymentMethodInput, UserUncheckedCreateWithoutUserPaymentMethodInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPaymentMethodInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type UserUpdateOneRequiredWithoutUserPaymentMethodNestedInput = {
    create?: XOR<UserCreateWithoutUserPaymentMethodInput, UserUncheckedCreateWithoutUserPaymentMethodInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPaymentMethodInput
    upsert?: UserUpsertWithoutUserPaymentMethodInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserPaymentMethodInput, UserUpdateWithoutUserPaymentMethodInput>, UserUncheckedUpdateWithoutUserPaymentMethodInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MediaOnCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MediaOnCategoryCreateWithoutCategoryInput, MediaOnCategoryUncheckedCreateWithoutCategoryInput> | MediaOnCategoryCreateWithoutCategoryInput[] | MediaOnCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutCategoryInput | MediaOnCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: MediaOnCategoryCreateManyCategoryInputEnvelope
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
  }

  export type MediaOnCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MediaOnCategoryCreateWithoutCategoryInput, MediaOnCategoryUncheckedCreateWithoutCategoryInput> | MediaOnCategoryCreateWithoutCategoryInput[] | MediaOnCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutCategoryInput | MediaOnCategoryCreateOrConnectWithoutCategoryInput[]
    createMany?: MediaOnCategoryCreateManyCategoryInputEnvelope
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
  }

  export type MediaOnCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MediaOnCategoryCreateWithoutCategoryInput, MediaOnCategoryUncheckedCreateWithoutCategoryInput> | MediaOnCategoryCreateWithoutCategoryInput[] | MediaOnCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutCategoryInput | MediaOnCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: MediaOnCategoryUpsertWithWhereUniqueWithoutCategoryInput | MediaOnCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MediaOnCategoryCreateManyCategoryInputEnvelope
    set?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    disconnect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    delete?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    update?: MediaOnCategoryUpdateWithWhereUniqueWithoutCategoryInput | MediaOnCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MediaOnCategoryUpdateManyWithWhereWithoutCategoryInput | MediaOnCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MediaOnCategoryScalarWhereInput | MediaOnCategoryScalarWhereInput[]
  }

  export type MediaOnCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MediaOnCategoryCreateWithoutCategoryInput, MediaOnCategoryUncheckedCreateWithoutCategoryInput> | MediaOnCategoryCreateWithoutCategoryInput[] | MediaOnCategoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutCategoryInput | MediaOnCategoryCreateOrConnectWithoutCategoryInput[]
    upsert?: MediaOnCategoryUpsertWithWhereUniqueWithoutCategoryInput | MediaOnCategoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MediaOnCategoryCreateManyCategoryInputEnvelope
    set?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    disconnect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    delete?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    update?: MediaOnCategoryUpdateWithWhereUniqueWithoutCategoryInput | MediaOnCategoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MediaOnCategoryUpdateManyWithWhereWithoutCategoryInput | MediaOnCategoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MediaOnCategoryScalarWhereInput | MediaOnCategoryScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutCategoryOnMediaInput = {
    create?: XOR<CategoryCreateWithoutCategoryOnMediaInput, CategoryUncheckedCreateWithoutCategoryOnMediaInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCategoryOnMediaInput
    connect?: CategoryWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutMediaOnCategoryInput = {
    create?: XOR<MediaCreateWithoutMediaOnCategoryInput, MediaUncheckedCreateWithoutMediaOnCategoryInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaOnCategoryInput
    connect?: MediaWhereUniqueInput
  }

  export type CategoryUpdateOneRequiredWithoutCategoryOnMediaNestedInput = {
    create?: XOR<CategoryCreateWithoutCategoryOnMediaInput, CategoryUncheckedCreateWithoutCategoryOnMediaInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCategoryOnMediaInput
    upsert?: CategoryUpsertWithoutCategoryOnMediaInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutCategoryOnMediaInput, CategoryUpdateWithoutCategoryOnMediaInput>, CategoryUncheckedUpdateWithoutCategoryOnMediaInput>
  }

  export type MediaUpdateOneRequiredWithoutMediaOnCategoryNestedInput = {
    create?: XOR<MediaCreateWithoutMediaOnCategoryInput, MediaUncheckedCreateWithoutMediaOnCategoryInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaOnCategoryInput
    upsert?: MediaUpsertWithoutMediaOnCategoryInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutMediaOnCategoryInput, MediaUpdateWithoutMediaOnCategoryInput>, MediaUncheckedUpdateWithoutMediaOnCategoryInput>
  }

  export type MediaCreateNestedOneWithoutSessionUploadInput = {
    create?: XOR<MediaCreateWithoutSessionUploadInput, MediaUncheckedCreateWithoutSessionUploadInput>
    connectOrCreate?: MediaCreateOrConnectWithoutSessionUploadInput
    connect?: MediaWhereUniqueInput
  }

  export type MediaUpdateOneRequiredWithoutSessionUploadNestedInput = {
    create?: XOR<MediaCreateWithoutSessionUploadInput, MediaUncheckedCreateWithoutSessionUploadInput>
    connectOrCreate?: MediaCreateOrConnectWithoutSessionUploadInput
    upsert?: MediaUpsertWithoutSessionUploadInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutSessionUploadInput, MediaUpdateWithoutSessionUploadInput>, MediaUncheckedUpdateWithoutSessionUploadInput>
  }

  export type UserCreateNestedOneWithoutMediaInput = {
    create?: XOR<UserCreateWithoutMediaInput, UserUncheckedCreateWithoutMediaInput>
    connectOrCreate?: UserCreateOrConnectWithoutMediaInput
    connect?: UserWhereUniqueInput
  }

  export type ThumbnailCreateNestedManyWithoutMediaInput = {
    create?: XOR<ThumbnailCreateWithoutMediaInput, ThumbnailUncheckedCreateWithoutMediaInput> | ThumbnailCreateWithoutMediaInput[] | ThumbnailUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: ThumbnailCreateOrConnectWithoutMediaInput | ThumbnailCreateOrConnectWithoutMediaInput[]
    createMany?: ThumbnailCreateManyMediaInputEnvelope
    connect?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
  }

  export type MediaDetailCreateNestedOneWithoutMediaInput = {
    create?: XOR<MediaDetailCreateWithoutMediaInput, MediaDetailUncheckedCreateWithoutMediaInput>
    connectOrCreate?: MediaDetailCreateOrConnectWithoutMediaInput
    connect?: MediaDetailWhereUniqueInput
  }

  export type VideoResourceCreateNestedManyWithoutMediaInput = {
    create?: XOR<VideoResourceCreateWithoutMediaInput, VideoResourceUncheckedCreateWithoutMediaInput> | VideoResourceCreateWithoutMediaInput[] | VideoResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: VideoResourceCreateOrConnectWithoutMediaInput | VideoResourceCreateOrConnectWithoutMediaInput[]
    createMany?: VideoResourceCreateManyMediaInputEnvelope
    connect?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
  }

  export type AudioResourceCreateNestedManyWithoutMediaInput = {
    create?: XOR<AudioResourceCreateWithoutMediaInput, AudioResourceUncheckedCreateWithoutMediaInput> | AudioResourceCreateWithoutMediaInput[] | AudioResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: AudioResourceCreateOrConnectWithoutMediaInput | AudioResourceCreateOrConnectWithoutMediaInput[]
    createMany?: AudioResourceCreateManyMediaInputEnvelope
    connect?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
  }

  export type MediaReactionCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaReactionCreateWithoutMediaInput, MediaReactionUncheckedCreateWithoutMediaInput> | MediaReactionCreateWithoutMediaInput[] | MediaReactionUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutMediaInput | MediaReactionCreateOrConnectWithoutMediaInput[]
    createMany?: MediaReactionCreateManyMediaInputEnvelope
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
  }

  export type HistoryCreateNestedManyWithoutMediaInput = {
    create?: XOR<HistoryCreateWithoutMediaInput, HistoryUncheckedCreateWithoutMediaInput> | HistoryCreateWithoutMediaInput[] | HistoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMediaInput | HistoryCreateOrConnectWithoutMediaInput[]
    createMany?: HistoryCreateManyMediaInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type MediaOnCategoryCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaOnCategoryCreateWithoutMediaInput, MediaOnCategoryUncheckedCreateWithoutMediaInput> | MediaOnCategoryCreateWithoutMediaInput[] | MediaOnCategoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutMediaInput | MediaOnCategoryCreateOrConnectWithoutMediaInput[]
    createMany?: MediaOnCategoryCreateManyMediaInputEnvelope
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutMediaInput = {
    create?: XOR<CommentCreateWithoutMediaInput, CommentUncheckedCreateWithoutMediaInput> | CommentCreateWithoutMediaInput[] | CommentUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMediaInput | CommentCreateOrConnectWithoutMediaInput[]
    createMany?: CommentCreateManyMediaInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type MediaOnPlaylistCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutMediaInput, MediaOnPlaylistUncheckedCreateWithoutMediaInput> | MediaOnPlaylistCreateWithoutMediaInput[] | MediaOnPlaylistUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutMediaInput | MediaOnPlaylistCreateOrConnectWithoutMediaInput[]
    createMany?: MediaOnPlaylistCreateManyMediaInputEnvelope
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
  }

  export type SessionUploadCreateNestedManyWithoutMediaInput = {
    create?: XOR<SessionUploadCreateWithoutMediaInput, SessionUploadUncheckedCreateWithoutMediaInput> | SessionUploadCreateWithoutMediaInput[] | SessionUploadUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SessionUploadCreateOrConnectWithoutMediaInput | SessionUploadCreateOrConnectWithoutMediaInput[]
    createMany?: SessionUploadCreateManyMediaInputEnvelope
    connect?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
  }

  export type MediaOnAlbumCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaOnAlbumCreateWithoutMediaInput, MediaOnAlbumUncheckedCreateWithoutMediaInput> | MediaOnAlbumCreateWithoutMediaInput[] | MediaOnAlbumUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutMediaInput | MediaOnAlbumCreateOrConnectWithoutMediaInput[]
    createMany?: MediaOnAlbumCreateManyMediaInputEnvelope
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
  }

  export type ThumbnailUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<ThumbnailCreateWithoutMediaInput, ThumbnailUncheckedCreateWithoutMediaInput> | ThumbnailCreateWithoutMediaInput[] | ThumbnailUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: ThumbnailCreateOrConnectWithoutMediaInput | ThumbnailCreateOrConnectWithoutMediaInput[]
    createMany?: ThumbnailCreateManyMediaInputEnvelope
    connect?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
  }

  export type MediaDetailUncheckedCreateNestedOneWithoutMediaInput = {
    create?: XOR<MediaDetailCreateWithoutMediaInput, MediaDetailUncheckedCreateWithoutMediaInput>
    connectOrCreate?: MediaDetailCreateOrConnectWithoutMediaInput
    connect?: MediaDetailWhereUniqueInput
  }

  export type VideoResourceUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<VideoResourceCreateWithoutMediaInput, VideoResourceUncheckedCreateWithoutMediaInput> | VideoResourceCreateWithoutMediaInput[] | VideoResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: VideoResourceCreateOrConnectWithoutMediaInput | VideoResourceCreateOrConnectWithoutMediaInput[]
    createMany?: VideoResourceCreateManyMediaInputEnvelope
    connect?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
  }

  export type AudioResourceUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<AudioResourceCreateWithoutMediaInput, AudioResourceUncheckedCreateWithoutMediaInput> | AudioResourceCreateWithoutMediaInput[] | AudioResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: AudioResourceCreateOrConnectWithoutMediaInput | AudioResourceCreateOrConnectWithoutMediaInput[]
    createMany?: AudioResourceCreateManyMediaInputEnvelope
    connect?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
  }

  export type MediaReactionUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaReactionCreateWithoutMediaInput, MediaReactionUncheckedCreateWithoutMediaInput> | MediaReactionCreateWithoutMediaInput[] | MediaReactionUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutMediaInput | MediaReactionCreateOrConnectWithoutMediaInput[]
    createMany?: MediaReactionCreateManyMediaInputEnvelope
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
  }

  export type HistoryUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<HistoryCreateWithoutMediaInput, HistoryUncheckedCreateWithoutMediaInput> | HistoryCreateWithoutMediaInput[] | HistoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMediaInput | HistoryCreateOrConnectWithoutMediaInput[]
    createMany?: HistoryCreateManyMediaInputEnvelope
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
  }

  export type MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaOnCategoryCreateWithoutMediaInput, MediaOnCategoryUncheckedCreateWithoutMediaInput> | MediaOnCategoryCreateWithoutMediaInput[] | MediaOnCategoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutMediaInput | MediaOnCategoryCreateOrConnectWithoutMediaInput[]
    createMany?: MediaOnCategoryCreateManyMediaInputEnvelope
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<CommentCreateWithoutMediaInput, CommentUncheckedCreateWithoutMediaInput> | CommentCreateWithoutMediaInput[] | CommentUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMediaInput | CommentCreateOrConnectWithoutMediaInput[]
    createMany?: CommentCreateManyMediaInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutMediaInput, MediaOnPlaylistUncheckedCreateWithoutMediaInput> | MediaOnPlaylistCreateWithoutMediaInput[] | MediaOnPlaylistUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutMediaInput | MediaOnPlaylistCreateOrConnectWithoutMediaInput[]
    createMany?: MediaOnPlaylistCreateManyMediaInputEnvelope
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
  }

  export type SessionUploadUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<SessionUploadCreateWithoutMediaInput, SessionUploadUncheckedCreateWithoutMediaInput> | SessionUploadCreateWithoutMediaInput[] | SessionUploadUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SessionUploadCreateOrConnectWithoutMediaInput | SessionUploadCreateOrConnectWithoutMediaInput[]
    createMany?: SessionUploadCreateManyMediaInputEnvelope
    connect?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
  }

  export type MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput = {
    create?: XOR<MediaOnAlbumCreateWithoutMediaInput, MediaOnAlbumUncheckedCreateWithoutMediaInput> | MediaOnAlbumCreateWithoutMediaInput[] | MediaOnAlbumUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutMediaInput | MediaOnAlbumCreateOrConnectWithoutMediaInput[]
    createMany?: MediaOnAlbumCreateManyMediaInputEnvelope
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStatusResourceFieldUpdateOperationsInput = {
    set?: $Enums.StatusResource
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserUpdateOneRequiredWithoutMediaNestedInput = {
    create?: XOR<UserCreateWithoutMediaInput, UserUncheckedCreateWithoutMediaInput>
    connectOrCreate?: UserCreateOrConnectWithoutMediaInput
    upsert?: UserUpsertWithoutMediaInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMediaInput, UserUpdateWithoutMediaInput>, UserUncheckedUpdateWithoutMediaInput>
  }

  export type ThumbnailUpdateManyWithoutMediaNestedInput = {
    create?: XOR<ThumbnailCreateWithoutMediaInput, ThumbnailUncheckedCreateWithoutMediaInput> | ThumbnailCreateWithoutMediaInput[] | ThumbnailUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: ThumbnailCreateOrConnectWithoutMediaInput | ThumbnailCreateOrConnectWithoutMediaInput[]
    upsert?: ThumbnailUpsertWithWhereUniqueWithoutMediaInput | ThumbnailUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: ThumbnailCreateManyMediaInputEnvelope
    set?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    disconnect?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    delete?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    connect?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    update?: ThumbnailUpdateWithWhereUniqueWithoutMediaInput | ThumbnailUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: ThumbnailUpdateManyWithWhereWithoutMediaInput | ThumbnailUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: ThumbnailScalarWhereInput | ThumbnailScalarWhereInput[]
  }

  export type MediaDetailUpdateOneWithoutMediaNestedInput = {
    create?: XOR<MediaDetailCreateWithoutMediaInput, MediaDetailUncheckedCreateWithoutMediaInput>
    connectOrCreate?: MediaDetailCreateOrConnectWithoutMediaInput
    upsert?: MediaDetailUpsertWithoutMediaInput
    disconnect?: MediaDetailWhereInput | boolean
    delete?: MediaDetailWhereInput | boolean
    connect?: MediaDetailWhereUniqueInput
    update?: XOR<XOR<MediaDetailUpdateToOneWithWhereWithoutMediaInput, MediaDetailUpdateWithoutMediaInput>, MediaDetailUncheckedUpdateWithoutMediaInput>
  }

  export type VideoResourceUpdateManyWithoutMediaNestedInput = {
    create?: XOR<VideoResourceCreateWithoutMediaInput, VideoResourceUncheckedCreateWithoutMediaInput> | VideoResourceCreateWithoutMediaInput[] | VideoResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: VideoResourceCreateOrConnectWithoutMediaInput | VideoResourceCreateOrConnectWithoutMediaInput[]
    upsert?: VideoResourceUpsertWithWhereUniqueWithoutMediaInput | VideoResourceUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: VideoResourceCreateManyMediaInputEnvelope
    set?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    disconnect?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    delete?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    connect?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    update?: VideoResourceUpdateWithWhereUniqueWithoutMediaInput | VideoResourceUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: VideoResourceUpdateManyWithWhereWithoutMediaInput | VideoResourceUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: VideoResourceScalarWhereInput | VideoResourceScalarWhereInput[]
  }

  export type AudioResourceUpdateManyWithoutMediaNestedInput = {
    create?: XOR<AudioResourceCreateWithoutMediaInput, AudioResourceUncheckedCreateWithoutMediaInput> | AudioResourceCreateWithoutMediaInput[] | AudioResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: AudioResourceCreateOrConnectWithoutMediaInput | AudioResourceCreateOrConnectWithoutMediaInput[]
    upsert?: AudioResourceUpsertWithWhereUniqueWithoutMediaInput | AudioResourceUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: AudioResourceCreateManyMediaInputEnvelope
    set?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    disconnect?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    delete?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    connect?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    update?: AudioResourceUpdateWithWhereUniqueWithoutMediaInput | AudioResourceUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: AudioResourceUpdateManyWithWhereWithoutMediaInput | AudioResourceUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: AudioResourceScalarWhereInput | AudioResourceScalarWhereInput[]
  }

  export type MediaReactionUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaReactionCreateWithoutMediaInput, MediaReactionUncheckedCreateWithoutMediaInput> | MediaReactionCreateWithoutMediaInput[] | MediaReactionUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutMediaInput | MediaReactionCreateOrConnectWithoutMediaInput[]
    upsert?: MediaReactionUpsertWithWhereUniqueWithoutMediaInput | MediaReactionUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaReactionCreateManyMediaInputEnvelope
    set?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    disconnect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    delete?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    update?: MediaReactionUpdateWithWhereUniqueWithoutMediaInput | MediaReactionUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaReactionUpdateManyWithWhereWithoutMediaInput | MediaReactionUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaReactionScalarWhereInput | MediaReactionScalarWhereInput[]
  }

  export type HistoryUpdateManyWithoutMediaNestedInput = {
    create?: XOR<HistoryCreateWithoutMediaInput, HistoryUncheckedCreateWithoutMediaInput> | HistoryCreateWithoutMediaInput[] | HistoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMediaInput | HistoryCreateOrConnectWithoutMediaInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutMediaInput | HistoryUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: HistoryCreateManyMediaInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutMediaInput | HistoryUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutMediaInput | HistoryUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type MediaOnCategoryUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaOnCategoryCreateWithoutMediaInput, MediaOnCategoryUncheckedCreateWithoutMediaInput> | MediaOnCategoryCreateWithoutMediaInput[] | MediaOnCategoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutMediaInput | MediaOnCategoryCreateOrConnectWithoutMediaInput[]
    upsert?: MediaOnCategoryUpsertWithWhereUniqueWithoutMediaInput | MediaOnCategoryUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaOnCategoryCreateManyMediaInputEnvelope
    set?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    disconnect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    delete?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    update?: MediaOnCategoryUpdateWithWhereUniqueWithoutMediaInput | MediaOnCategoryUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaOnCategoryUpdateManyWithWhereWithoutMediaInput | MediaOnCategoryUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaOnCategoryScalarWhereInput | MediaOnCategoryScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutMediaNestedInput = {
    create?: XOR<CommentCreateWithoutMediaInput, CommentUncheckedCreateWithoutMediaInput> | CommentCreateWithoutMediaInput[] | CommentUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMediaInput | CommentCreateOrConnectWithoutMediaInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutMediaInput | CommentUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: CommentCreateManyMediaInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutMediaInput | CommentUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutMediaInput | CommentUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type MediaOnPlaylistUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutMediaInput, MediaOnPlaylistUncheckedCreateWithoutMediaInput> | MediaOnPlaylistCreateWithoutMediaInput[] | MediaOnPlaylistUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutMediaInput | MediaOnPlaylistCreateOrConnectWithoutMediaInput[]
    upsert?: MediaOnPlaylistUpsertWithWhereUniqueWithoutMediaInput | MediaOnPlaylistUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaOnPlaylistCreateManyMediaInputEnvelope
    set?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    disconnect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    delete?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    update?: MediaOnPlaylistUpdateWithWhereUniqueWithoutMediaInput | MediaOnPlaylistUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaOnPlaylistUpdateManyWithWhereWithoutMediaInput | MediaOnPlaylistUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaOnPlaylistScalarWhereInput | MediaOnPlaylistScalarWhereInput[]
  }

  export type SessionUploadUpdateManyWithoutMediaNestedInput = {
    create?: XOR<SessionUploadCreateWithoutMediaInput, SessionUploadUncheckedCreateWithoutMediaInput> | SessionUploadCreateWithoutMediaInput[] | SessionUploadUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SessionUploadCreateOrConnectWithoutMediaInput | SessionUploadCreateOrConnectWithoutMediaInput[]
    upsert?: SessionUploadUpsertWithWhereUniqueWithoutMediaInput | SessionUploadUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: SessionUploadCreateManyMediaInputEnvelope
    set?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    disconnect?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    delete?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    connect?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    update?: SessionUploadUpdateWithWhereUniqueWithoutMediaInput | SessionUploadUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: SessionUploadUpdateManyWithWhereWithoutMediaInput | SessionUploadUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: SessionUploadScalarWhereInput | SessionUploadScalarWhereInput[]
  }

  export type MediaOnAlbumUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaOnAlbumCreateWithoutMediaInput, MediaOnAlbumUncheckedCreateWithoutMediaInput> | MediaOnAlbumCreateWithoutMediaInput[] | MediaOnAlbumUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutMediaInput | MediaOnAlbumCreateOrConnectWithoutMediaInput[]
    upsert?: MediaOnAlbumUpsertWithWhereUniqueWithoutMediaInput | MediaOnAlbumUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaOnAlbumCreateManyMediaInputEnvelope
    set?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    disconnect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    delete?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    update?: MediaOnAlbumUpdateWithWhereUniqueWithoutMediaInput | MediaOnAlbumUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaOnAlbumUpdateManyWithWhereWithoutMediaInput | MediaOnAlbumUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaOnAlbumScalarWhereInput | MediaOnAlbumScalarWhereInput[]
  }

  export type ThumbnailUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<ThumbnailCreateWithoutMediaInput, ThumbnailUncheckedCreateWithoutMediaInput> | ThumbnailCreateWithoutMediaInput[] | ThumbnailUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: ThumbnailCreateOrConnectWithoutMediaInput | ThumbnailCreateOrConnectWithoutMediaInput[]
    upsert?: ThumbnailUpsertWithWhereUniqueWithoutMediaInput | ThumbnailUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: ThumbnailCreateManyMediaInputEnvelope
    set?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    disconnect?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    delete?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    connect?: ThumbnailWhereUniqueInput | ThumbnailWhereUniqueInput[]
    update?: ThumbnailUpdateWithWhereUniqueWithoutMediaInput | ThumbnailUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: ThumbnailUpdateManyWithWhereWithoutMediaInput | ThumbnailUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: ThumbnailScalarWhereInput | ThumbnailScalarWhereInput[]
  }

  export type MediaDetailUncheckedUpdateOneWithoutMediaNestedInput = {
    create?: XOR<MediaDetailCreateWithoutMediaInput, MediaDetailUncheckedCreateWithoutMediaInput>
    connectOrCreate?: MediaDetailCreateOrConnectWithoutMediaInput
    upsert?: MediaDetailUpsertWithoutMediaInput
    disconnect?: MediaDetailWhereInput | boolean
    delete?: MediaDetailWhereInput | boolean
    connect?: MediaDetailWhereUniqueInput
    update?: XOR<XOR<MediaDetailUpdateToOneWithWhereWithoutMediaInput, MediaDetailUpdateWithoutMediaInput>, MediaDetailUncheckedUpdateWithoutMediaInput>
  }

  export type VideoResourceUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<VideoResourceCreateWithoutMediaInput, VideoResourceUncheckedCreateWithoutMediaInput> | VideoResourceCreateWithoutMediaInput[] | VideoResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: VideoResourceCreateOrConnectWithoutMediaInput | VideoResourceCreateOrConnectWithoutMediaInput[]
    upsert?: VideoResourceUpsertWithWhereUniqueWithoutMediaInput | VideoResourceUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: VideoResourceCreateManyMediaInputEnvelope
    set?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    disconnect?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    delete?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    connect?: VideoResourceWhereUniqueInput | VideoResourceWhereUniqueInput[]
    update?: VideoResourceUpdateWithWhereUniqueWithoutMediaInput | VideoResourceUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: VideoResourceUpdateManyWithWhereWithoutMediaInput | VideoResourceUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: VideoResourceScalarWhereInput | VideoResourceScalarWhereInput[]
  }

  export type AudioResourceUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<AudioResourceCreateWithoutMediaInput, AudioResourceUncheckedCreateWithoutMediaInput> | AudioResourceCreateWithoutMediaInput[] | AudioResourceUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: AudioResourceCreateOrConnectWithoutMediaInput | AudioResourceCreateOrConnectWithoutMediaInput[]
    upsert?: AudioResourceUpsertWithWhereUniqueWithoutMediaInput | AudioResourceUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: AudioResourceCreateManyMediaInputEnvelope
    set?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    disconnect?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    delete?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    connect?: AudioResourceWhereUniqueInput | AudioResourceWhereUniqueInput[]
    update?: AudioResourceUpdateWithWhereUniqueWithoutMediaInput | AudioResourceUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: AudioResourceUpdateManyWithWhereWithoutMediaInput | AudioResourceUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: AudioResourceScalarWhereInput | AudioResourceScalarWhereInput[]
  }

  export type MediaReactionUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaReactionCreateWithoutMediaInput, MediaReactionUncheckedCreateWithoutMediaInput> | MediaReactionCreateWithoutMediaInput[] | MediaReactionUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaReactionCreateOrConnectWithoutMediaInput | MediaReactionCreateOrConnectWithoutMediaInput[]
    upsert?: MediaReactionUpsertWithWhereUniqueWithoutMediaInput | MediaReactionUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaReactionCreateManyMediaInputEnvelope
    set?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    disconnect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    delete?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    connect?: MediaReactionWhereUniqueInput | MediaReactionWhereUniqueInput[]
    update?: MediaReactionUpdateWithWhereUniqueWithoutMediaInput | MediaReactionUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaReactionUpdateManyWithWhereWithoutMediaInput | MediaReactionUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaReactionScalarWhereInput | MediaReactionScalarWhereInput[]
  }

  export type HistoryUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<HistoryCreateWithoutMediaInput, HistoryUncheckedCreateWithoutMediaInput> | HistoryCreateWithoutMediaInput[] | HistoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: HistoryCreateOrConnectWithoutMediaInput | HistoryCreateOrConnectWithoutMediaInput[]
    upsert?: HistoryUpsertWithWhereUniqueWithoutMediaInput | HistoryUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: HistoryCreateManyMediaInputEnvelope
    set?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    disconnect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    delete?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    connect?: HistoryWhereUniqueInput | HistoryWhereUniqueInput[]
    update?: HistoryUpdateWithWhereUniqueWithoutMediaInput | HistoryUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: HistoryUpdateManyWithWhereWithoutMediaInput | HistoryUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
  }

  export type MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaOnCategoryCreateWithoutMediaInput, MediaOnCategoryUncheckedCreateWithoutMediaInput> | MediaOnCategoryCreateWithoutMediaInput[] | MediaOnCategoryUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnCategoryCreateOrConnectWithoutMediaInput | MediaOnCategoryCreateOrConnectWithoutMediaInput[]
    upsert?: MediaOnCategoryUpsertWithWhereUniqueWithoutMediaInput | MediaOnCategoryUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaOnCategoryCreateManyMediaInputEnvelope
    set?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    disconnect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    delete?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    connect?: MediaOnCategoryWhereUniqueInput | MediaOnCategoryWhereUniqueInput[]
    update?: MediaOnCategoryUpdateWithWhereUniqueWithoutMediaInput | MediaOnCategoryUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaOnCategoryUpdateManyWithWhereWithoutMediaInput | MediaOnCategoryUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaOnCategoryScalarWhereInput | MediaOnCategoryScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<CommentCreateWithoutMediaInput, CommentUncheckedCreateWithoutMediaInput> | CommentCreateWithoutMediaInput[] | CommentUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutMediaInput | CommentCreateOrConnectWithoutMediaInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutMediaInput | CommentUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: CommentCreateManyMediaInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutMediaInput | CommentUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutMediaInput | CommentUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutMediaInput, MediaOnPlaylistUncheckedCreateWithoutMediaInput> | MediaOnPlaylistCreateWithoutMediaInput[] | MediaOnPlaylistUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutMediaInput | MediaOnPlaylistCreateOrConnectWithoutMediaInput[]
    upsert?: MediaOnPlaylistUpsertWithWhereUniqueWithoutMediaInput | MediaOnPlaylistUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaOnPlaylistCreateManyMediaInputEnvelope
    set?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    disconnect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    delete?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    update?: MediaOnPlaylistUpdateWithWhereUniqueWithoutMediaInput | MediaOnPlaylistUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaOnPlaylistUpdateManyWithWhereWithoutMediaInput | MediaOnPlaylistUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaOnPlaylistScalarWhereInput | MediaOnPlaylistScalarWhereInput[]
  }

  export type SessionUploadUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<SessionUploadCreateWithoutMediaInput, SessionUploadUncheckedCreateWithoutMediaInput> | SessionUploadCreateWithoutMediaInput[] | SessionUploadUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: SessionUploadCreateOrConnectWithoutMediaInput | SessionUploadCreateOrConnectWithoutMediaInput[]
    upsert?: SessionUploadUpsertWithWhereUniqueWithoutMediaInput | SessionUploadUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: SessionUploadCreateManyMediaInputEnvelope
    set?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    disconnect?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    delete?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    connect?: SessionUploadWhereUniqueInput | SessionUploadWhereUniqueInput[]
    update?: SessionUploadUpdateWithWhereUniqueWithoutMediaInput | SessionUploadUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: SessionUploadUpdateManyWithWhereWithoutMediaInput | SessionUploadUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: SessionUploadScalarWhereInput | SessionUploadScalarWhereInput[]
  }

  export type MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput = {
    create?: XOR<MediaOnAlbumCreateWithoutMediaInput, MediaOnAlbumUncheckedCreateWithoutMediaInput> | MediaOnAlbumCreateWithoutMediaInput[] | MediaOnAlbumUncheckedCreateWithoutMediaInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutMediaInput | MediaOnAlbumCreateOrConnectWithoutMediaInput[]
    upsert?: MediaOnAlbumUpsertWithWhereUniqueWithoutMediaInput | MediaOnAlbumUpsertWithWhereUniqueWithoutMediaInput[]
    createMany?: MediaOnAlbumCreateManyMediaInputEnvelope
    set?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    disconnect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    delete?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    update?: MediaOnAlbumUpdateWithWhereUniqueWithoutMediaInput | MediaOnAlbumUpdateWithWhereUniqueWithoutMediaInput[]
    updateMany?: MediaOnAlbumUpdateManyWithWhereWithoutMediaInput | MediaOnAlbumUpdateManyWithWhereWithoutMediaInput[]
    deleteMany?: MediaOnAlbumScalarWhereInput | MediaOnAlbumScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMediaReactionsInput = {
    create?: XOR<UserCreateWithoutMediaReactionsInput, UserUncheckedCreateWithoutMediaReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMediaReactionsInput
    connect?: UserWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutMediaReactionInput = {
    create?: XOR<MediaCreateWithoutMediaReactionInput, MediaUncheckedCreateWithoutMediaReactionInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaReactionInput
    connect?: MediaWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutMediaReactionsNestedInput = {
    create?: XOR<UserCreateWithoutMediaReactionsInput, UserUncheckedCreateWithoutMediaReactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMediaReactionsInput
    upsert?: UserUpsertWithoutMediaReactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMediaReactionsInput, UserUpdateWithoutMediaReactionsInput>, UserUncheckedUpdateWithoutMediaReactionsInput>
  }

  export type MediaUpdateOneRequiredWithoutMediaReactionNestedInput = {
    create?: XOR<MediaCreateWithoutMediaReactionInput, MediaUncheckedCreateWithoutMediaReactionInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaReactionInput
    upsert?: MediaUpsertWithoutMediaReactionInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutMediaReactionInput, MediaUpdateWithoutMediaReactionInput>, MediaUncheckedUpdateWithoutMediaReactionInput>
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutCommentInput = {
    create?: XOR<MediaCreateWithoutCommentInput, MediaUncheckedCreateWithoutCommentInput>
    connectOrCreate?: MediaCreateOrConnectWithoutCommentInput
    connect?: MediaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentInput, UserUpdateWithoutCommentInput>, UserUncheckedUpdateWithoutCommentInput>
  }

  export type MediaUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<MediaCreateWithoutCommentInput, MediaUncheckedCreateWithoutCommentInput>
    connectOrCreate?: MediaCreateOrConnectWithoutCommentInput
    upsert?: MediaUpsertWithoutCommentInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutCommentInput, MediaUpdateWithoutCommentInput>, MediaUncheckedUpdateWithoutCommentInput>
  }

  export type UserCreateNestedOneWithoutPlaylistInput = {
    create?: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistInput
    connect?: UserWhereUniqueInput
  }

  export type MediaOnPlaylistCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutPlaylistInput, MediaOnPlaylistUncheckedCreateWithoutPlaylistInput> | MediaOnPlaylistCreateWithoutPlaylistInput[] | MediaOnPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutPlaylistInput | MediaOnPlaylistCreateOrConnectWithoutPlaylistInput[]
    createMany?: MediaOnPlaylistCreateManyPlaylistInputEnvelope
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
  }

  export type MediaOnPlaylistUncheckedCreateNestedManyWithoutPlaylistInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutPlaylistInput, MediaOnPlaylistUncheckedCreateWithoutPlaylistInput> | MediaOnPlaylistCreateWithoutPlaylistInput[] | MediaOnPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutPlaylistInput | MediaOnPlaylistCreateOrConnectWithoutPlaylistInput[]
    createMany?: MediaOnPlaylistCreateManyPlaylistInputEnvelope
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPlaylistNestedInput = {
    create?: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlaylistInput
    upsert?: UserUpsertWithoutPlaylistInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlaylistInput, UserUpdateWithoutPlaylistInput>, UserUncheckedUpdateWithoutPlaylistInput>
  }

  export type MediaOnPlaylistUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutPlaylistInput, MediaOnPlaylistUncheckedCreateWithoutPlaylistInput> | MediaOnPlaylistCreateWithoutPlaylistInput[] | MediaOnPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutPlaylistInput | MediaOnPlaylistCreateOrConnectWithoutPlaylistInput[]
    upsert?: MediaOnPlaylistUpsertWithWhereUniqueWithoutPlaylistInput | MediaOnPlaylistUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: MediaOnPlaylistCreateManyPlaylistInputEnvelope
    set?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    disconnect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    delete?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    update?: MediaOnPlaylistUpdateWithWhereUniqueWithoutPlaylistInput | MediaOnPlaylistUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: MediaOnPlaylistUpdateManyWithWhereWithoutPlaylistInput | MediaOnPlaylistUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: MediaOnPlaylistScalarWhereInput | MediaOnPlaylistScalarWhereInput[]
  }

  export type MediaOnPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput = {
    create?: XOR<MediaOnPlaylistCreateWithoutPlaylistInput, MediaOnPlaylistUncheckedCreateWithoutPlaylistInput> | MediaOnPlaylistCreateWithoutPlaylistInput[] | MediaOnPlaylistUncheckedCreateWithoutPlaylistInput[]
    connectOrCreate?: MediaOnPlaylistCreateOrConnectWithoutPlaylistInput | MediaOnPlaylistCreateOrConnectWithoutPlaylistInput[]
    upsert?: MediaOnPlaylistUpsertWithWhereUniqueWithoutPlaylistInput | MediaOnPlaylistUpsertWithWhereUniqueWithoutPlaylistInput[]
    createMany?: MediaOnPlaylistCreateManyPlaylistInputEnvelope
    set?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    disconnect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    delete?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    connect?: MediaOnPlaylistWhereUniqueInput | MediaOnPlaylistWhereUniqueInput[]
    update?: MediaOnPlaylistUpdateWithWhereUniqueWithoutPlaylistInput | MediaOnPlaylistUpdateWithWhereUniqueWithoutPlaylistInput[]
    updateMany?: MediaOnPlaylistUpdateManyWithWhereWithoutPlaylistInput | MediaOnPlaylistUpdateManyWithWhereWithoutPlaylistInput[]
    deleteMany?: MediaOnPlaylistScalarWhereInput | MediaOnPlaylistScalarWhereInput[]
  }

  export type PlaylistCreateNestedOneWithoutMediaOnPlaylistInput = {
    create?: XOR<PlaylistCreateWithoutMediaOnPlaylistInput, PlaylistUncheckedCreateWithoutMediaOnPlaylistInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutMediaOnPlaylistInput
    connect?: PlaylistWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutMediaOnPlaylistInput = {
    create?: XOR<MediaCreateWithoutMediaOnPlaylistInput, MediaUncheckedCreateWithoutMediaOnPlaylistInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaOnPlaylistInput
    connect?: MediaWhereUniqueInput
  }

  export type PlaylistUpdateOneRequiredWithoutMediaOnPlaylistNestedInput = {
    create?: XOR<PlaylistCreateWithoutMediaOnPlaylistInput, PlaylistUncheckedCreateWithoutMediaOnPlaylistInput>
    connectOrCreate?: PlaylistCreateOrConnectWithoutMediaOnPlaylistInput
    upsert?: PlaylistUpsertWithoutMediaOnPlaylistInput
    connect?: PlaylistWhereUniqueInput
    update?: XOR<XOR<PlaylistUpdateToOneWithWhereWithoutMediaOnPlaylistInput, PlaylistUpdateWithoutMediaOnPlaylistInput>, PlaylistUncheckedUpdateWithoutMediaOnPlaylistInput>
  }

  export type MediaUpdateOneRequiredWithoutMediaOnPlaylistNestedInput = {
    create?: XOR<MediaCreateWithoutMediaOnPlaylistInput, MediaUncheckedCreateWithoutMediaOnPlaylistInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaOnPlaylistInput
    upsert?: MediaUpsertWithoutMediaOnPlaylistInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutMediaOnPlaylistInput, MediaUpdateWithoutMediaOnPlaylistInput>, MediaUncheckedUpdateWithoutMediaOnPlaylistInput>
  }

  export type UserCreateNestedOneWithoutHistoriesInput = {
    create?: XOR<UserCreateWithoutHistoriesInput, UserUncheckedCreateWithoutHistoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoriesInput
    connect?: UserWhereUniqueInput
  }

  export type MediaCreateNestedOneWithoutHistoryInput = {
    create?: XOR<MediaCreateWithoutHistoryInput, MediaUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: MediaCreateOrConnectWithoutHistoryInput
    connect?: MediaWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHistoriesNestedInput = {
    create?: XOR<UserCreateWithoutHistoriesInput, UserUncheckedCreateWithoutHistoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoriesInput
    upsert?: UserUpsertWithoutHistoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHistoriesInput, UserUpdateWithoutHistoriesInput>, UserUncheckedUpdateWithoutHistoriesInput>
  }

  export type MediaUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<MediaCreateWithoutHistoryInput, MediaUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: MediaCreateOrConnectWithoutHistoryInput
    upsert?: MediaUpsertWithoutHistoryInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutHistoryInput, MediaUpdateWithoutHistoryInput>, MediaUncheckedUpdateWithoutHistoryInput>
  }

  export type UserCreateNestedOneWithoutSubscribersInput = {
    create?: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscribersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChannelInput = {
    create?: XOR<UserCreateWithoutChannelInput, UserUncheckedCreateWithoutChannelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSubscribersNestedInput = {
    create?: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscribersInput
    upsert?: UserUpsertWithoutSubscribersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubscribersInput, UserUpdateWithoutSubscribersInput>, UserUncheckedUpdateWithoutSubscribersInput>
  }

  export type UserUpdateOneRequiredWithoutChannelNestedInput = {
    create?: XOR<UserCreateWithoutChannelInput, UserUncheckedCreateWithoutChannelInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelInput
    upsert?: UserUpsertWithoutChannelInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChannelInput, UserUpdateWithoutChannelInput>, UserUncheckedUpdateWithoutChannelInput>
  }

  export type UserCreateNestedOneWithoutNotificationSubscriptionsInput = {
    create?: XOR<UserCreateWithoutNotificationSubscriptionsInput, UserUncheckedCreateWithoutNotificationSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationSubscriptionsInput, UserUncheckedCreateWithoutNotificationSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationSubscriptionsInput
    upsert?: UserUpsertWithoutNotificationSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationSubscriptionsInput, UserUpdateWithoutNotificationSubscriptionsInput>, UserUncheckedUpdateWithoutNotificationSubscriptionsInput>
  }

  export type MediaCreateNestedOneWithoutVideoResourcesInput = {
    create?: XOR<MediaCreateWithoutVideoResourcesInput, MediaUncheckedCreateWithoutVideoResourcesInput>
    connectOrCreate?: MediaCreateOrConnectWithoutVideoResourcesInput
    connect?: MediaWhereUniqueInput
  }

  export type MediaUpdateOneRequiredWithoutVideoResourcesNestedInput = {
    create?: XOR<MediaCreateWithoutVideoResourcesInput, MediaUncheckedCreateWithoutVideoResourcesInput>
    connectOrCreate?: MediaCreateOrConnectWithoutVideoResourcesInput
    upsert?: MediaUpsertWithoutVideoResourcesInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutVideoResourcesInput, MediaUpdateWithoutVideoResourcesInput>, MediaUncheckedUpdateWithoutVideoResourcesInput>
  }

  export type MediaCreateNestedOneWithoutAudioResourcesInput = {
    create?: XOR<MediaCreateWithoutAudioResourcesInput, MediaUncheckedCreateWithoutAudioResourcesInput>
    connectOrCreate?: MediaCreateOrConnectWithoutAudioResourcesInput
    connect?: MediaWhereUniqueInput
  }

  export type EnumAudioQualityFieldUpdateOperationsInput = {
    set?: $Enums.AudioQuality
  }

  export type MediaUpdateOneRequiredWithoutAudioResourcesNestedInput = {
    create?: XOR<MediaCreateWithoutAudioResourcesInput, MediaUncheckedCreateWithoutAudioResourcesInput>
    connectOrCreate?: MediaCreateOrConnectWithoutAudioResourcesInput
    upsert?: MediaUpsertWithoutAudioResourcesInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutAudioResourcesInput, MediaUpdateWithoutAudioResourcesInput>, MediaUncheckedUpdateWithoutAudioResourcesInput>
  }

  export type MediaCreateNestedOneWithoutDetailInput = {
    create?: XOR<MediaCreateWithoutDetailInput, MediaUncheckedCreateWithoutDetailInput>
    connectOrCreate?: MediaCreateOrConnectWithoutDetailInput
    connect?: MediaWhereUniqueInput
  }

  export type MediaUpdateOneRequiredWithoutDetailNestedInput = {
    create?: XOR<MediaCreateWithoutDetailInput, MediaUncheckedCreateWithoutDetailInput>
    connectOrCreate?: MediaCreateOrConnectWithoutDetailInput
    upsert?: MediaUpsertWithoutDetailInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutDetailInput, MediaUpdateWithoutDetailInput>, MediaUncheckedUpdateWithoutDetailInput>
  }

  export type MediaCreateNestedOneWithoutThumbnailsInput = {
    create?: XOR<MediaCreateWithoutThumbnailsInput, MediaUncheckedCreateWithoutThumbnailsInput>
    connectOrCreate?: MediaCreateOrConnectWithoutThumbnailsInput
    connect?: MediaWhereUniqueInput
  }

  export type MediaUpdateOneRequiredWithoutThumbnailsNestedInput = {
    create?: XOR<MediaCreateWithoutThumbnailsInput, MediaUncheckedCreateWithoutThumbnailsInput>
    connectOrCreate?: MediaCreateOrConnectWithoutThumbnailsInput
    upsert?: MediaUpsertWithoutThumbnailsInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutThumbnailsInput, MediaUpdateWithoutThumbnailsInput>, MediaUncheckedUpdateWithoutThumbnailsInput>
  }

  export type PaymentTransactionDetailCreateNestedManyWithoutPaymentTransactionInput = {
    create?: XOR<PaymentTransactionDetailCreateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput> | PaymentTransactionDetailCreateWithoutPaymentTransactionInput[] | PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput[]
    connectOrCreate?: PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput | PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput[]
    createMany?: PaymentTransactionDetailCreateManyPaymentTransactionInputEnvelope
    connect?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
  }

  export type PaymentTransactionDetailUncheckedCreateNestedManyWithoutPaymentTransactionInput = {
    create?: XOR<PaymentTransactionDetailCreateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput> | PaymentTransactionDetailCreateWithoutPaymentTransactionInput[] | PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput[]
    connectOrCreate?: PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput | PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput[]
    createMany?: PaymentTransactionDetailCreateManyPaymentTransactionInputEnvelope
    connect?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
  }

  export type PaymentTransactionDetailUpdateManyWithoutPaymentTransactionNestedInput = {
    create?: XOR<PaymentTransactionDetailCreateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput> | PaymentTransactionDetailCreateWithoutPaymentTransactionInput[] | PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput[]
    connectOrCreate?: PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput | PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput[]
    upsert?: PaymentTransactionDetailUpsertWithWhereUniqueWithoutPaymentTransactionInput | PaymentTransactionDetailUpsertWithWhereUniqueWithoutPaymentTransactionInput[]
    createMany?: PaymentTransactionDetailCreateManyPaymentTransactionInputEnvelope
    set?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    disconnect?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    delete?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    connect?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    update?: PaymentTransactionDetailUpdateWithWhereUniqueWithoutPaymentTransactionInput | PaymentTransactionDetailUpdateWithWhereUniqueWithoutPaymentTransactionInput[]
    updateMany?: PaymentTransactionDetailUpdateManyWithWhereWithoutPaymentTransactionInput | PaymentTransactionDetailUpdateManyWithWhereWithoutPaymentTransactionInput[]
    deleteMany?: PaymentTransactionDetailScalarWhereInput | PaymentTransactionDetailScalarWhereInput[]
  }

  export type PaymentTransactionDetailUncheckedUpdateManyWithoutPaymentTransactionNestedInput = {
    create?: XOR<PaymentTransactionDetailCreateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput> | PaymentTransactionDetailCreateWithoutPaymentTransactionInput[] | PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput[]
    connectOrCreate?: PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput | PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput[]
    upsert?: PaymentTransactionDetailUpsertWithWhereUniqueWithoutPaymentTransactionInput | PaymentTransactionDetailUpsertWithWhereUniqueWithoutPaymentTransactionInput[]
    createMany?: PaymentTransactionDetailCreateManyPaymentTransactionInputEnvelope
    set?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    disconnect?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    delete?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    connect?: PaymentTransactionDetailWhereUniqueInput | PaymentTransactionDetailWhereUniqueInput[]
    update?: PaymentTransactionDetailUpdateWithWhereUniqueWithoutPaymentTransactionInput | PaymentTransactionDetailUpdateWithWhereUniqueWithoutPaymentTransactionInput[]
    updateMany?: PaymentTransactionDetailUpdateManyWithWhereWithoutPaymentTransactionInput | PaymentTransactionDetailUpdateManyWithWhereWithoutPaymentTransactionInput[]
    deleteMany?: PaymentTransactionDetailScalarWhereInput | PaymentTransactionDetailScalarWhereInput[]
  }

  export type PaymentTransactionCreateNestedOneWithoutPaymentTransactionDetailInput = {
    create?: XOR<PaymentTransactionCreateWithoutPaymentTransactionDetailInput, PaymentTransactionUncheckedCreateWithoutPaymentTransactionDetailInput>
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutPaymentTransactionDetailInput
    connect?: PaymentTransactionWhereUniqueInput
  }

  export type PaymentTransactionUpdateOneRequiredWithoutPaymentTransactionDetailNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutPaymentTransactionDetailInput, PaymentTransactionUncheckedCreateWithoutPaymentTransactionDetailInput>
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutPaymentTransactionDetailInput
    upsert?: PaymentTransactionUpsertWithoutPaymentTransactionDetailInput
    connect?: PaymentTransactionWhereUniqueInput
    update?: XOR<XOR<PaymentTransactionUpdateToOneWithWhereWithoutPaymentTransactionDetailInput, PaymentTransactionUpdateWithoutPaymentTransactionDetailInput>, PaymentTransactionUncheckedUpdateWithoutPaymentTransactionDetailInput>
  }

  export type MediaCreateNestedOneWithoutMediaOnAlbumInput = {
    create?: XOR<MediaCreateWithoutMediaOnAlbumInput, MediaUncheckedCreateWithoutMediaOnAlbumInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaOnAlbumInput
    connect?: MediaWhereUniqueInput
  }

  export type AlbumCreateNestedOneWithoutMediaOnAlbumInput = {
    create?: XOR<AlbumCreateWithoutMediaOnAlbumInput, AlbumUncheckedCreateWithoutMediaOnAlbumInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutMediaOnAlbumInput
    connect?: AlbumWhereUniqueInput
  }

  export type MediaUpdateOneRequiredWithoutMediaOnAlbumNestedInput = {
    create?: XOR<MediaCreateWithoutMediaOnAlbumInput, MediaUncheckedCreateWithoutMediaOnAlbumInput>
    connectOrCreate?: MediaCreateOrConnectWithoutMediaOnAlbumInput
    upsert?: MediaUpsertWithoutMediaOnAlbumInput
    connect?: MediaWhereUniqueInput
    update?: XOR<XOR<MediaUpdateToOneWithWhereWithoutMediaOnAlbumInput, MediaUpdateWithoutMediaOnAlbumInput>, MediaUncheckedUpdateWithoutMediaOnAlbumInput>
  }

  export type AlbumUpdateOneRequiredWithoutMediaOnAlbumNestedInput = {
    create?: XOR<AlbumCreateWithoutMediaOnAlbumInput, AlbumUncheckedCreateWithoutMediaOnAlbumInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutMediaOnAlbumInput
    upsert?: AlbumUpsertWithoutMediaOnAlbumInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutMediaOnAlbumInput, AlbumUpdateWithoutMediaOnAlbumInput>, AlbumUncheckedUpdateWithoutMediaOnAlbumInput>
  }

  export type UserCreateNestedOneWithoutAlbumInput = {
    create?: XOR<UserCreateWithoutAlbumInput, UserUncheckedCreateWithoutAlbumInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlbumInput
    connect?: UserWhereUniqueInput
  }

  export type MediaOnAlbumCreateNestedManyWithoutAlbumInput = {
    create?: XOR<MediaOnAlbumCreateWithoutAlbumInput, MediaOnAlbumUncheckedCreateWithoutAlbumInput> | MediaOnAlbumCreateWithoutAlbumInput[] | MediaOnAlbumUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutAlbumInput | MediaOnAlbumCreateOrConnectWithoutAlbumInput[]
    createMany?: MediaOnAlbumCreateManyAlbumInputEnvelope
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
  }

  export type MediaOnAlbumUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<MediaOnAlbumCreateWithoutAlbumInput, MediaOnAlbumUncheckedCreateWithoutAlbumInput> | MediaOnAlbumCreateWithoutAlbumInput[] | MediaOnAlbumUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutAlbumInput | MediaOnAlbumCreateOrConnectWithoutAlbumInput[]
    createMany?: MediaOnAlbumCreateManyAlbumInputEnvelope
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutAlbumNestedInput = {
    create?: XOR<UserCreateWithoutAlbumInput, UserUncheckedCreateWithoutAlbumInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlbumInput
    upsert?: UserUpsertWithoutAlbumInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlbumInput, UserUpdateWithoutAlbumInput>, UserUncheckedUpdateWithoutAlbumInput>
  }

  export type MediaOnAlbumUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<MediaOnAlbumCreateWithoutAlbumInput, MediaOnAlbumUncheckedCreateWithoutAlbumInput> | MediaOnAlbumCreateWithoutAlbumInput[] | MediaOnAlbumUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutAlbumInput | MediaOnAlbumCreateOrConnectWithoutAlbumInput[]
    upsert?: MediaOnAlbumUpsertWithWhereUniqueWithoutAlbumInput | MediaOnAlbumUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: MediaOnAlbumCreateManyAlbumInputEnvelope
    set?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    disconnect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    delete?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    update?: MediaOnAlbumUpdateWithWhereUniqueWithoutAlbumInput | MediaOnAlbumUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: MediaOnAlbumUpdateManyWithWhereWithoutAlbumInput | MediaOnAlbumUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: MediaOnAlbumScalarWhereInput | MediaOnAlbumScalarWhereInput[]
  }

  export type MediaOnAlbumUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<MediaOnAlbumCreateWithoutAlbumInput, MediaOnAlbumUncheckedCreateWithoutAlbumInput> | MediaOnAlbumCreateWithoutAlbumInput[] | MediaOnAlbumUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: MediaOnAlbumCreateOrConnectWithoutAlbumInput | MediaOnAlbumCreateOrConnectWithoutAlbumInput[]
    upsert?: MediaOnAlbumUpsertWithWhereUniqueWithoutAlbumInput | MediaOnAlbumUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: MediaOnAlbumCreateManyAlbumInputEnvelope
    set?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    disconnect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    delete?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    connect?: MediaOnAlbumWhereUniqueInput | MediaOnAlbumWhereUniqueInput[]
    update?: MediaOnAlbumUpdateWithWhereUniqueWithoutAlbumInput | MediaOnAlbumUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: MediaOnAlbumUpdateManyWithWhereWithoutAlbumInput | MediaOnAlbumUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: MediaOnAlbumScalarWhereInput | MediaOnAlbumScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSocialAccountInput = {
    create?: XOR<UserCreateWithoutSocialAccountInput, UserUncheckedCreateWithoutSocialAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialAccountInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAccountTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountType
  }

  export type UserUpdateOneRequiredWithoutSocialAccountNestedInput = {
    create?: XOR<UserCreateWithoutSocialAccountInput, UserUncheckedCreateWithoutSocialAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialAccountInput
    upsert?: UserUpsertWithoutSocialAccountInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSocialAccountInput, UserUpdateWithoutSocialAccountInput>, UserUncheckedUpdateWithoutSocialAccountInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[]
    notIn?: $Enums.PaymentMethod[]
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumStatusResourceFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResource | EnumStatusResourceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResource[]
    notIn?: $Enums.StatusResource[]
    not?: NestedEnumStatusResourceFilter<$PrismaModel> | $Enums.StatusResource
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumStatusResourceWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusResource | EnumStatusResourceFieldRefInput<$PrismaModel>
    in?: $Enums.StatusResource[]
    notIn?: $Enums.StatusResource[]
    not?: NestedEnumStatusResourceWithAggregatesFilter<$PrismaModel> | $Enums.StatusResource
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusResourceFilter<$PrismaModel>
    _max?: NestedEnumStatusResourceFilter<$PrismaModel>
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAudioQualityFilter<$PrismaModel = never> = {
    equals?: $Enums.AudioQuality | EnumAudioQualityFieldRefInput<$PrismaModel>
    in?: $Enums.AudioQuality[]
    notIn?: $Enums.AudioQuality[]
    not?: NestedEnumAudioQualityFilter<$PrismaModel> | $Enums.AudioQuality
  }

  export type NestedEnumAudioQualityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AudioQuality | EnumAudioQualityFieldRefInput<$PrismaModel>
    in?: $Enums.AudioQuality[]
    notIn?: $Enums.AudioQuality[]
    not?: NestedEnumAudioQualityWithAggregatesFilter<$PrismaModel> | $Enums.AudioQuality
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAudioQualityFilter<$PrismaModel>
    _max?: NestedEnumAudioQualityFilter<$PrismaModel>
  }

  export type NestedEnumAccountTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[]
    notIn?: $Enums.AccountType[]
    not?: NestedEnumAccountTypeFilter<$PrismaModel> | $Enums.AccountType
  }

  export type NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountType | EnumAccountTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountType[]
    notIn?: $Enums.AccountType[]
    not?: NestedEnumAccountTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountTypeFilter<$PrismaModel>
  }

  export type MediaCreateWithoutOwnerInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutOwnerInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutOwnerInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutOwnerInput, MediaUncheckedCreateWithoutOwnerInput>
  }

  export type MediaCreateManyOwnerInputEnvelope = {
    data: MediaCreateManyOwnerInput | MediaCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type MediaReactionCreateWithoutUserInput = {
    id?: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutMediaReactionInput
  }

  export type MediaReactionUncheckedCreateWithoutUserInput = {
    id?: string
    mediaId: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaReactionCreateOrConnectWithoutUserInput = {
    where: MediaReactionWhereUniqueInput
    create: XOR<MediaReactionCreateWithoutUserInput, MediaReactionUncheckedCreateWithoutUserInput>
  }

  export type MediaReactionCreateManyUserInputEnvelope = {
    data: MediaReactionCreateManyUserInput | MediaReactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutHistoryInput
  }

  export type HistoryUncheckedCreateWithoutUserInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoryCreateOrConnectWithoutUserInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryCreateManyUserInputEnvelope = {
    data: HistoryCreateManyUserInput | HistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriberCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    channel: UserCreateNestedOneWithoutChannelInput
  }

  export type SubscriberUncheckedCreateWithoutUserInput = {
    id?: number
    channelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriberCreateOrConnectWithoutUserInput = {
    where: SubscriberWhereUniqueInput
    create: XOR<SubscriberCreateWithoutUserInput, SubscriberUncheckedCreateWithoutUserInput>
  }

  export type SubscriberCreateManyUserInputEnvelope = {
    data: SubscriberCreateManyUserInput | SubscriberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubscriberCreateWithoutChannelInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubscribersInput
  }

  export type SubscriberUncheckedCreateWithoutChannelInput = {
    id?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriberCreateOrConnectWithoutChannelInput = {
    where: SubscriberWhereUniqueInput
    create: XOR<SubscriberCreateWithoutChannelInput, SubscriberUncheckedCreateWithoutChannelInput>
  }

  export type SubscriberCreateManyChannelInputEnvelope = {
    data: SubscriberCreateManyChannelInput | SubscriberCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type NotificationSubscriptionsCreateWithoutUserInput = {
    subscription: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSubscriptionsUncheckedCreateWithoutUserInput = {
    id?: number
    subscription: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSubscriptionsCreateOrConnectWithoutUserInput = {
    where: NotificationSubscriptionsWhereUniqueInput
    create: XOR<NotificationSubscriptionsCreateWithoutUserInput, NotificationSubscriptionsUncheckedCreateWithoutUserInput>
  }

  export type NotificationSubscriptionsCreateManyUserInputEnvelope = {
    data: NotificationSubscriptionsCreateManyUserInput | NotificationSubscriptionsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    mediaId: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlaylistCreateWithoutUserInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutPlaylistInput
  }

  export type PlaylistCreateOrConnectWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistCreateManyUserInputEnvelope = {
    data: PlaylistCreateManyUserInput | PlaylistCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPaymentMethodCreateWithoutUserInput = {
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPaymentMethodUncheckedCreateWithoutUserInput = {
    id?: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPaymentMethodCreateOrConnectWithoutUserInput = {
    where: UserPaymentMethodWhereUniqueInput
    create: XOR<UserPaymentMethodCreateWithoutUserInput, UserPaymentMethodUncheckedCreateWithoutUserInput>
  }

  export type UserPaymentMethodCreateManyUserInputEnvelope = {
    data: UserPaymentMethodCreateManyUserInput | UserPaymentMethodCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AlbumCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutOwnerInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutOwnerInput, AlbumUncheckedCreateWithoutOwnerInput>
  }

  export type AlbumCreateManyOwnerInputEnvelope = {
    data: AlbumCreateManyOwnerInput | AlbumCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type SocialAccountCreateWithoutOwnerInput = {
    type?: $Enums.AccountType
    fullName: string
    avatarUrl?: string | null
    accountUrl?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiredAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    disabledAt?: Date | string | null
  }

  export type SocialAccountUncheckedCreateWithoutOwnerInput = {
    id?: number
    type?: $Enums.AccountType
    fullName: string
    avatarUrl?: string | null
    accountUrl?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiredAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    disabledAt?: Date | string | null
  }

  export type SocialAccountCreateOrConnectWithoutOwnerInput = {
    where: SocialAccountWhereUniqueInput
    create: XOR<SocialAccountCreateWithoutOwnerInput, SocialAccountUncheckedCreateWithoutOwnerInput>
  }

  export type SocialAccountCreateManyOwnerInputEnvelope = {
    data: SocialAccountCreateManyOwnerInput | SocialAccountCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type MediaUpsertWithWhereUniqueWithoutOwnerInput = {
    where: MediaWhereUniqueInput
    update: XOR<MediaUpdateWithoutOwnerInput, MediaUncheckedUpdateWithoutOwnerInput>
    create: XOR<MediaCreateWithoutOwnerInput, MediaUncheckedCreateWithoutOwnerInput>
  }

  export type MediaUpdateWithWhereUniqueWithoutOwnerInput = {
    where: MediaWhereUniqueInput
    data: XOR<MediaUpdateWithoutOwnerInput, MediaUncheckedUpdateWithoutOwnerInput>
  }

  export type MediaUpdateManyWithWhereWithoutOwnerInput = {
    where: MediaScalarWhereInput
    data: XOR<MediaUpdateManyMutationInput, MediaUncheckedUpdateManyWithoutOwnerInput>
  }

  export type MediaScalarWhereInput = {
    AND?: MediaScalarWhereInput | MediaScalarWhereInput[]
    OR?: MediaScalarWhereInput[]
    NOT?: MediaScalarWhereInput | MediaScalarWhereInput[]
    id?: StringFilter<"Media"> | string
    userId?: StringFilter<"Media"> | string
    title?: StringFilter<"Media"> | string
    views?: IntFilter<"Media"> | number
    duration?: FloatFilter<"Media"> | number
    plays?: IntFilter<"Media"> | number
    status?: EnumStatusResourceFilter<"Media"> | $Enums.StatusResource
    viewMode?: EnumStatusFilter<"Media"> | $Enums.Status
    createdAt?: DateTimeFilter<"Media"> | Date | string
    updatedAt?: DateTimeFilter<"Media"> | Date | string
    lockedAt?: DateTimeNullableFilter<"Media"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"Media"> | Date | string | null
  }

  export type MediaReactionUpsertWithWhereUniqueWithoutUserInput = {
    where: MediaReactionWhereUniqueInput
    update: XOR<MediaReactionUpdateWithoutUserInput, MediaReactionUncheckedUpdateWithoutUserInput>
    create: XOR<MediaReactionCreateWithoutUserInput, MediaReactionUncheckedCreateWithoutUserInput>
  }

  export type MediaReactionUpdateWithWhereUniqueWithoutUserInput = {
    where: MediaReactionWhereUniqueInput
    data: XOR<MediaReactionUpdateWithoutUserInput, MediaReactionUncheckedUpdateWithoutUserInput>
  }

  export type MediaReactionUpdateManyWithWhereWithoutUserInput = {
    where: MediaReactionScalarWhereInput
    data: XOR<MediaReactionUpdateManyMutationInput, MediaReactionUncheckedUpdateManyWithoutUserInput>
  }

  export type MediaReactionScalarWhereInput = {
    AND?: MediaReactionScalarWhereInput | MediaReactionScalarWhereInput[]
    OR?: MediaReactionScalarWhereInput[]
    NOT?: MediaReactionScalarWhereInput | MediaReactionScalarWhereInput[]
    id?: StringFilter<"MediaReaction"> | string
    userId?: StringFilter<"MediaReaction"> | string
    mediaId?: StringFilter<"MediaReaction"> | string
    isLike?: BoolFilter<"MediaReaction"> | boolean
    createdAt?: DateTimeFilter<"MediaReaction"> | Date | string
    updatedAt?: DateTimeFilter<"MediaReaction"> | Date | string
  }

  export type HistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
    create: XOR<HistoryCreateWithoutUserInput, HistoryUncheckedCreateWithoutUserInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutUserInput, HistoryUncheckedUpdateWithoutUserInput>
  }

  export type HistoryUpdateManyWithWhereWithoutUserInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type HistoryScalarWhereInput = {
    AND?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    OR?: HistoryScalarWhereInput[]
    NOT?: HistoryScalarWhereInput | HistoryScalarWhereInput[]
    id?: IntFilter<"History"> | number
    userId?: StringFilter<"History"> | string
    mediaId?: StringFilter<"History"> | string
    createdAt?: DateTimeFilter<"History"> | Date | string
    updatedAt?: DateTimeFilter<"History"> | Date | string
  }

  export type SubscriberUpsertWithWhereUniqueWithoutUserInput = {
    where: SubscriberWhereUniqueInput
    update: XOR<SubscriberUpdateWithoutUserInput, SubscriberUncheckedUpdateWithoutUserInput>
    create: XOR<SubscriberCreateWithoutUserInput, SubscriberUncheckedCreateWithoutUserInput>
  }

  export type SubscriberUpdateWithWhereUniqueWithoutUserInput = {
    where: SubscriberWhereUniqueInput
    data: XOR<SubscriberUpdateWithoutUserInput, SubscriberUncheckedUpdateWithoutUserInput>
  }

  export type SubscriberUpdateManyWithWhereWithoutUserInput = {
    where: SubscriberScalarWhereInput
    data: XOR<SubscriberUpdateManyMutationInput, SubscriberUncheckedUpdateManyWithoutUserInput>
  }

  export type SubscriberScalarWhereInput = {
    AND?: SubscriberScalarWhereInput | SubscriberScalarWhereInput[]
    OR?: SubscriberScalarWhereInput[]
    NOT?: SubscriberScalarWhereInput | SubscriberScalarWhereInput[]
    id?: IntFilter<"Subscriber"> | number
    userId?: StringFilter<"Subscriber"> | string
    channelId?: StringFilter<"Subscriber"> | string
    createdAt?: DateTimeFilter<"Subscriber"> | Date | string
    updatedAt?: DateTimeFilter<"Subscriber"> | Date | string
  }

  export type SubscriberUpsertWithWhereUniqueWithoutChannelInput = {
    where: SubscriberWhereUniqueInput
    update: XOR<SubscriberUpdateWithoutChannelInput, SubscriberUncheckedUpdateWithoutChannelInput>
    create: XOR<SubscriberCreateWithoutChannelInput, SubscriberUncheckedCreateWithoutChannelInput>
  }

  export type SubscriberUpdateWithWhereUniqueWithoutChannelInput = {
    where: SubscriberWhereUniqueInput
    data: XOR<SubscriberUpdateWithoutChannelInput, SubscriberUncheckedUpdateWithoutChannelInput>
  }

  export type SubscriberUpdateManyWithWhereWithoutChannelInput = {
    where: SubscriberScalarWhereInput
    data: XOR<SubscriberUpdateManyMutationInput, SubscriberUncheckedUpdateManyWithoutChannelInput>
  }

  export type NotificationSubscriptionsUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationSubscriptionsWhereUniqueInput
    update: XOR<NotificationSubscriptionsUpdateWithoutUserInput, NotificationSubscriptionsUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationSubscriptionsCreateWithoutUserInput, NotificationSubscriptionsUncheckedCreateWithoutUserInput>
  }

  export type NotificationSubscriptionsUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationSubscriptionsWhereUniqueInput
    data: XOR<NotificationSubscriptionsUpdateWithoutUserInput, NotificationSubscriptionsUncheckedUpdateWithoutUserInput>
  }

  export type NotificationSubscriptionsUpdateManyWithWhereWithoutUserInput = {
    where: NotificationSubscriptionsScalarWhereInput
    data: XOR<NotificationSubscriptionsUpdateManyMutationInput, NotificationSubscriptionsUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationSubscriptionsScalarWhereInput = {
    AND?: NotificationSubscriptionsScalarWhereInput | NotificationSubscriptionsScalarWhereInput[]
    OR?: NotificationSubscriptionsScalarWhereInput[]
    NOT?: NotificationSubscriptionsScalarWhereInput | NotificationSubscriptionsScalarWhereInput[]
    id?: IntFilter<"NotificationSubscriptions"> | number
    userId?: StringFilter<"NotificationSubscriptions"> | string
    subscription?: StringFilter<"NotificationSubscriptions"> | string
    createdAt?: DateTimeFilter<"NotificationSubscriptions"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSubscriptions"> | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    mediaId?: StringFilter<"Comment"> | string
    comment?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type PlaylistUpsertWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    update: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
    create: XOR<PlaylistCreateWithoutUserInput, PlaylistUncheckedCreateWithoutUserInput>
  }

  export type PlaylistUpdateWithWhereUniqueWithoutUserInput = {
    where: PlaylistWhereUniqueInput
    data: XOR<PlaylistUpdateWithoutUserInput, PlaylistUncheckedUpdateWithoutUserInput>
  }

  export type PlaylistUpdateManyWithWhereWithoutUserInput = {
    where: PlaylistScalarWhereInput
    data: XOR<PlaylistUpdateManyMutationInput, PlaylistUncheckedUpdateManyWithoutUserInput>
  }

  export type PlaylistScalarWhereInput = {
    AND?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    OR?: PlaylistScalarWhereInput[]
    NOT?: PlaylistScalarWhereInput | PlaylistScalarWhereInput[]
    id?: StringFilter<"Playlist"> | string
    userId?: StringFilter<"Playlist"> | string
    title?: StringFilter<"Playlist"> | string
    createdAt?: DateTimeFilter<"Playlist"> | Date | string
    updatedAt?: DateTimeFilter<"Playlist"> | Date | string
  }

  export type UserPaymentMethodUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPaymentMethodWhereUniqueInput
    update: XOR<UserPaymentMethodUpdateWithoutUserInput, UserPaymentMethodUncheckedUpdateWithoutUserInput>
    create: XOR<UserPaymentMethodCreateWithoutUserInput, UserPaymentMethodUncheckedCreateWithoutUserInput>
  }

  export type UserPaymentMethodUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPaymentMethodWhereUniqueInput
    data: XOR<UserPaymentMethodUpdateWithoutUserInput, UserPaymentMethodUncheckedUpdateWithoutUserInput>
  }

  export type UserPaymentMethodUpdateManyWithWhereWithoutUserInput = {
    where: UserPaymentMethodScalarWhereInput
    data: XOR<UserPaymentMethodUpdateManyMutationInput, UserPaymentMethodUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPaymentMethodScalarWhereInput = {
    AND?: UserPaymentMethodScalarWhereInput | UserPaymentMethodScalarWhereInput[]
    OR?: UserPaymentMethodScalarWhereInput[]
    NOT?: UserPaymentMethodScalarWhereInput | UserPaymentMethodScalarWhereInput[]
    id?: IntFilter<"UserPaymentMethod"> | number
    userId?: StringFilter<"UserPaymentMethod"> | string
    paymentMethod?: EnumPaymentMethodFilter<"UserPaymentMethod"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"UserPaymentMethod"> | Date | string
    updatedAt?: DateTimeFilter<"UserPaymentMethod"> | Date | string
  }

  export type AlbumUpsertWithWhereUniqueWithoutOwnerInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutOwnerInput, AlbumUncheckedUpdateWithoutOwnerInput>
    create: XOR<AlbumCreateWithoutOwnerInput, AlbumUncheckedCreateWithoutOwnerInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutOwnerInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutOwnerInput, AlbumUncheckedUpdateWithoutOwnerInput>
  }

  export type AlbumUpdateManyWithWhereWithoutOwnerInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutOwnerInput>
  }

  export type AlbumScalarWhereInput = {
    AND?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    OR?: AlbumScalarWhereInput[]
    NOT?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    id?: StringFilter<"Album"> | string
    name?: StringFilter<"Album"> | string
    description?: StringNullableFilter<"Album"> | string | null
    userId?: StringFilter<"Album"> | string
    createdAt?: DateTimeFilter<"Album"> | Date | string
    updatedAt?: DateTimeFilter<"Album"> | Date | string
  }

  export type SocialAccountUpsertWithWhereUniqueWithoutOwnerInput = {
    where: SocialAccountWhereUniqueInput
    update: XOR<SocialAccountUpdateWithoutOwnerInput, SocialAccountUncheckedUpdateWithoutOwnerInput>
    create: XOR<SocialAccountCreateWithoutOwnerInput, SocialAccountUncheckedCreateWithoutOwnerInput>
  }

  export type SocialAccountUpdateWithWhereUniqueWithoutOwnerInput = {
    where: SocialAccountWhereUniqueInput
    data: XOR<SocialAccountUpdateWithoutOwnerInput, SocialAccountUncheckedUpdateWithoutOwnerInput>
  }

  export type SocialAccountUpdateManyWithWhereWithoutOwnerInput = {
    where: SocialAccountScalarWhereInput
    data: XOR<SocialAccountUpdateManyMutationInput, SocialAccountUncheckedUpdateManyWithoutOwnerInput>
  }

  export type SocialAccountScalarWhereInput = {
    AND?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
    OR?: SocialAccountScalarWhereInput[]
    NOT?: SocialAccountScalarWhereInput | SocialAccountScalarWhereInput[]
    id?: IntFilter<"SocialAccount"> | number
    userId?: StringFilter<"SocialAccount"> | string
    type?: EnumAccountTypeFilter<"SocialAccount"> | $Enums.AccountType
    fullName?: StringFilter<"SocialAccount"> | string
    avatarUrl?: StringNullableFilter<"SocialAccount"> | string | null
    accountUrl?: StringNullableFilter<"SocialAccount"> | string | null
    accessToken?: StringNullableFilter<"SocialAccount"> | string | null
    refreshToken?: StringNullableFilter<"SocialAccount"> | string | null
    expiredAt?: DateTimeFilter<"SocialAccount"> | Date | string
    createdAt?: DateTimeFilter<"SocialAccount"> | Date | string
    updatedAt?: DateTimeFilter<"SocialAccount"> | Date | string
    disabledAt?: DateTimeNullableFilter<"SocialAccount"> | Date | string | null
  }

  export type UserCreateWithoutUserPaymentMethodInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutUserPaymentMethodInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutUserPaymentMethodInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserPaymentMethodInput, UserUncheckedCreateWithoutUserPaymentMethodInput>
  }

  export type UserUpsertWithoutUserPaymentMethodInput = {
    update: XOR<UserUpdateWithoutUserPaymentMethodInput, UserUncheckedUpdateWithoutUserPaymentMethodInput>
    create: XOR<UserCreateWithoutUserPaymentMethodInput, UserUncheckedCreateWithoutUserPaymentMethodInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserPaymentMethodInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserPaymentMethodInput, UserUncheckedUpdateWithoutUserPaymentMethodInput>
  }

  export type UserUpdateWithoutUserPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutUserPaymentMethodInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaOnCategoryCreateWithoutCategoryInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutMediaOnCategoryInput
  }

  export type MediaOnCategoryUncheckedCreateWithoutCategoryInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnCategoryCreateOrConnectWithoutCategoryInput = {
    where: MediaOnCategoryWhereUniqueInput
    create: XOR<MediaOnCategoryCreateWithoutCategoryInput, MediaOnCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type MediaOnCategoryCreateManyCategoryInputEnvelope = {
    data: MediaOnCategoryCreateManyCategoryInput | MediaOnCategoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MediaOnCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MediaOnCategoryWhereUniqueInput
    update: XOR<MediaOnCategoryUpdateWithoutCategoryInput, MediaOnCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<MediaOnCategoryCreateWithoutCategoryInput, MediaOnCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type MediaOnCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MediaOnCategoryWhereUniqueInput
    data: XOR<MediaOnCategoryUpdateWithoutCategoryInput, MediaOnCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type MediaOnCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: MediaOnCategoryScalarWhereInput
    data: XOR<MediaOnCategoryUpdateManyMutationInput, MediaOnCategoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type MediaOnCategoryScalarWhereInput = {
    AND?: MediaOnCategoryScalarWhereInput | MediaOnCategoryScalarWhereInput[]
    OR?: MediaOnCategoryScalarWhereInput[]
    NOT?: MediaOnCategoryScalarWhereInput | MediaOnCategoryScalarWhereInput[]
    id?: IntFilter<"MediaOnCategory"> | number
    categoryId?: StringFilter<"MediaOnCategory"> | string
    mediaId?: StringFilter<"MediaOnCategory"> | string
    createdAt?: DateTimeFilter<"MediaOnCategory"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnCategory"> | Date | string
  }

  export type CategoryCreateWithoutCategoryOnMediaInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutCategoryOnMediaInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutCategoryOnMediaInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCategoryOnMediaInput, CategoryUncheckedCreateWithoutCategoryOnMediaInput>
  }

  export type MediaCreateWithoutMediaOnCategoryInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutMediaOnCategoryInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutMediaOnCategoryInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutMediaOnCategoryInput, MediaUncheckedCreateWithoutMediaOnCategoryInput>
  }

  export type CategoryUpsertWithoutCategoryOnMediaInput = {
    update: XOR<CategoryUpdateWithoutCategoryOnMediaInput, CategoryUncheckedUpdateWithoutCategoryOnMediaInput>
    create: XOR<CategoryCreateWithoutCategoryOnMediaInput, CategoryUncheckedCreateWithoutCategoryOnMediaInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutCategoryOnMediaInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutCategoryOnMediaInput, CategoryUncheckedUpdateWithoutCategoryOnMediaInput>
  }

  export type CategoryUpdateWithoutCategoryOnMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutCategoryOnMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaUpsertWithoutMediaOnCategoryInput = {
    update: XOR<MediaUpdateWithoutMediaOnCategoryInput, MediaUncheckedUpdateWithoutMediaOnCategoryInput>
    create: XOR<MediaCreateWithoutMediaOnCategoryInput, MediaUncheckedCreateWithoutMediaOnCategoryInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutMediaOnCategoryInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutMediaOnCategoryInput, MediaUncheckedUpdateWithoutMediaOnCategoryInput>
  }

  export type MediaUpdateWithoutMediaOnCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutMediaOnCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateWithoutSessionUploadInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutSessionUploadInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutSessionUploadInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutSessionUploadInput, MediaUncheckedCreateWithoutSessionUploadInput>
  }

  export type MediaUpsertWithoutSessionUploadInput = {
    update: XOR<MediaUpdateWithoutSessionUploadInput, MediaUncheckedUpdateWithoutSessionUploadInput>
    create: XOR<MediaCreateWithoutSessionUploadInput, MediaUncheckedCreateWithoutSessionUploadInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutSessionUploadInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutSessionUploadInput, MediaUncheckedUpdateWithoutSessionUploadInput>
  }

  export type MediaUpdateWithoutSessionUploadInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutSessionUploadInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type UserCreateWithoutMediaInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutMediaInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutMediaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMediaInput, UserUncheckedCreateWithoutMediaInput>
  }

  export type ThumbnailCreateWithoutMediaInput = {
    id?: string
    url: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThumbnailUncheckedCreateWithoutMediaInput = {
    id?: string
    url: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThumbnailCreateOrConnectWithoutMediaInput = {
    where: ThumbnailWhereUniqueInput
    create: XOR<ThumbnailCreateWithoutMediaInput, ThumbnailUncheckedCreateWithoutMediaInput>
  }

  export type ThumbnailCreateManyMediaInputEnvelope = {
    data: ThumbnailCreateManyMediaInput | ThumbnailCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type MediaDetailCreateWithoutMediaInput = {
    description?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaDetailUncheckedCreateWithoutMediaInput = {
    description?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaDetailCreateOrConnectWithoutMediaInput = {
    where: MediaDetailWhereUniqueInput
    create: XOR<MediaDetailCreateWithoutMediaInput, MediaDetailUncheckedCreateWithoutMediaInput>
  }

  export type VideoResourceCreateWithoutMediaInput = {
    id?: string
    label: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoResourceUncheckedCreateWithoutMediaInput = {
    id?: string
    label: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoResourceCreateOrConnectWithoutMediaInput = {
    where: VideoResourceWhereUniqueInput
    create: XOR<VideoResourceCreateWithoutMediaInput, VideoResourceUncheckedCreateWithoutMediaInput>
  }

  export type VideoResourceCreateManyMediaInputEnvelope = {
    data: VideoResourceCreateManyMediaInput | VideoResourceCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type AudioResourceCreateWithoutMediaInput = {
    id?: string
    label: $Enums.AudioQuality
    fileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AudioResourceUncheckedCreateWithoutMediaInput = {
    id?: string
    label: $Enums.AudioQuality
    fileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AudioResourceCreateOrConnectWithoutMediaInput = {
    where: AudioResourceWhereUniqueInput
    create: XOR<AudioResourceCreateWithoutMediaInput, AudioResourceUncheckedCreateWithoutMediaInput>
  }

  export type AudioResourceCreateManyMediaInputEnvelope = {
    data: AudioResourceCreateManyMediaInput | AudioResourceCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type MediaReactionCreateWithoutMediaInput = {
    id?: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMediaReactionsInput
  }

  export type MediaReactionUncheckedCreateWithoutMediaInput = {
    id?: string
    userId: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaReactionCreateOrConnectWithoutMediaInput = {
    where: MediaReactionWhereUniqueInput
    create: XOR<MediaReactionCreateWithoutMediaInput, MediaReactionUncheckedCreateWithoutMediaInput>
  }

  export type MediaReactionCreateManyMediaInputEnvelope = {
    data: MediaReactionCreateManyMediaInput | MediaReactionCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type HistoryCreateWithoutMediaInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHistoriesInput
  }

  export type HistoryUncheckedCreateWithoutMediaInput = {
    id?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoryCreateOrConnectWithoutMediaInput = {
    where: HistoryWhereUniqueInput
    create: XOR<HistoryCreateWithoutMediaInput, HistoryUncheckedCreateWithoutMediaInput>
  }

  export type HistoryCreateManyMediaInputEnvelope = {
    data: HistoryCreateManyMediaInput | HistoryCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type MediaOnCategoryCreateWithoutMediaInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutCategoryOnMediaInput
  }

  export type MediaOnCategoryUncheckedCreateWithoutMediaInput = {
    id?: number
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnCategoryCreateOrConnectWithoutMediaInput = {
    where: MediaOnCategoryWhereUniqueInput
    create: XOR<MediaOnCategoryCreateWithoutMediaInput, MediaOnCategoryUncheckedCreateWithoutMediaInput>
  }

  export type MediaOnCategoryCreateManyMediaInputEnvelope = {
    data: MediaOnCategoryCreateManyMediaInput | MediaOnCategoryCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutMediaInput = {
    id?: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutMediaInput = {
    id?: string
    userId: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutMediaInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutMediaInput, CommentUncheckedCreateWithoutMediaInput>
  }

  export type CommentCreateManyMediaInputEnvelope = {
    data: CommentCreateManyMediaInput | CommentCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type MediaOnPlaylistCreateWithoutMediaInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
    playlist: PlaylistCreateNestedOneWithoutMediaOnPlaylistInput
  }

  export type MediaOnPlaylistUncheckedCreateWithoutMediaInput = {
    id?: number
    playlistId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
  }

  export type MediaOnPlaylistCreateOrConnectWithoutMediaInput = {
    where: MediaOnPlaylistWhereUniqueInput
    create: XOR<MediaOnPlaylistCreateWithoutMediaInput, MediaOnPlaylistUncheckedCreateWithoutMediaInput>
  }

  export type MediaOnPlaylistCreateManyMediaInputEnvelope = {
    data: MediaOnPlaylistCreateManyMediaInput | MediaOnPlaylistCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type SessionUploadCreateWithoutMediaInput = {
    id?: string
    sessionUploadUrl: string
    created_at?: Date | string
    updated_at?: Date | string
    expired_at?: Date | string | null
  }

  export type SessionUploadUncheckedCreateWithoutMediaInput = {
    id?: string
    sessionUploadUrl: string
    created_at?: Date | string
    updated_at?: Date | string
    expired_at?: Date | string | null
  }

  export type SessionUploadCreateOrConnectWithoutMediaInput = {
    where: SessionUploadWhereUniqueInput
    create: XOR<SessionUploadCreateWithoutMediaInput, SessionUploadUncheckedCreateWithoutMediaInput>
  }

  export type SessionUploadCreateManyMediaInputEnvelope = {
    data: SessionUploadCreateManyMediaInput | SessionUploadCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type MediaOnAlbumCreateWithoutMediaInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    album: AlbumCreateNestedOneWithoutMediaOnAlbumInput
  }

  export type MediaOnAlbumUncheckedCreateWithoutMediaInput = {
    id?: number
    albumId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnAlbumCreateOrConnectWithoutMediaInput = {
    where: MediaOnAlbumWhereUniqueInput
    create: XOR<MediaOnAlbumCreateWithoutMediaInput, MediaOnAlbumUncheckedCreateWithoutMediaInput>
  }

  export type MediaOnAlbumCreateManyMediaInputEnvelope = {
    data: MediaOnAlbumCreateManyMediaInput | MediaOnAlbumCreateManyMediaInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMediaInput = {
    update: XOR<UserUpdateWithoutMediaInput, UserUncheckedUpdateWithoutMediaInput>
    create: XOR<UserCreateWithoutMediaInput, UserUncheckedCreateWithoutMediaInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMediaInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMediaInput, UserUncheckedUpdateWithoutMediaInput>
  }

  export type UserUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type ThumbnailUpsertWithWhereUniqueWithoutMediaInput = {
    where: ThumbnailWhereUniqueInput
    update: XOR<ThumbnailUpdateWithoutMediaInput, ThumbnailUncheckedUpdateWithoutMediaInput>
    create: XOR<ThumbnailCreateWithoutMediaInput, ThumbnailUncheckedCreateWithoutMediaInput>
  }

  export type ThumbnailUpdateWithWhereUniqueWithoutMediaInput = {
    where: ThumbnailWhereUniqueInput
    data: XOR<ThumbnailUpdateWithoutMediaInput, ThumbnailUncheckedUpdateWithoutMediaInput>
  }

  export type ThumbnailUpdateManyWithWhereWithoutMediaInput = {
    where: ThumbnailScalarWhereInput
    data: XOR<ThumbnailUpdateManyMutationInput, ThumbnailUncheckedUpdateManyWithoutMediaInput>
  }

  export type ThumbnailScalarWhereInput = {
    AND?: ThumbnailScalarWhereInput | ThumbnailScalarWhereInput[]
    OR?: ThumbnailScalarWhereInput[]
    NOT?: ThumbnailScalarWhereInput | ThumbnailScalarWhereInput[]
    id?: StringFilter<"Thumbnail"> | string
    url?: StringFilter<"Thumbnail"> | string
    isPrimary?: BoolFilter<"Thumbnail"> | boolean
    mediaId?: StringFilter<"Thumbnail"> | string
    createdAt?: DateTimeFilter<"Thumbnail"> | Date | string
    updatedAt?: DateTimeFilter<"Thumbnail"> | Date | string
  }

  export type MediaDetailUpsertWithoutMediaInput = {
    update: XOR<MediaDetailUpdateWithoutMediaInput, MediaDetailUncheckedUpdateWithoutMediaInput>
    create: XOR<MediaDetailCreateWithoutMediaInput, MediaDetailUncheckedCreateWithoutMediaInput>
    where?: MediaDetailWhereInput
  }

  export type MediaDetailUpdateToOneWithWhereWithoutMediaInput = {
    where?: MediaDetailWhereInput
    data: XOR<MediaDetailUpdateWithoutMediaInput, MediaDetailUncheckedUpdateWithoutMediaInput>
  }

  export type MediaDetailUpdateWithoutMediaInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaDetailUncheckedUpdateWithoutMediaInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoResourceUpsertWithWhereUniqueWithoutMediaInput = {
    where: VideoResourceWhereUniqueInput
    update: XOR<VideoResourceUpdateWithoutMediaInput, VideoResourceUncheckedUpdateWithoutMediaInput>
    create: XOR<VideoResourceCreateWithoutMediaInput, VideoResourceUncheckedCreateWithoutMediaInput>
  }

  export type VideoResourceUpdateWithWhereUniqueWithoutMediaInput = {
    where: VideoResourceWhereUniqueInput
    data: XOR<VideoResourceUpdateWithoutMediaInput, VideoResourceUncheckedUpdateWithoutMediaInput>
  }

  export type VideoResourceUpdateManyWithWhereWithoutMediaInput = {
    where: VideoResourceScalarWhereInput
    data: XOR<VideoResourceUpdateManyMutationInput, VideoResourceUncheckedUpdateManyWithoutMediaInput>
  }

  export type VideoResourceScalarWhereInput = {
    AND?: VideoResourceScalarWhereInput | VideoResourceScalarWhereInput[]
    OR?: VideoResourceScalarWhereInput[]
    NOT?: VideoResourceScalarWhereInput | VideoResourceScalarWhereInput[]
    id?: StringFilter<"VideoResource"> | string
    mediaId?: StringFilter<"VideoResource"> | string
    label?: StringFilter<"VideoResource"> | string
    url?: StringFilter<"VideoResource"> | string
    createdAt?: DateTimeFilter<"VideoResource"> | Date | string
    updatedAt?: DateTimeFilter<"VideoResource"> | Date | string
  }

  export type AudioResourceUpsertWithWhereUniqueWithoutMediaInput = {
    where: AudioResourceWhereUniqueInput
    update: XOR<AudioResourceUpdateWithoutMediaInput, AudioResourceUncheckedUpdateWithoutMediaInput>
    create: XOR<AudioResourceCreateWithoutMediaInput, AudioResourceUncheckedCreateWithoutMediaInput>
  }

  export type AudioResourceUpdateWithWhereUniqueWithoutMediaInput = {
    where: AudioResourceWhereUniqueInput
    data: XOR<AudioResourceUpdateWithoutMediaInput, AudioResourceUncheckedUpdateWithoutMediaInput>
  }

  export type AudioResourceUpdateManyWithWhereWithoutMediaInput = {
    where: AudioResourceScalarWhereInput
    data: XOR<AudioResourceUpdateManyMutationInput, AudioResourceUncheckedUpdateManyWithoutMediaInput>
  }

  export type AudioResourceScalarWhereInput = {
    AND?: AudioResourceScalarWhereInput | AudioResourceScalarWhereInput[]
    OR?: AudioResourceScalarWhereInput[]
    NOT?: AudioResourceScalarWhereInput | AudioResourceScalarWhereInput[]
    id?: StringFilter<"AudioResource"> | string
    mediaId?: StringFilter<"AudioResource"> | string
    label?: EnumAudioQualityFilter<"AudioResource"> | $Enums.AudioQuality
    fileId?: StringFilter<"AudioResource"> | string
    createdAt?: DateTimeFilter<"AudioResource"> | Date | string
    updatedAt?: DateTimeFilter<"AudioResource"> | Date | string
  }

  export type MediaReactionUpsertWithWhereUniqueWithoutMediaInput = {
    where: MediaReactionWhereUniqueInput
    update: XOR<MediaReactionUpdateWithoutMediaInput, MediaReactionUncheckedUpdateWithoutMediaInput>
    create: XOR<MediaReactionCreateWithoutMediaInput, MediaReactionUncheckedCreateWithoutMediaInput>
  }

  export type MediaReactionUpdateWithWhereUniqueWithoutMediaInput = {
    where: MediaReactionWhereUniqueInput
    data: XOR<MediaReactionUpdateWithoutMediaInput, MediaReactionUncheckedUpdateWithoutMediaInput>
  }

  export type MediaReactionUpdateManyWithWhereWithoutMediaInput = {
    where: MediaReactionScalarWhereInput
    data: XOR<MediaReactionUpdateManyMutationInput, MediaReactionUncheckedUpdateManyWithoutMediaInput>
  }

  export type HistoryUpsertWithWhereUniqueWithoutMediaInput = {
    where: HistoryWhereUniqueInput
    update: XOR<HistoryUpdateWithoutMediaInput, HistoryUncheckedUpdateWithoutMediaInput>
    create: XOR<HistoryCreateWithoutMediaInput, HistoryUncheckedCreateWithoutMediaInput>
  }

  export type HistoryUpdateWithWhereUniqueWithoutMediaInput = {
    where: HistoryWhereUniqueInput
    data: XOR<HistoryUpdateWithoutMediaInput, HistoryUncheckedUpdateWithoutMediaInput>
  }

  export type HistoryUpdateManyWithWhereWithoutMediaInput = {
    where: HistoryScalarWhereInput
    data: XOR<HistoryUpdateManyMutationInput, HistoryUncheckedUpdateManyWithoutMediaInput>
  }

  export type MediaOnCategoryUpsertWithWhereUniqueWithoutMediaInput = {
    where: MediaOnCategoryWhereUniqueInput
    update: XOR<MediaOnCategoryUpdateWithoutMediaInput, MediaOnCategoryUncheckedUpdateWithoutMediaInput>
    create: XOR<MediaOnCategoryCreateWithoutMediaInput, MediaOnCategoryUncheckedCreateWithoutMediaInput>
  }

  export type MediaOnCategoryUpdateWithWhereUniqueWithoutMediaInput = {
    where: MediaOnCategoryWhereUniqueInput
    data: XOR<MediaOnCategoryUpdateWithoutMediaInput, MediaOnCategoryUncheckedUpdateWithoutMediaInput>
  }

  export type MediaOnCategoryUpdateManyWithWhereWithoutMediaInput = {
    where: MediaOnCategoryScalarWhereInput
    data: XOR<MediaOnCategoryUpdateManyMutationInput, MediaOnCategoryUncheckedUpdateManyWithoutMediaInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutMediaInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutMediaInput, CommentUncheckedUpdateWithoutMediaInput>
    create: XOR<CommentCreateWithoutMediaInput, CommentUncheckedCreateWithoutMediaInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutMediaInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutMediaInput, CommentUncheckedUpdateWithoutMediaInput>
  }

  export type CommentUpdateManyWithWhereWithoutMediaInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutMediaInput>
  }

  export type MediaOnPlaylistUpsertWithWhereUniqueWithoutMediaInput = {
    where: MediaOnPlaylistWhereUniqueInput
    update: XOR<MediaOnPlaylistUpdateWithoutMediaInput, MediaOnPlaylistUncheckedUpdateWithoutMediaInput>
    create: XOR<MediaOnPlaylistCreateWithoutMediaInput, MediaOnPlaylistUncheckedCreateWithoutMediaInput>
  }

  export type MediaOnPlaylistUpdateWithWhereUniqueWithoutMediaInput = {
    where: MediaOnPlaylistWhereUniqueInput
    data: XOR<MediaOnPlaylistUpdateWithoutMediaInput, MediaOnPlaylistUncheckedUpdateWithoutMediaInput>
  }

  export type MediaOnPlaylistUpdateManyWithWhereWithoutMediaInput = {
    where: MediaOnPlaylistScalarWhereInput
    data: XOR<MediaOnPlaylistUpdateManyMutationInput, MediaOnPlaylistUncheckedUpdateManyWithoutMediaInput>
  }

  export type MediaOnPlaylistScalarWhereInput = {
    AND?: MediaOnPlaylistScalarWhereInput | MediaOnPlaylistScalarWhereInput[]
    OR?: MediaOnPlaylistScalarWhereInput[]
    NOT?: MediaOnPlaylistScalarWhereInput | MediaOnPlaylistScalarWhereInput[]
    id?: IntFilter<"MediaOnPlaylist"> | number
    playlistId?: StringFilter<"MediaOnPlaylist"> | string
    mediaId?: StringFilter<"MediaOnPlaylist"> | string
    createdAt?: DateTimeFilter<"MediaOnPlaylist"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnPlaylist"> | Date | string
    sortNo?: IntFilter<"MediaOnPlaylist"> | number
  }

  export type SessionUploadUpsertWithWhereUniqueWithoutMediaInput = {
    where: SessionUploadWhereUniqueInput
    update: XOR<SessionUploadUpdateWithoutMediaInput, SessionUploadUncheckedUpdateWithoutMediaInput>
    create: XOR<SessionUploadCreateWithoutMediaInput, SessionUploadUncheckedCreateWithoutMediaInput>
  }

  export type SessionUploadUpdateWithWhereUniqueWithoutMediaInput = {
    where: SessionUploadWhereUniqueInput
    data: XOR<SessionUploadUpdateWithoutMediaInput, SessionUploadUncheckedUpdateWithoutMediaInput>
  }

  export type SessionUploadUpdateManyWithWhereWithoutMediaInput = {
    where: SessionUploadScalarWhereInput
    data: XOR<SessionUploadUpdateManyMutationInput, SessionUploadUncheckedUpdateManyWithoutMediaInput>
  }

  export type SessionUploadScalarWhereInput = {
    AND?: SessionUploadScalarWhereInput | SessionUploadScalarWhereInput[]
    OR?: SessionUploadScalarWhereInput[]
    NOT?: SessionUploadScalarWhereInput | SessionUploadScalarWhereInput[]
    id?: StringFilter<"SessionUpload"> | string
    sessionUploadUrl?: StringFilter<"SessionUpload"> | string
    mediaId?: StringFilter<"SessionUpload"> | string
    created_at?: DateTimeFilter<"SessionUpload"> | Date | string
    updated_at?: DateTimeFilter<"SessionUpload"> | Date | string
    expired_at?: DateTimeNullableFilter<"SessionUpload"> | Date | string | null
  }

  export type MediaOnAlbumUpsertWithWhereUniqueWithoutMediaInput = {
    where: MediaOnAlbumWhereUniqueInput
    update: XOR<MediaOnAlbumUpdateWithoutMediaInput, MediaOnAlbumUncheckedUpdateWithoutMediaInput>
    create: XOR<MediaOnAlbumCreateWithoutMediaInput, MediaOnAlbumUncheckedCreateWithoutMediaInput>
  }

  export type MediaOnAlbumUpdateWithWhereUniqueWithoutMediaInput = {
    where: MediaOnAlbumWhereUniqueInput
    data: XOR<MediaOnAlbumUpdateWithoutMediaInput, MediaOnAlbumUncheckedUpdateWithoutMediaInput>
  }

  export type MediaOnAlbumUpdateManyWithWhereWithoutMediaInput = {
    where: MediaOnAlbumScalarWhereInput
    data: XOR<MediaOnAlbumUpdateManyMutationInput, MediaOnAlbumUncheckedUpdateManyWithoutMediaInput>
  }

  export type MediaOnAlbumScalarWhereInput = {
    AND?: MediaOnAlbumScalarWhereInput | MediaOnAlbumScalarWhereInput[]
    OR?: MediaOnAlbumScalarWhereInput[]
    NOT?: MediaOnAlbumScalarWhereInput | MediaOnAlbumScalarWhereInput[]
    id?: IntFilter<"MediaOnAlbum"> | number
    albumId?: StringFilter<"MediaOnAlbum"> | string
    mediaId?: StringFilter<"MediaOnAlbum"> | string
    createdAt?: DateTimeFilter<"MediaOnAlbum"> | Date | string
    updatedAt?: DateTimeFilter<"MediaOnAlbum"> | Date | string
  }

  export type UserCreateWithoutMediaReactionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutMediaReactionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutMediaReactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMediaReactionsInput, UserUncheckedCreateWithoutMediaReactionsInput>
  }

  export type MediaCreateWithoutMediaReactionInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutMediaReactionInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutMediaReactionInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutMediaReactionInput, MediaUncheckedCreateWithoutMediaReactionInput>
  }

  export type UserUpsertWithoutMediaReactionsInput = {
    update: XOR<UserUpdateWithoutMediaReactionsInput, UserUncheckedUpdateWithoutMediaReactionsInput>
    create: XOR<UserCreateWithoutMediaReactionsInput, UserUncheckedCreateWithoutMediaReactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMediaReactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMediaReactionsInput, UserUncheckedUpdateWithoutMediaReactionsInput>
  }

  export type UserUpdateWithoutMediaReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutMediaReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaUpsertWithoutMediaReactionInput = {
    update: XOR<MediaUpdateWithoutMediaReactionInput, MediaUncheckedUpdateWithoutMediaReactionInput>
    create: XOR<MediaCreateWithoutMediaReactionInput, MediaUncheckedCreateWithoutMediaReactionInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutMediaReactionInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutMediaReactionInput, MediaUncheckedUpdateWithoutMediaReactionInput>
  }

  export type MediaUpdateWithoutMediaReactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutMediaReactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type UserCreateWithoutCommentInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type MediaCreateWithoutCommentInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutCommentInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutCommentInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutCommentInput, MediaUncheckedCreateWithoutCommentInput>
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaUpsertWithoutCommentInput = {
    update: XOR<MediaUpdateWithoutCommentInput, MediaUncheckedUpdateWithoutCommentInput>
    create: XOR<MediaCreateWithoutCommentInput, MediaUncheckedCreateWithoutCommentInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutCommentInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutCommentInput, MediaUncheckedUpdateWithoutCommentInput>
  }

  export type MediaUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type UserCreateWithoutPlaylistInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutPlaylistInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutPlaylistInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
  }

  export type MediaOnPlaylistCreateWithoutPlaylistInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
    media: MediaCreateNestedOneWithoutMediaOnPlaylistInput
  }

  export type MediaOnPlaylistUncheckedCreateWithoutPlaylistInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
  }

  export type MediaOnPlaylistCreateOrConnectWithoutPlaylistInput = {
    where: MediaOnPlaylistWhereUniqueInput
    create: XOR<MediaOnPlaylistCreateWithoutPlaylistInput, MediaOnPlaylistUncheckedCreateWithoutPlaylistInput>
  }

  export type MediaOnPlaylistCreateManyPlaylistInputEnvelope = {
    data: MediaOnPlaylistCreateManyPlaylistInput | MediaOnPlaylistCreateManyPlaylistInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPlaylistInput = {
    update: XOR<UserUpdateWithoutPlaylistInput, UserUncheckedUpdateWithoutPlaylistInput>
    create: XOR<UserCreateWithoutPlaylistInput, UserUncheckedCreateWithoutPlaylistInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlaylistInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlaylistInput, UserUncheckedUpdateWithoutPlaylistInput>
  }

  export type UserUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaOnPlaylistUpsertWithWhereUniqueWithoutPlaylistInput = {
    where: MediaOnPlaylistWhereUniqueInput
    update: XOR<MediaOnPlaylistUpdateWithoutPlaylistInput, MediaOnPlaylistUncheckedUpdateWithoutPlaylistInput>
    create: XOR<MediaOnPlaylistCreateWithoutPlaylistInput, MediaOnPlaylistUncheckedCreateWithoutPlaylistInput>
  }

  export type MediaOnPlaylistUpdateWithWhereUniqueWithoutPlaylistInput = {
    where: MediaOnPlaylistWhereUniqueInput
    data: XOR<MediaOnPlaylistUpdateWithoutPlaylistInput, MediaOnPlaylistUncheckedUpdateWithoutPlaylistInput>
  }

  export type MediaOnPlaylistUpdateManyWithWhereWithoutPlaylistInput = {
    where: MediaOnPlaylistScalarWhereInput
    data: XOR<MediaOnPlaylistUpdateManyMutationInput, MediaOnPlaylistUncheckedUpdateManyWithoutPlaylistInput>
  }

  export type PlaylistCreateWithoutMediaOnPlaylistInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPlaylistInput
  }

  export type PlaylistUncheckedCreateWithoutMediaOnPlaylistInput = {
    id?: string
    userId: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistCreateOrConnectWithoutMediaOnPlaylistInput = {
    where: PlaylistWhereUniqueInput
    create: XOR<PlaylistCreateWithoutMediaOnPlaylistInput, PlaylistUncheckedCreateWithoutMediaOnPlaylistInput>
  }

  export type MediaCreateWithoutMediaOnPlaylistInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutMediaOnPlaylistInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutMediaOnPlaylistInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutMediaOnPlaylistInput, MediaUncheckedCreateWithoutMediaOnPlaylistInput>
  }

  export type PlaylistUpsertWithoutMediaOnPlaylistInput = {
    update: XOR<PlaylistUpdateWithoutMediaOnPlaylistInput, PlaylistUncheckedUpdateWithoutMediaOnPlaylistInput>
    create: XOR<PlaylistCreateWithoutMediaOnPlaylistInput, PlaylistUncheckedCreateWithoutMediaOnPlaylistInput>
    where?: PlaylistWhereInput
  }

  export type PlaylistUpdateToOneWithWhereWithoutMediaOnPlaylistInput = {
    where?: PlaylistWhereInput
    data: XOR<PlaylistUpdateWithoutMediaOnPlaylistInput, PlaylistUncheckedUpdateWithoutMediaOnPlaylistInput>
  }

  export type PlaylistUpdateWithoutMediaOnPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutMediaOnPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaUpsertWithoutMediaOnPlaylistInput = {
    update: XOR<MediaUpdateWithoutMediaOnPlaylistInput, MediaUncheckedUpdateWithoutMediaOnPlaylistInput>
    create: XOR<MediaCreateWithoutMediaOnPlaylistInput, MediaUncheckedCreateWithoutMediaOnPlaylistInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutMediaOnPlaylistInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutMediaOnPlaylistInput, MediaUncheckedUpdateWithoutMediaOnPlaylistInput>
  }

  export type MediaUpdateWithoutMediaOnPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutMediaOnPlaylistInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type UserCreateWithoutHistoriesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutHistoriesInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutHistoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistoriesInput, UserUncheckedCreateWithoutHistoriesInput>
  }

  export type MediaCreateWithoutHistoryInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutHistoryInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutHistoryInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutHistoryInput, MediaUncheckedCreateWithoutHistoryInput>
  }

  export type UserUpsertWithoutHistoriesInput = {
    update: XOR<UserUpdateWithoutHistoriesInput, UserUncheckedUpdateWithoutHistoriesInput>
    create: XOR<UserCreateWithoutHistoriesInput, UserUncheckedCreateWithoutHistoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHistoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHistoriesInput, UserUncheckedUpdateWithoutHistoriesInput>
  }

  export type UserUpdateWithoutHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaUpsertWithoutHistoryInput = {
    update: XOR<MediaUpdateWithoutHistoryInput, MediaUncheckedUpdateWithoutHistoryInput>
    create: XOR<MediaCreateWithoutHistoryInput, MediaUncheckedCreateWithoutHistoryInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutHistoryInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutHistoryInput, MediaUncheckedUpdateWithoutHistoryInput>
  }

  export type MediaUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type UserCreateWithoutSubscribersInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutSubscribersInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutSubscribersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
  }

  export type UserCreateWithoutChannelInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutChannelInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutChannelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelInput, UserUncheckedCreateWithoutChannelInput>
  }

  export type UserUpsertWithoutSubscribersInput = {
    update: XOR<UserUpdateWithoutSubscribersInput, UserUncheckedUpdateWithoutSubscribersInput>
    create: XOR<UserCreateWithoutSubscribersInput, UserUncheckedCreateWithoutSubscribersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubscribersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubscribersInput, UserUncheckedUpdateWithoutSubscribersInput>
  }

  export type UserUpdateWithoutSubscribersInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutSubscribersInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserUpsertWithoutChannelInput = {
    update: XOR<UserUpdateWithoutChannelInput, UserUncheckedUpdateWithoutChannelInput>
    create: XOR<UserCreateWithoutChannelInput, UserUncheckedCreateWithoutChannelInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChannelInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChannelInput, UserUncheckedUpdateWithoutChannelInput>
  }

  export type UserUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateWithoutNotificationSubscriptionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutNotificationSubscriptionsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutNotificationSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationSubscriptionsInput, UserUncheckedCreateWithoutNotificationSubscriptionsInput>
  }

  export type UserUpsertWithoutNotificationSubscriptionsInput = {
    update: XOR<UserUpdateWithoutNotificationSubscriptionsInput, UserUncheckedUpdateWithoutNotificationSubscriptionsInput>
    create: XOR<UserCreateWithoutNotificationSubscriptionsInput, UserUncheckedCreateWithoutNotificationSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationSubscriptionsInput, UserUncheckedUpdateWithoutNotificationSubscriptionsInput>
  }

  export type UserUpdateWithoutNotificationSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaCreateWithoutVideoResourcesInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutVideoResourcesInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutVideoResourcesInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutVideoResourcesInput, MediaUncheckedCreateWithoutVideoResourcesInput>
  }

  export type MediaUpsertWithoutVideoResourcesInput = {
    update: XOR<MediaUpdateWithoutVideoResourcesInput, MediaUncheckedUpdateWithoutVideoResourcesInput>
    create: XOR<MediaCreateWithoutVideoResourcesInput, MediaUncheckedCreateWithoutVideoResourcesInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutVideoResourcesInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutVideoResourcesInput, MediaUncheckedUpdateWithoutVideoResourcesInput>
  }

  export type MediaUpdateWithoutVideoResourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutVideoResourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateWithoutAudioResourcesInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutAudioResourcesInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutAudioResourcesInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutAudioResourcesInput, MediaUncheckedCreateWithoutAudioResourcesInput>
  }

  export type MediaUpsertWithoutAudioResourcesInput = {
    update: XOR<MediaUpdateWithoutAudioResourcesInput, MediaUncheckedUpdateWithoutAudioResourcesInput>
    create: XOR<MediaCreateWithoutAudioResourcesInput, MediaUncheckedCreateWithoutAudioResourcesInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutAudioResourcesInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutAudioResourcesInput, MediaUncheckedUpdateWithoutAudioResourcesInput>
  }

  export type MediaUpdateWithoutAudioResourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutAudioResourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateWithoutDetailInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutDetailInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutDetailInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutDetailInput, MediaUncheckedCreateWithoutDetailInput>
  }

  export type MediaUpsertWithoutDetailInput = {
    update: XOR<MediaUpdateWithoutDetailInput, MediaUncheckedUpdateWithoutDetailInput>
    create: XOR<MediaCreateWithoutDetailInput, MediaUncheckedCreateWithoutDetailInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutDetailInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutDetailInput, MediaUncheckedUpdateWithoutDetailInput>
  }

  export type MediaUpdateWithoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutDetailInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaCreateWithoutThumbnailsInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutThumbnailsInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
    mediaOnAlbum?: MediaOnAlbumUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutThumbnailsInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutThumbnailsInput, MediaUncheckedCreateWithoutThumbnailsInput>
  }

  export type MediaUpsertWithoutThumbnailsInput = {
    update: XOR<MediaUpdateWithoutThumbnailsInput, MediaUncheckedUpdateWithoutThumbnailsInput>
    create: XOR<MediaCreateWithoutThumbnailsInput, MediaUncheckedCreateWithoutThumbnailsInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutThumbnailsInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutThumbnailsInput, MediaUncheckedUpdateWithoutThumbnailsInput>
  }

  export type MediaUpdateWithoutThumbnailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutThumbnailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type PaymentTransactionDetailCreateWithoutPaymentTransactionInput = {
    totalPrice: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput = {
    totalPrice: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionDetailCreateOrConnectWithoutPaymentTransactionInput = {
    where: PaymentTransactionDetailWhereUniqueInput
    create: XOR<PaymentTransactionDetailCreateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput>
  }

  export type PaymentTransactionDetailCreateManyPaymentTransactionInputEnvelope = {
    data: PaymentTransactionDetailCreateManyPaymentTransactionInput | PaymentTransactionDetailCreateManyPaymentTransactionInput[]
    skipDuplicates?: boolean
  }

  export type PaymentTransactionDetailUpsertWithWhereUniqueWithoutPaymentTransactionInput = {
    where: PaymentTransactionDetailWhereUniqueInput
    update: XOR<PaymentTransactionDetailUpdateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedUpdateWithoutPaymentTransactionInput>
    create: XOR<PaymentTransactionDetailCreateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedCreateWithoutPaymentTransactionInput>
  }

  export type PaymentTransactionDetailUpdateWithWhereUniqueWithoutPaymentTransactionInput = {
    where: PaymentTransactionDetailWhereUniqueInput
    data: XOR<PaymentTransactionDetailUpdateWithoutPaymentTransactionInput, PaymentTransactionDetailUncheckedUpdateWithoutPaymentTransactionInput>
  }

  export type PaymentTransactionDetailUpdateManyWithWhereWithoutPaymentTransactionInput = {
    where: PaymentTransactionDetailScalarWhereInput
    data: XOR<PaymentTransactionDetailUpdateManyMutationInput, PaymentTransactionDetailUncheckedUpdateManyWithoutPaymentTransactionInput>
  }

  export type PaymentTransactionDetailScalarWhereInput = {
    AND?: PaymentTransactionDetailScalarWhereInput | PaymentTransactionDetailScalarWhereInput[]
    OR?: PaymentTransactionDetailScalarWhereInput[]
    NOT?: PaymentTransactionDetailScalarWhereInput | PaymentTransactionDetailScalarWhereInput[]
    id?: IntFilter<"PaymentTransactionDetail"> | number
    totalPrice?: FloatFilter<"PaymentTransactionDetail"> | number
    paymentMethod?: EnumPaymentMethodFilter<"PaymentTransactionDetail"> | $Enums.PaymentMethod
    createdAt?: DateTimeFilter<"PaymentTransactionDetail"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransactionDetail"> | Date | string
  }

  export type PaymentTransactionCreateWithoutPaymentTransactionDetailInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionUncheckedCreateWithoutPaymentTransactionDetailInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionCreateOrConnectWithoutPaymentTransactionDetailInput = {
    where: PaymentTransactionWhereUniqueInput
    create: XOR<PaymentTransactionCreateWithoutPaymentTransactionDetailInput, PaymentTransactionUncheckedCreateWithoutPaymentTransactionDetailInput>
  }

  export type PaymentTransactionUpsertWithoutPaymentTransactionDetailInput = {
    update: XOR<PaymentTransactionUpdateWithoutPaymentTransactionDetailInput, PaymentTransactionUncheckedUpdateWithoutPaymentTransactionDetailInput>
    create: XOR<PaymentTransactionCreateWithoutPaymentTransactionDetailInput, PaymentTransactionUncheckedCreateWithoutPaymentTransactionDetailInput>
    where?: PaymentTransactionWhereInput
  }

  export type PaymentTransactionUpdateToOneWithWhereWithoutPaymentTransactionDetailInput = {
    where?: PaymentTransactionWhereInput
    data: XOR<PaymentTransactionUpdateWithoutPaymentTransactionDetailInput, PaymentTransactionUncheckedUpdateWithoutPaymentTransactionDetailInput>
  }

  export type PaymentTransactionUpdateWithoutPaymentTransactionDetailInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateWithoutPaymentTransactionDetailInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaCreateWithoutMediaOnAlbumInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    owner: UserCreateNestedOneWithoutMediaInput
    thumbnails?: ThumbnailCreateNestedManyWithoutMediaInput
    detail?: MediaDetailCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionCreateNestedManyWithoutMediaInput
    history?: HistoryCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryCreateNestedManyWithoutMediaInput
    comment?: CommentCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadCreateNestedManyWithoutMediaInput
  }

  export type MediaUncheckedCreateWithoutMediaOnAlbumInput = {
    id?: string
    userId: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
    thumbnails?: ThumbnailUncheckedCreateNestedManyWithoutMediaInput
    detail?: MediaDetailUncheckedCreateNestedOneWithoutMediaInput
    videoResources?: VideoResourceUncheckedCreateNestedManyWithoutMediaInput
    audioResources?: AudioResourceUncheckedCreateNestedManyWithoutMediaInput
    mediaReaction?: MediaReactionUncheckedCreateNestedManyWithoutMediaInput
    history?: HistoryUncheckedCreateNestedManyWithoutMediaInput
    mediaOnCategory?: MediaOnCategoryUncheckedCreateNestedManyWithoutMediaInput
    comment?: CommentUncheckedCreateNestedManyWithoutMediaInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedCreateNestedManyWithoutMediaInput
    sessionUpload?: SessionUploadUncheckedCreateNestedManyWithoutMediaInput
  }

  export type MediaCreateOrConnectWithoutMediaOnAlbumInput = {
    where: MediaWhereUniqueInput
    create: XOR<MediaCreateWithoutMediaOnAlbumInput, MediaUncheckedCreateWithoutMediaOnAlbumInput>
  }

  export type AlbumCreateWithoutMediaOnAlbumInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutMediaOnAlbumInput = {
    id?: string
    name: string
    description?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumCreateOrConnectWithoutMediaOnAlbumInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutMediaOnAlbumInput, AlbumUncheckedCreateWithoutMediaOnAlbumInput>
  }

  export type MediaUpsertWithoutMediaOnAlbumInput = {
    update: XOR<MediaUpdateWithoutMediaOnAlbumInput, MediaUncheckedUpdateWithoutMediaOnAlbumInput>
    create: XOR<MediaCreateWithoutMediaOnAlbumInput, MediaUncheckedCreateWithoutMediaOnAlbumInput>
    where?: MediaWhereInput
  }

  export type MediaUpdateToOneWithWhereWithoutMediaOnAlbumInput = {
    where?: MediaWhereInput
    data: XOR<MediaUpdateWithoutMediaOnAlbumInput, MediaUncheckedUpdateWithoutMediaOnAlbumInput>
  }

  export type MediaUpdateWithoutMediaOnAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    owner?: UserUpdateOneRequiredWithoutMediaNestedInput
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutMediaOnAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type AlbumUpsertWithoutMediaOnAlbumInput = {
    update: XOR<AlbumUpdateWithoutMediaOnAlbumInput, AlbumUncheckedUpdateWithoutMediaOnAlbumInput>
    create: XOR<AlbumCreateWithoutMediaOnAlbumInput, AlbumUncheckedCreateWithoutMediaOnAlbumInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutMediaOnAlbumInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutMediaOnAlbumInput, AlbumUncheckedUpdateWithoutMediaOnAlbumInput>
  }

  export type AlbumUpdateWithoutMediaOnAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutMediaOnAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutAlbumInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    SocialAccount?: SocialAccountCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutAlbumInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    SocialAccount?: SocialAccountUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutAlbumInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlbumInput, UserUncheckedCreateWithoutAlbumInput>
  }

  export type MediaOnAlbumCreateWithoutAlbumInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    media: MediaCreateNestedOneWithoutMediaOnAlbumInput
  }

  export type MediaOnAlbumUncheckedCreateWithoutAlbumInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnAlbumCreateOrConnectWithoutAlbumInput = {
    where: MediaOnAlbumWhereUniqueInput
    create: XOR<MediaOnAlbumCreateWithoutAlbumInput, MediaOnAlbumUncheckedCreateWithoutAlbumInput>
  }

  export type MediaOnAlbumCreateManyAlbumInputEnvelope = {
    data: MediaOnAlbumCreateManyAlbumInput | MediaOnAlbumCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAlbumInput = {
    update: XOR<UserUpdateWithoutAlbumInput, UserUncheckedUpdateWithoutAlbumInput>
    create: XOR<UserCreateWithoutAlbumInput, UserUncheckedCreateWithoutAlbumInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlbumInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlbumInput, UserUncheckedUpdateWithoutAlbumInput>
  }

  export type UserUpdateWithoutAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    SocialAccount?: SocialAccountUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    SocialAccount?: SocialAccountUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaOnAlbumUpsertWithWhereUniqueWithoutAlbumInput = {
    where: MediaOnAlbumWhereUniqueInput
    update: XOR<MediaOnAlbumUpdateWithoutAlbumInput, MediaOnAlbumUncheckedUpdateWithoutAlbumInput>
    create: XOR<MediaOnAlbumCreateWithoutAlbumInput, MediaOnAlbumUncheckedCreateWithoutAlbumInput>
  }

  export type MediaOnAlbumUpdateWithWhereUniqueWithoutAlbumInput = {
    where: MediaOnAlbumWhereUniqueInput
    data: XOR<MediaOnAlbumUpdateWithoutAlbumInput, MediaOnAlbumUncheckedUpdateWithoutAlbumInput>
  }

  export type MediaOnAlbumUpdateManyWithWhereWithoutAlbumInput = {
    where: MediaOnAlbumScalarWhereInput
    data: XOR<MediaOnAlbumUpdateManyMutationInput, MediaOnAlbumUncheckedUpdateManyWithoutAlbumInput>
  }

  export type UserCreateWithoutSocialAccountInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionCreateNestedManyWithoutUserInput
    histories?: HistoryCreateNestedManyWithoutUserInput
    subscribers?: SubscriberCreateNestedManyWithoutUserInput
    channel?: SubscriberCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
    Playlist?: PlaylistCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodCreateNestedManyWithoutUserInput
    Album?: AlbumCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutSocialAccountInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    username: string
    password: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    media?: MediaUncheckedCreateNestedManyWithoutOwnerInput
    mediaReactions?: MediaReactionUncheckedCreateNestedManyWithoutUserInput
    histories?: HistoryUncheckedCreateNestedManyWithoutUserInput
    subscribers?: SubscriberUncheckedCreateNestedManyWithoutUserInput
    channel?: SubscriberUncheckedCreateNestedManyWithoutChannelInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    Playlist?: PlaylistUncheckedCreateNestedManyWithoutUserInput
    UserPaymentMethod?: UserPaymentMethodUncheckedCreateNestedManyWithoutUserInput
    Album?: AlbumUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutSocialAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSocialAccountInput, UserUncheckedCreateWithoutSocialAccountInput>
  }

  export type UserUpsertWithoutSocialAccountInput = {
    update: XOR<UserUpdateWithoutSocialAccountInput, UserUncheckedUpdateWithoutSocialAccountInput>
    create: XOR<UserCreateWithoutSocialAccountInput, UserUncheckedCreateWithoutSocialAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSocialAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSocialAccountInput, UserUncheckedUpdateWithoutSocialAccountInput>
  }

  export type UserUpdateWithoutSocialAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUpdateManyWithoutUserNestedInput
    histories?: HistoryUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUpdateManyWithoutUserNestedInput
    channel?: SubscriberUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUpdateManyWithoutUserNestedInput
    Album?: AlbumUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutSocialAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    media?: MediaUncheckedUpdateManyWithoutOwnerNestedInput
    mediaReactions?: MediaReactionUncheckedUpdateManyWithoutUserNestedInput
    histories?: HistoryUncheckedUpdateManyWithoutUserNestedInput
    subscribers?: SubscriberUncheckedUpdateManyWithoutUserNestedInput
    channel?: SubscriberUncheckedUpdateManyWithoutChannelNestedInput
    NotificationSubscriptions?: NotificationSubscriptionsUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    Playlist?: PlaylistUncheckedUpdateManyWithoutUserNestedInput
    UserPaymentMethod?: UserPaymentMethodUncheckedUpdateManyWithoutUserNestedInput
    Album?: AlbumUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type MediaCreateManyOwnerInput = {
    id?: string
    title: string
    views?: number
    duration?: number
    plays?: number
    status?: $Enums.StatusResource
    viewMode?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    lockedAt?: Date | string | null
    publishedAt?: Date | string | null
  }

  export type MediaReactionCreateManyUserInput = {
    id?: string
    mediaId: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoryCreateManyUserInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriberCreateManyUserInput = {
    id?: number
    channelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriberCreateManyChannelInput = {
    id?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSubscriptionsCreateManyUserInput = {
    id?: number
    subscription: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyUserInput = {
    id?: string
    mediaId: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlaylistCreateManyUserInput = {
    id?: string
    title: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserPaymentMethodCreateManyUserInput = {
    id?: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumCreateManyOwnerInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SocialAccountCreateManyOwnerInput = {
    id?: number
    type?: $Enums.AccountType
    fullName: string
    avatarUrl?: string | null
    accountUrl?: string | null
    accessToken?: string | null
    refreshToken?: string | null
    expiredAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    disabledAt?: Date | string | null
  }

  export type MediaUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUpdateManyWithoutMediaNestedInput
    history?: HistoryUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUpdateManyWithoutMediaNestedInput
    comment?: CommentUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    thumbnails?: ThumbnailUncheckedUpdateManyWithoutMediaNestedInput
    detail?: MediaDetailUncheckedUpdateOneWithoutMediaNestedInput
    videoResources?: VideoResourceUncheckedUpdateManyWithoutMediaNestedInput
    audioResources?: AudioResourceUncheckedUpdateManyWithoutMediaNestedInput
    mediaReaction?: MediaReactionUncheckedUpdateManyWithoutMediaNestedInput
    history?: HistoryUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnCategory?: MediaOnCategoryUncheckedUpdateManyWithoutMediaNestedInput
    comment?: CommentUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutMediaNestedInput
    sessionUpload?: SessionUploadUncheckedUpdateManyWithoutMediaNestedInput
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutMediaNestedInput
  }

  export type MediaUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    views?: IntFieldUpdateOperationsInput | number
    duration?: FloatFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusResourceFieldUpdateOperationsInput | $Enums.StatusResource
    viewMode?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lockedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MediaReactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutMediaReactionNestedInput
  }

  export type MediaReactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaReactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type HistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriberUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channel?: UserUpdateOneRequiredWithoutChannelNestedInput
  }

  export type SubscriberUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriberUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    channelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriberUpdateWithoutChannelInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubscribersNestedInput
  }

  export type SubscriberUncheckedUpdateWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriberUncheckedUpdateManyWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSubscriptionsUpdateWithoutUserInput = {
    subscription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSubscriptionsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSubscriptionsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscription?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlaylistUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MediaOnPlaylist?: MediaOnPlaylistUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MediaOnPlaylist?: MediaOnPlaylistUncheckedUpdateManyWithoutPlaylistNestedInput
  }

  export type PlaylistUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPaymentMethodUpdateWithoutUserInput = {
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPaymentMethodUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPaymentMethodUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaOnAlbum?: MediaOnAlbumUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mediaOnAlbum?: MediaOnAlbumUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialAccountUpdateWithoutOwnerInput = {
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accountUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disabledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SocialAccountUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accountUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disabledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SocialAccountUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumAccountTypeFieldUpdateOperationsInput | $Enums.AccountType
    fullName?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accountUrl?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    disabledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MediaOnCategoryCreateManyCategoryInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnCategoryUpdateWithoutCategoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutMediaOnCategoryNestedInput
  }

  export type MediaOnCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnCategoryUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThumbnailCreateManyMediaInput = {
    id?: string
    url: string
    isPrimary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoResourceCreateManyMediaInput = {
    id?: string
    label: string
    url: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AudioResourceCreateManyMediaInput = {
    id?: string
    label: $Enums.AudioQuality
    fileId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaReactionCreateManyMediaInput = {
    id?: string
    userId: string
    isLike: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoryCreateManyMediaInput = {
    id?: number
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnCategoryCreateManyMediaInput = {
    id?: number
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyMediaInput = {
    id?: string
    userId: string
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnPlaylistCreateManyMediaInput = {
    id?: number
    playlistId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
  }

  export type SessionUploadCreateManyMediaInput = {
    id?: string
    sessionUploadUrl: string
    created_at?: Date | string
    updated_at?: Date | string
    expired_at?: Date | string | null
  }

  export type MediaOnAlbumCreateManyMediaInput = {
    id?: number
    albumId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ThumbnailUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThumbnailUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ThumbnailUncheckedUpdateManyWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoResourceUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoResourceUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoResourceUncheckedUpdateManyWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AudioResourceUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: EnumAudioQualityFieldUpdateOperationsInput | $Enums.AudioQuality
    fileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AudioResourceUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: EnumAudioQualityFieldUpdateOperationsInput | $Enums.AudioQuality
    fileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AudioResourceUncheckedUpdateManyWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: EnumAudioQualityFieldUpdateOperationsInput | $Enums.AudioQuality
    fileId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaReactionUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMediaReactionsNestedInput
  }

  export type MediaReactionUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaReactionUncheckedUpdateManyWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    isLike?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUpdateWithoutMediaInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHistoriesNestedInput
  }

  export type HistoryUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoryUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnCategoryUpdateWithoutMediaInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutCategoryOnMediaNestedInput
  }

  export type MediaOnCategoryUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnCategoryUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnPlaylistUpdateWithoutMediaInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
    playlist?: PlaylistUpdateOneRequiredWithoutMediaOnPlaylistNestedInput
  }

  export type MediaOnPlaylistUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
  }

  export type MediaOnPlaylistUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
  }

  export type SessionUploadUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionUploadUrl?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expired_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUploadUncheckedUpdateWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionUploadUrl?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expired_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUploadUncheckedUpdateManyWithoutMediaInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionUploadUrl?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    expired_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MediaOnAlbumUpdateWithoutMediaInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    album?: AlbumUpdateOneRequiredWithoutMediaOnAlbumNestedInput
  }

  export type MediaOnAlbumUncheckedUpdateWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnAlbumUncheckedUpdateManyWithoutMediaInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnPlaylistCreateManyPlaylistInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sortNo?: number
  }

  export type MediaOnPlaylistUpdateWithoutPlaylistInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
    media?: MediaUpdateOneRequiredWithoutMediaOnPlaylistNestedInput
  }

  export type MediaOnPlaylistUncheckedUpdateWithoutPlaylistInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
  }

  export type MediaOnPlaylistUncheckedUpdateManyWithoutPlaylistInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sortNo?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentTransactionDetailCreateManyPaymentTransactionInput = {
    totalPrice: number
    paymentMethod: $Enums.PaymentMethod
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionDetailUpdateWithoutPaymentTransactionInput = {
    totalPrice?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionDetailUncheckedUpdateWithoutPaymentTransactionInput = {
    totalPrice?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionDetailUncheckedUpdateManyWithoutPaymentTransactionInput = {
    totalPrice?: FloatFieldUpdateOperationsInput | number
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnAlbumCreateManyAlbumInput = {
    id?: number
    mediaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MediaOnAlbumUpdateWithoutAlbumInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    media?: MediaUpdateOneRequiredWithoutMediaOnAlbumNestedInput
  }

  export type MediaOnAlbumUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MediaOnAlbumUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaCountOutputTypeDefaultArgs instead
     */
    export type MediaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistCountOutputTypeDefaultArgs instead
     */
    export type PlaylistCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaylistCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentTransactionCountOutputTypeDefaultArgs instead
     */
    export type PaymentTransactionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentTransactionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlbumCountOutputTypeDefaultArgs instead
     */
    export type AlbumCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlbumCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPaymentMethodDefaultArgs instead
     */
    export type UserPaymentMethodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPaymentMethodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaOnCategoryDefaultArgs instead
     */
    export type MediaOnCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaOnCategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionUploadDefaultArgs instead
     */
    export type SessionUploadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionUploadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaDefaultArgs instead
     */
    export type MediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaReactionDefaultArgs instead
     */
    export type MediaReactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaReactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlaylistDefaultArgs instead
     */
    export type PlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlaylistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaOnPlaylistDefaultArgs instead
     */
    export type MediaOnPlaylistArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaOnPlaylistDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HistoryDefaultArgs instead
     */
    export type HistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubscriberDefaultArgs instead
     */
    export type SubscriberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubscriberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationSubscriptionsDefaultArgs instead
     */
    export type NotificationSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationSubscriptionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VideoResourceDefaultArgs instead
     */
    export type VideoResourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VideoResourceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AudioResourceDefaultArgs instead
     */
    export type AudioResourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AudioResourceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaDetailDefaultArgs instead
     */
    export type MediaDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThumbnailDefaultArgs instead
     */
    export type ThumbnailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ThumbnailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentTransactionDefaultArgs instead
     */
    export type PaymentTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentTransactionDetailDefaultArgs instead
     */
    export type PaymentTransactionDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentTransactionDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MediaOnAlbumDefaultArgs instead
     */
    export type MediaOnAlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MediaOnAlbumDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlbumDefaultArgs instead
     */
    export type AlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlbumDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SocialAccountDefaultArgs instead
     */
    export type SocialAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SocialAccountDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}